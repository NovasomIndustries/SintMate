
SintMate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000916c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000064f4  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f900  0800f900  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800f900  0800f900  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f900  0800f900  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f900  0800f900  0001f900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f904  0800f904  0001f904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  24000000  0800f908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025a7c  2400008c  0800f994  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24025b08  0800f994  00025b08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e03  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a93  00000000  00000000  00045ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00049950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  0004aab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003943a  00000000  00000000  0004baa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013420  00000000  00000000  00084eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00161448  00000000  00000000  000982fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f9742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c8  00000000  00000000  001f97c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080093f4 	.word	0x080093f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	080093f4 	.word	0x080093f4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SintMate_SystemSetDefaults>:

SystemParametersTypeDef	SystemParameters;
SystemVarDef			SystemVar;

void SintMate_SystemSetDefaults(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	bzero((uint8_t *)&SystemParameters,sizeof(SystemParameters));
 8000394:	2138      	movs	r1, #56	; 0x38
 8000396:	4808      	ldr	r0, [pc, #32]	; (80003b8 <SintMate_SystemSetDefaults+0x28>)
 8000398:	f008 fbde 	bl	8008b58 <bzero>
	sprintf(SystemParameters.Header,SintMateNAME);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <SintMate_SystemSetDefaults+0x28>)
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <SintMate_SystemSetDefaults+0x2c>)
 80003a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80003a2:	c303      	stmia	r3!, {r0, r1}
 80003a4:	701a      	strb	r2, [r3, #0]
	sprintf(SystemParameters.Version,SintMateVERSION);
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <SintMate_SystemSetDefaults+0x30>)
 80003a8:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <SintMate_SystemSetDefaults+0x34>)
 80003aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ae:	6018      	str	r0, [r3, #0]
 80003b0:	3304      	adds	r3, #4
 80003b2:	8019      	strh	r1, [r3, #0]
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	240000c4 	.word	0x240000c4
 80003bc:	0800940c 	.word	0x0800940c
 80003c0:	240000d4 	.word	0x240000d4
 80003c4:	08009418 	.word	0x08009418

080003c8 <Init_SintMate>:

void Init_SintMate(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08e      	sub	sp, #56	; 0x38
 80003cc:	af04      	add	r7, sp, #16
char	NameVersion[32];
uint32_t	xpos;
	SetupFlash();
 80003ce:	f000 f9db 	bl	8000788 <SetupFlash>
	ILI9341_Init();
 80003d2:	f000 fac9 	bl	8000968 <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 80003d6:	2000      	movs	r0, #0
 80003d8:	f000 ff5e 	bl	8001298 <ILI9341_FillScreen>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003dc:	2100      	movs	r1, #0
 80003de:	4828      	ldr	r0, [pc, #160]	; (8000480 <Init_SintMate+0xb8>)
 80003e0:	f007 fdc2 	bl	8007f68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003e4:	2104      	movs	r1, #4
 80003e6:	4826      	ldr	r0, [pc, #152]	; (8000480 <Init_SintMate+0xb8>)
 80003e8:	f007 fdbe 	bl	8007f68 <HAL_TIM_PWM_Start>
	if ( SystemParameters.touch_is_calibrated == 0 )
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <Init_SintMate+0xbc>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d103      	bne.n	80003fc <Init_SintMate+0x34>
	{
		ILI9341_calibrate_touch();
 80003f4:	f001 f824 	bl	8001440 <ILI9341_calibrate_touch>
		StoreSettingsInFlash();
 80003f8:	f000 f9a4 	bl	8000744 <StoreSettingsInFlash>
	}
	sprintf(NameVersion,"V. %s",SintMateVERSION);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4a22      	ldr	r2, [pc, #136]	; (8000488 <Init_SintMate+0xc0>)
 8000400:	4922      	ldr	r1, [pc, #136]	; (800048c <Init_SintMate+0xc4>)
 8000402:	4618      	mov	r0, r3
 8000404:	f008 fbde 	bl	8008bc4 <siprintf>
	xpos = (ILI9341_WIDTH - strlen(SintMateNAME)*16)/2;
 8000408:	2338      	movs	r3, #56	; 0x38
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
	ILI9341_WriteString(xpos, 2*10+2*18, SintMateNAME, Font_16x26, ILI9341_BLUE, ILI9341_BLACK);
 800040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040e:	b298      	uxth	r0, r3
 8000410:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <Init_SintMate+0xc8>)
 8000412:	2200      	movs	r2, #0
 8000414:	9202      	str	r2, [sp, #8]
 8000416:	221f      	movs	r2, #31
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	685a      	ldr	r2, [r3, #4]
 800041c:	9200      	str	r2, [sp, #0]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <Init_SintMate+0xcc>)
 8000422:	2138      	movs	r1, #56	; 0x38
 8000424:	f000 fe53 	bl	80010ce <ILI9341_WriteString>
	xpos = (ILI9341_WIDTH - strlen(NameVersion)*11)/2;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff58 	bl	80002e0 <strlen>
 8000430:	4602      	mov	r2, r0
 8000432:	4613      	mov	r3, r2
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	4413      	add	r3, r2
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	4413      	add	r3, r2
 800043c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000440:	085b      	lsrs	r3, r3, #1
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
	ILI9341_WriteString(xpos, 4*10+4*18, NameVersion, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 8000444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000446:	b298      	uxth	r0, r3
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <Init_SintMate+0xd0>)
 800044a:	1d39      	adds	r1, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	9202      	str	r2, [sp, #8]
 8000450:	221f      	movs	r2, #31
 8000452:	9201      	str	r2, [sp, #4]
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	9200      	str	r2, [sp, #0]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	460a      	mov	r2, r1
 800045c:	2170      	movs	r1, #112	; 0x70
 800045e:	f000 fe36 	bl	80010ce <ILI9341_WriteString>
	HAL_Delay(1000);
 8000462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000466:	f002 f845 	bl	80024f4 <HAL_Delay>
	//ILI9341_FillScreen(ILI9341_RED);
	//tempwritebkg(0);
	//ILI9341_FillScreen(ILI9341_BLACK);
	HAL_Delay(1000);
 800046a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046e:	f002 f841 	bl	80024f4 <HAL_Delay>
	LoadBackgroundImage(0);
 8000472:	2000      	movs	r0, #0
 8000474:	f000 ff6c 	bl	8001350 <LoadBackgroundImage>
}
 8000478:	bf00      	nop
 800047a:	3728      	adds	r7, #40	; 0x28
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	24025a3c 	.word	0x24025a3c
 8000484:	240000c4 	.word	0x240000c4
 8000488:	08009418 	.word	0x08009418
 800048c:	08009420 	.word	0x08009420
 8000490:	24000010 	.word	0x24000010
 8000494:	0800940c 	.word	0x0800940c
 8000498:	24000008 	.word	0x24000008

0800049c <flash_SpiTX>:
#define		GETSTATUS_COMMAND		0x05
#define		SECTOR_ERASE_COMMAND	0x20


static uint8_t	flash_SpiTX(uint8_t	Data)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
uint8_t	ret;
	HAL_SPI_TransmitReceive(&FlashSPIport,&Data,&ret,1,100);
 80004a6:	f107 020f 	add.w	r2, r7, #15
 80004aa:	1df9      	adds	r1, r7, #7
 80004ac:	2364      	movs	r3, #100	; 0x64
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2301      	movs	r3, #1
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <flash_SpiTX+0x28>)
 80004b4:	f006 ff08 	bl	80072c8 <HAL_SPI_TransmitReceive>
	return ret;
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2402592c 	.word	0x2402592c

080004c8 <flash_WaitForWriteEnd>:

static void flash_WaitForWriteEnd(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
uint8_t		StatusRegister1;
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2110      	movs	r1, #16
 80004d2:	480c      	ldr	r0, [pc, #48]	; (8000504 <flash_WaitForWriteEnd+0x3c>)
 80004d4:	f004 fa1a 	bl	800490c <HAL_GPIO_WritePin>
	flash_SpiTX(GETSTATUS_COMMAND);
 80004d8:	2005      	movs	r0, #5
 80004da:	f7ff ffdf 	bl	800049c <flash_SpiTX>
	do
	{
		StatusRegister1 = flash_SpiTX(W25Q_DUMMY_BYTE);
 80004de:	20a5      	movs	r0, #165	; 0xa5
 80004e0:	f7ff ffdc 	bl	800049c <flash_SpiTX>
 80004e4:	4603      	mov	r3, r0
 80004e6:	71fb      	strb	r3, [r7, #7]
	}
	while ((StatusRegister1 & 0x01) == 0x01);
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d1f5      	bne.n	80004de <flash_WaitForWriteEnd+0x16>
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2110      	movs	r1, #16
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <flash_WaitForWriteEnd+0x3c>)
 80004f8:	f004 fa08 	bl	800490c <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	58020000 	.word	0x58020000

08000508 <flash_WriteEnable>:

static void flash_WriteEnable(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2110      	movs	r1, #16
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <flash_WriteEnable+0x24>)
 8000512:	f004 f9fb 	bl	800490c <HAL_GPIO_WritePin>
	flash_SpiTX(WRITE_ENABLE_COMMAND);
 8000516:	2006      	movs	r0, #6
 8000518:	f7ff ffc0 	bl	800049c <flash_SpiTX>
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2110      	movs	r1, #16
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <flash_WriteEnable+0x24>)
 8000522:	f004 f9f3 	bl	800490c <HAL_GPIO_WritePin>
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	58020000 	.word	0x58020000

08000530 <flash_SectorToAddress>:
	flash_SpiTX(WRITE_DISABLE_COMMAND);
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_SET);
}

uint32_t	flash_SectorToAddress(uint32_t	Sector)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	return Sector * SECTOR_SIZE;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	031b      	lsls	r3, r3, #12
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <send_cmd_addr>:
{
	return Address / SECTOR_SIZE;
}

static uint32_t send_cmd_addr(uint8_t cmd,uint32_t Address)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	6039      	str	r1, [r7, #0]
 8000552:	71fb      	strb	r3, [r7, #7]
uint32_t	ret = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
	flash_SpiTX(cmd);
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff9e 	bl	800049c <flash_SpiTX>
	if ( SystemParameters.flash_capacity == F256 )
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <send_cmd_addr+0x80>)
 8000562:	6a1b      	ldr	r3, [r3, #32]
 8000564:	2b19      	cmp	r3, #25
 8000566:	d108      	bne.n	800057a <send_cmd_addr+0x32>
		ret = flash_SpiTX((Address & 0xFF000000) >> 24) << 24;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	0e1b      	lsrs	r3, r3, #24
 800056c:	b2db      	uxtb	r3, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ff94 	bl	800049c <flash_SpiTX>
 8000574:	4603      	mov	r3, r0
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	60fb      	str	r3, [r7, #12]
	ret |= flash_SpiTX((Address & 0xFF0000) >> 16) << 16;
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	0c1b      	lsrs	r3, r3, #16
 800057e:	b2db      	uxtb	r3, r3
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ff8b 	bl	800049c <flash_SpiTX>
 8000586:	4603      	mov	r3, r0
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	461a      	mov	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4313      	orrs	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
	ret |= flash_SpiTX((Address & 0xFF00) >> 8) << 8;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff7f 	bl	800049c <flash_SpiTX>
 800059e:	4603      	mov	r3, r0
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
	ret |= flash_SpiTX(Address & 0xFF);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff74 	bl	800049c <flash_SpiTX>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
	return ret;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	240000c4 	.word	0x240000c4

080005cc <flash_EraseSector>:

void flash_EraseSector(uint32_t Sector)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
uint32_t	SectorAddr;
	SectorAddr = Sector * SECTOR_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	031b      	lsls	r3, r3, #12
 80005d8:	60fb      	str	r3, [r7, #12]
	flash_WriteEnable();
 80005da:	f7ff ff95 	bl	8000508 <flash_WriteEnable>
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2110      	movs	r1, #16
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <flash_EraseSector+0x3c>)
 80005e4:	f004 f992 	bl	800490c <HAL_GPIO_WritePin>
	send_cmd_addr(SECTOR_ERASE_COMMAND,SectorAddr);
 80005e8:	68f9      	ldr	r1, [r7, #12]
 80005ea:	2020      	movs	r0, #32
 80005ec:	f7ff ffac 	bl	8000548 <send_cmd_addr>
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2110      	movs	r1, #16
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <flash_EraseSector+0x3c>)
 80005f6:	f004 f989 	bl	800490c <HAL_GPIO_WritePin>
	flash_WaitForWriteEnd();
 80005fa:	f7ff ff65 	bl	80004c8 <flash_WaitForWriteEnd>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	58020000 	.word	0x58020000

0800060c <flash_ReadBytes>:

void flash_ReadBytes(uint8_t* pBuffer, uint32_t Address, uint32_t size)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <flash_ReadBytes+0x48>)
 800061e:	f004 f975 	bl	800490c <HAL_GPIO_WritePin>
	send_cmd_addr(READ_COMMAND,Address);
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	200b      	movs	r0, #11
 8000626:	f7ff ff8f 	bl	8000548 <send_cmd_addr>
	flash_SpiTX(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ff36 	bl	800049c <flash_SpiTX>
	HAL_SPI_Receive(&FlashSPIport,pBuffer,size,2000);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b29a      	uxth	r2, r3
 8000634:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000638:	68f9      	ldr	r1, [r7, #12]
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <flash_ReadBytes+0x4c>)
 800063c:	f006 fc52 	bl	8006ee4 <HAL_SPI_Receive>
	//HAL_SPI_Receive_DMA(&FlashSPIport,pBuffer,size);
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2110      	movs	r1, #16
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <flash_ReadBytes+0x48>)
 8000646:	f004 f961 	bl	800490c <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	58020000 	.word	0x58020000
 8000658:	2402592c 	.word	0x2402592c

0800065c <flash_WritePage>:

static void flash_WritePage(uint8_t* pBuffer, uint32_t Address, uint32_t size)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
	flash_WriteEnable();
 8000668:	f7ff ff4e 	bl	8000508 <flash_WriteEnable>
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2110      	movs	r1, #16
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <flash_WritePage+0x48>)
 8000672:	f004 f94b 	bl	800490c <HAL_GPIO_WritePin>
	send_cmd_addr(WRITE_COMMAND,Address);
 8000676:	68b9      	ldr	r1, [r7, #8]
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff ff65 	bl	8000548 <send_cmd_addr>
	HAL_SPI_Transmit(&FlashSPIport,pBuffer,size,100);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	b29a      	uxth	r2, r3
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	68f9      	ldr	r1, [r7, #12]
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <flash_WritePage+0x4c>)
 8000688:	f006 fa3a 	bl	8006b00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2110      	movs	r1, #16
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <flash_WritePage+0x48>)
 8000692:	f004 f93b 	bl	800490c <HAL_GPIO_WritePin>
	flash_WaitForWriteEnd();
 8000696:	f7ff ff17 	bl	80004c8 <flash_WaitForWriteEnd>
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	58020000 	.word	0x58020000
 80006a8:	2402592c 	.word	0x2402592c

080006ac <flash_WriteBytes>:

void flash_WriteBytes(uint8_t* pBuffer, uint32_t Address, uint32_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	while(size > PAGE_SIZE)
 80006b8:	e011      	b.n	80006de <flash_WriteBytes+0x32>
	{
		flash_WritePage(pBuffer, Address, PAGE_SIZE);
 80006ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff ffcb 	bl	800065c <flash_WritePage>
		size -= PAGE_SIZE;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006cc:	607b      	str	r3, [r7, #4]
		Address += PAGE_SIZE;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80006d4:	60bb      	str	r3, [r7, #8]
		pBuffer += PAGE_SIZE;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80006dc:	60fb      	str	r3, [r7, #12]
	while(size > PAGE_SIZE)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006e4:	d8e9      	bhi.n	80006ba <flash_WriteBytes+0xe>
	}
	if ( size > 0 )
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d004      	beq.n	80006f6 <flash_WriteBytes+0x4a>
		flash_WritePage(pBuffer, Address, size);
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f7ff ffb3 	bl	800065c <flash_WritePage>
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <flash_ReadID>:

uint32_t flash_ReadID(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
uint32_t fake_addr, ret_val;
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <flash_ReadID+0x40>)
 800070c:	f004 f8fe 	bl	800490c <HAL_GPIO_WritePin>
	flash_SpiTX(READ_ID_COMMAND);
 8000710:	209f      	movs	r0, #159	; 0x9f
 8000712:	f7ff fec3 	bl	800049c <flash_SpiTX>
	fake_addr = (W25Q_DUMMY_BYTE << 24 )|(W25Q_DUMMY_BYTE << 16 )|(W25Q_DUMMY_BYTE << 8 )|(W25Q_DUMMY_BYTE << 0 );
 8000716:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800071a:	607b      	str	r3, [r7, #4]
	ret_val = send_cmd_addr(READ_ID_COMMAND,fake_addr) >> 8;
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	209f      	movs	r0, #159	; 0x9f
 8000720:	f7ff ff12 	bl	8000548 <send_cmd_addr>
 8000724:	4603      	mov	r3, r0
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(FLASH_SS_GPIO_Port,FLASH_SS_Pin,GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2110      	movs	r1, #16
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <flash_ReadID+0x40>)
 8000730:	f004 f8ec 	bl	800490c <HAL_GPIO_WritePin>
	return ret_val;
 8000734:	683b      	ldr	r3, [r7, #0]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	58020000 	.word	0x58020000

08000744 <StoreSettingsInFlash>:
 * Sector 4 ..  : user data
 */


void StoreSettingsInFlash(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	flash_EraseSector(HEADER_SECTOR);
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff ff3f 	bl	80005cc <flash_EraseSector>
	flash_WriteBytes((uint8_t *)&SystemParameters ,flash_SectorToAddress(HEADER_SECTOR),sizeof(SystemParameters));
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff feee 	bl	8000530 <flash_SectorToAddress>
 8000754:	4603      	mov	r3, r0
 8000756:	2238      	movs	r2, #56	; 0x38
 8000758:	4619      	mov	r1, r3
 800075a:	4802      	ldr	r0, [pc, #8]	; (8000764 <StoreSettingsInFlash+0x20>)
 800075c:	f7ff ffa6 	bl	80006ac <flash_WriteBytes>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	240000c4 	.word	0x240000c4

08000768 <LoadSettingsFromFlash>:

void LoadSettingsFromFlash(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	flash_ReadBytes((uint8_t *)&SystemParameters,flash_SectorToAddress(HEADER_SECTOR),sizeof(SystemParameters));
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff fedf 	bl	8000530 <flash_SectorToAddress>
 8000772:	4603      	mov	r3, r0
 8000774:	2238      	movs	r2, #56	; 0x38
 8000776:	4619      	mov	r1, r3
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <LoadSettingsFromFlash+0x1c>)
 800077a:	f7ff ff47 	bl	800060c <flash_ReadBytes>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	240000c4 	.word	0x240000c4

08000788 <SetupFlash>:

uint32_t	FlashIs256	= 0;

uint32_t SetupFlash(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
uint32_t	FlashID;
	FlashID = flash_ReadID();
 800078e:	f7ff ffb7 	bl	8000700 <flash_ReadID>
 8000792:	6078      	str	r0, [r7, #4]
	if (( FlashID & 0xff ) == F128 )	/* 128 MBits */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b18      	cmp	r3, #24
 800079a:	d103      	bne.n	80007a4 <SetupFlash+0x1c>
		SystemParameters.flash_capacity = F128;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <SetupFlash+0x60>)
 800079e:	2218      	movs	r2, #24
 80007a0:	621a      	str	r2, [r3, #32]
 80007a2:	e00a      	b.n	80007ba <SetupFlash+0x32>
	else if (( FlashID & 0xff ) == F256 )	/* 256 MBits */
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b19      	cmp	r3, #25
 80007aa:	d103      	bne.n	80007b4 <SetupFlash+0x2c>
		SystemParameters.flash_capacity = F256;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <SetupFlash+0x60>)
 80007ae:	2219      	movs	r2, #25
 80007b0:	621a      	str	r2, [r3, #32]
 80007b2:	e002      	b.n	80007ba <SetupFlash+0x32>
	else
		return -1;
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b8:	e011      	b.n	80007de <SetupFlash+0x56>
	LoadSettingsFromFlash();
 80007ba:	f7ff ffd5 	bl	8000768 <LoadSettingsFromFlash>
	if ( strncmp(SystemParameters.Header,SintMateNAME,strlen(SintMateNAME) ) != 0 )
 80007be:	2208      	movs	r2, #8
 80007c0:	490a      	ldr	r1, [pc, #40]	; (80007ec <SetupFlash+0x64>)
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <SetupFlash+0x60>)
 80007c4:	f008 fa1e 	bl	8008c04 <strncmp>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d005      	beq.n	80007da <SetupFlash+0x52>
	{
		SintMate_SystemSetDefaults();
 80007ce:	f7ff fddf 	bl	8000390 <SintMate_SystemSetDefaults>
		StoreSettingsInFlash();
 80007d2:	f7ff ffb7 	bl	8000744 <StoreSettingsInFlash>
		LoadSettingsFromFlash();
 80007d6:	f7ff ffc7 	bl	8000768 <LoadSettingsFromFlash>
	}
	return FlashIs256;
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <SetupFlash+0x68>)
 80007dc:	681b      	ldr	r3, [r3, #0]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	240000c4 	.word	0x240000c4
 80007ec:	08009428 	.word	0x08009428
 80007f0:	240000a8 	.word	0x240000a8

080007f4 <ILI9341_Select>:
#include "main.h"
#include <stdlib.h>

uint8_t	fillbuff[FILLSIZE];

static void ILI9341_Select() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <ILI9341_Select+0x14>)
 80007fe:	f004 f885 	bl	800490c <HAL_GPIO_WritePin>
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	58020c00 	.word	0x58020c00

0800080c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <ILI9341_Unselect+0x14>)
 8000816:	f004 f879 	bl	800490c <HAL_GPIO_WritePin>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58020c00 	.word	0x58020c00

08000824 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2108      	movs	r1, #8
 800082c:	4806      	ldr	r0, [pc, #24]	; (8000848 <ILI9341_Reset+0x24>)
 800082e:	f004 f86d 	bl	800490c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000832:	2005      	movs	r0, #5
 8000834:	f001 fe5e 	bl	80024f4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2108      	movs	r1, #8
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <ILI9341_Reset+0x24>)
 800083e:	f004 f865 	bl	800490c <HAL_GPIO_WritePin>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	58020c00 	.word	0x58020c00

0800084c <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2110      	movs	r1, #16
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <ILI9341_WriteCommand+0x2c>)
 800085c:	f004 f856 	bl	800490c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000860:	1df9      	adds	r1, r7, #7
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000866:	2201      	movs	r2, #1
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <ILI9341_WriteCommand+0x30>)
 800086a:	f006 f949 	bl	8006b00 <HAL_SPI_Transmit>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	58020c00 	.word	0x58020c00
 800087c:	240259b4 	.word	0x240259b4

08000880 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2110      	movs	r1, #16
 800088e:	4810      	ldr	r0, [pc, #64]	; (80008d0 <ILI9341_WriteData+0x50>)
 8000890:	f004 f83c 	bl	800490c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000894:	e015      	b.n	80008c2 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800089c:	bf28      	it	cs
 800089e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80008a2:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80008a4:	89fa      	ldrh	r2, [r7, #14]
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <ILI9341_WriteData+0x54>)
 80008ae:	f006 f927 	bl	8006b00 <HAL_SPI_Transmit>
        buff += chunk_size;
 80008b2:	89fb      	ldrh	r3, [r7, #14]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80008ba:	89fb      	ldrh	r3, [r7, #14]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1e6      	bne.n	8000896 <ILI9341_WriteData+0x16>
    }
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	58020c00 	.word	0x58020c00
 80008d4:	240259b4 	.word	0x240259b4

080008d8 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4604      	mov	r4, r0
 80008e0:	4608      	mov	r0, r1
 80008e2:	4611      	mov	r1, r2
 80008e4:	461a      	mov	r2, r3
 80008e6:	4623      	mov	r3, r4
 80008e8:	80fb      	strh	r3, [r7, #6]
 80008ea:	4603      	mov	r3, r0
 80008ec:	80bb      	strh	r3, [r7, #4]
 80008ee:	460b      	mov	r3, r1
 80008f0:	807b      	strh	r3, [r7, #2]
 80008f2:	4613      	mov	r3, r2
 80008f4:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80008f6:	202a      	movs	r0, #42	; 0x2a
 80008f8:	f7ff ffa8 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	0a1b      	lsrs	r3, r3, #8
 8000900:	b29b      	uxth	r3, r3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	733b      	strb	r3, [r7, #12]
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	737b      	strb	r3, [r7, #13]
 800090c:	887b      	ldrh	r3, [r7, #2]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	b29b      	uxth	r3, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	73bb      	strb	r3, [r7, #14]
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2104      	movs	r1, #4
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ffac 	bl	8000880 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000928:	202b      	movs	r0, #43	; 0x2b
 800092a:	f7ff ff8f 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800092e:	88bb      	ldrh	r3, [r7, #4]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	723b      	strb	r3, [r7, #8]
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	727b      	strb	r3, [r7, #9]
 800093e:	883b      	ldrh	r3, [r7, #0]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	b29b      	uxth	r3, r3
 8000944:	b2db      	uxtb	r3, r3
 8000946:	72bb      	strb	r3, [r7, #10]
 8000948:	883b      	ldrh	r3, [r7, #0]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	2104      	movs	r1, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff93 	bl	8000880 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800095a:	202c      	movs	r0, #44	; 0x2c
 800095c:	f7ff ff76 	bl	800084c <ILI9341_WriteCommand>
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <ILI9341_Init>:

void ILI9341_Init() {
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b09b      	sub	sp, #108	; 0x6c
 800096c:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 800096e:	f7ff ff59 	bl	8000824 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_Select();
 8000972:	f7ff ff3f 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0x01);
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff ff68 	bl	800084c <ILI9341_WriteCommand>
    ILI9341_Unselect();
 800097c:	f7ff ff46 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1000);
 8000980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000984:	f001 fdb6 	bl	80024f4 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_Select();
 8000988:	f7ff ff34 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xCB);
 800098c:	20cb      	movs	r0, #203	; 0xcb
 800098e:	f7ff ff5d 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000992:	4ad1      	ldr	r2, [pc, #836]	; (8000cd8 <ILI9341_Init+0x370>)
 8000994:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800099c:	6018      	str	r0, [r3, #0]
 800099e:	3304      	adds	r3, #4
 80009a0:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80009a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009a6:	2105      	movs	r1, #5
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff69 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 80009ae:	f7ff ff2d 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f001 fd9e 	bl	80024f4 <HAL_Delay>

    // POWER CONTROL B
    ILI9341_Select();
 80009b8:	f7ff ff1c 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xCF);
 80009bc:	20cf      	movs	r0, #207	; 0xcf
 80009be:	f7ff ff45 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80009c2:	4ac6      	ldr	r2, [pc, #792]	; (8000cdc <ILI9341_Init+0x374>)
 80009c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009c8:	6812      	ldr	r2, [r2, #0]
 80009ca:	4611      	mov	r1, r2
 80009cc:	8019      	strh	r1, [r3, #0]
 80009ce:	3302      	adds	r3, #2
 80009d0:	0c12      	lsrs	r2, r2, #16
 80009d2:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80009d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009d8:	2103      	movs	r1, #3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff50 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 80009e0:	f7ff ff14 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f001 fd85 	bl	80024f4 <HAL_Delay>

    // DRIVER TIMING CONTROL A
    ILI9341_Select();
 80009ea:	f7ff ff03 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xE8);
 80009ee:	20e8      	movs	r0, #232	; 0xe8
 80009f0:	f7ff ff2c 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80009f4:	4aba      	ldr	r2, [pc, #744]	; (8000ce0 <ILI9341_Init+0x378>)
 80009f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009fa:	6812      	ldr	r2, [r2, #0]
 80009fc:	4611      	mov	r1, r2
 80009fe:	8019      	strh	r1, [r3, #0]
 8000a00:	3302      	adds	r3, #2
 8000a02:	0c12      	lsrs	r2, r2, #16
 8000a04:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a0a:	2103      	movs	r1, #3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff37 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000a12:	f7ff fefb 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f001 fd6c 	bl	80024f4 <HAL_Delay>

    // DRIVER TIMING CONTROL B
    ILI9341_Select();
 8000a1c:	f7ff feea 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xEA);
 8000a20:	20ea      	movs	r0, #234	; 0xea
 8000a22:	f7ff ff13 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        ILI9341_WriteData(data, sizeof(data));
 8000a32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a36:	2102      	movs	r1, #2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff21 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000a3e:	f7ff fee5 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f001 fd56 	bl	80024f4 <HAL_Delay>

    // POWER ON SEQUENCE CONTROL
    ILI9341_Select();
 8000a48:	f7ff fed4 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xED);
 8000a4c:	20ed      	movs	r0, #237	; 0xed
 8000a4e:	f7ff fefd 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000a52:	4ba4      	ldr	r3, [pc, #656]	; (8000ce4 <ILI9341_Init+0x37c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000a58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff0e 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000a64:	f7ff fed2 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f001 fd43 	bl	80024f4 <HAL_Delay>

    // PUMP RATIO CONTROL
    ILI9341_Select();
 8000a6e:	f7ff fec1 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xF7);
 8000a72:	20f7      	movs	r0, #247	; 0xf7
 8000a74:	f7ff feea 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000a78:	2320      	movs	r3, #32
 8000a7a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000a7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fefb 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000a8a:	f7ff febf 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f001 fd30 	bl	80024f4 <HAL_Delay>

    // POWER CONTROL,VRH[5:0]
    ILI9341_Select();
 8000a94:	f7ff feae 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xC0);
 8000a98:	20c0      	movs	r0, #192	; 0xc0
 8000a9a:	f7ff fed7 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000a9e:	2323      	movs	r3, #35	; 0x23
 8000aa0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000aa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fee8 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000ab0:	f7ff feac 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f001 fd1d 	bl	80024f4 <HAL_Delay>

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_Select();
 8000aba:	f7ff fe9b 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xC1);
 8000abe:	20c1      	movs	r0, #193	; 0xc1
 8000ac0:	f7ff fec4 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000aca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fed5 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000ad6:	f7ff fe99 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f001 fd0a 	bl	80024f4 <HAL_Delay>

    // VCM CONTROL
    ILI9341_Select();
 8000ae0:	f7ff fe88 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xC5);
 8000ae4:	20c5      	movs	r0, #197	; 0xc5
 8000ae6:	f7ff feb1 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000aea:	4b7f      	ldr	r3, [pc, #508]	; (8000ce8 <ILI9341_Init+0x380>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000af2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000af6:	2102      	movs	r1, #2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fec1 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000afe:	f7ff fe85 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f001 fcf6 	bl	80024f4 <HAL_Delay>

    // VCM CONTROL 2
    ILI9341_Select();
 8000b08:	f7ff fe74 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xC7);
 8000b0c:	20c7      	movs	r0, #199	; 0xc7
 8000b0e:	f7ff fe9d 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000b12:	2386      	movs	r3, #134	; 0x86
 8000b14:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000b18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff feae 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000b24:	f7ff fe72 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f001 fce3 	bl	80024f4 <HAL_Delay>

    // MEMORY ACCESS CONTROL
    ILI9341_Select();
 8000b2e:	f7ff fe61 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0x36);
 8000b32:	2036      	movs	r0, #54	; 0x36
 8000b34:	f7ff fe8a 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000b38:	2348      	movs	r3, #72	; 0x48
 8000b3a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000b3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b42:	2101      	movs	r1, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fe9b 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000b4a:	f7ff fe5f 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f001 fcd0 	bl	80024f4 <HAL_Delay>

    // PIXEL FORMAT
    ILI9341_Select();
 8000b54:	f7ff fe4e 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0x3A);
 8000b58:	203a      	movs	r0, #58	; 0x3a
 8000b5a:	f7ff fe77 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000b5e:	2355      	movs	r3, #85	; 0x55
 8000b60:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000b64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fe88 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000b70:	f7ff fe4c 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f001 fcbd 	bl	80024f4 <HAL_Delay>

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_Select();
 8000b7a:	f7ff fe3b 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xB1);
 8000b7e:	20b1      	movs	r0, #177	; 0xb1
 8000b80:	f7ff fe64 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000b8a:	2318      	movs	r3, #24
 8000b8c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        ILI9341_WriteData(data, sizeof(data));
 8000b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b94:	2102      	movs	r1, #2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe72 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000b9c:	f7ff fe36 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f001 fca7 	bl	80024f4 <HAL_Delay>

    // DISPLAY FUNCTION CONTROL
    ILI9341_Select();
 8000ba6:	f7ff fe25 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xB6);
 8000baa:	20b6      	movs	r0, #182	; 0xb6
 8000bac:	f7ff fe4e 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000bb0:	4a4e      	ldr	r2, [pc, #312]	; (8000cec <ILI9341_Init+0x384>)
 8000bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	8019      	strh	r1, [r3, #0]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	0c12      	lsrs	r2, r2, #16
 8000bc0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe59 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000bce:	f7ff fe1d 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f001 fc8e 	bl	80024f4 <HAL_Delay>

    // 3GAMMA FUNCTION DISABLE
    ILI9341_Select();
 8000bd8:	f7ff fe0c 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xF2);
 8000bdc:	20f2      	movs	r0, #242	; 0xf2
 8000bde:	f7ff fe35 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000be2:	2300      	movs	r3, #0
 8000be4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 8000be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bec:	2101      	movs	r1, #1
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fe46 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000bf4:	f7ff fe0a 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f001 fc7b 	bl	80024f4 <HAL_Delay>

    // GAMMA CURVE SELECTED
    ILI9341_Select();
 8000bfe:	f7ff fdf9 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0x26);
 8000c02:	2026      	movs	r0, #38	; 0x26
 8000c04:	f7ff fe22 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	2101      	movs	r1, #1
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fe33 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000c1a:	f7ff fdf7 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f001 fc68 	bl	80024f4 <HAL_Delay>

    // POSITIVE GAMMA CORRECTION
    ILI9341_Select();
 8000c24:	f7ff fde6 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xE0);
 8000c28:	20e0      	movs	r0, #224	; 0xe0
 8000c2a:	f7ff fe0f 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000c2e:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <ILI9341_Init+0x388>)
 8000c30:	f107 0414 	add.w	r4, r7, #20
 8000c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c36:	c407      	stmia	r4!, {r0, r1, r2}
 8000c38:	8023      	strh	r3, [r4, #0]
 8000c3a:	3402      	adds	r4, #2
 8000c3c:	0c1b      	lsrs	r3, r3, #16
 8000c3e:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	210f      	movs	r1, #15
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fe1a 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000c4c:	f7ff fdde 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000c50:	2001      	movs	r0, #1
 8000c52:	f001 fc4f 	bl	80024f4 <HAL_Delay>

    // NEGATIVE GAMMA CORRECTION
    ILI9341_Select();
 8000c56:	f7ff fdcd 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0xE1);
 8000c5a:	20e1      	movs	r0, #225	; 0xe1
 8000c5c:	f7ff fdf6 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <ILI9341_Init+0x38c>)
 8000c62:	1d3c      	adds	r4, r7, #4
 8000c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c66:	c407      	stmia	r4!, {r0, r1, r2}
 8000c68:	8023      	strh	r3, [r4, #0]
 8000c6a:	3402      	adds	r4, #2
 8000c6c:	0c1b      	lsrs	r3, r3, #16
 8000c6e:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	210f      	movs	r1, #15
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fe03 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000c7a:	f7ff fdc7 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f001 fc38 	bl	80024f4 <HAL_Delay>

    // EXIT SLEEP
    ILI9341_Select();
 8000c84:	f7ff fdb6 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0x11);
 8000c88:	2011      	movs	r0, #17
 8000c8a:	f7ff fddf 	bl	800084c <ILI9341_WriteCommand>
    ILI9341_Unselect();
 8000c8e:	f7ff fdbd 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(120);
 8000c92:	2078      	movs	r0, #120	; 0x78
 8000c94:	f001 fc2e 	bl	80024f4 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_Select();
 8000c98:	f7ff fdac 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0x29);
 8000c9c:	2029      	movs	r0, #41	; 0x29
 8000c9e:	f7ff fdd5 	bl	800084c <ILI9341_WriteCommand>
    ILI9341_Unselect();
 8000ca2:	f7ff fdb3 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f001 fc24 	bl	80024f4 <HAL_Delay>

    // MADCTL
    ILI9341_Select();
 8000cac:	f7ff fda2 	bl	80007f4 <ILI9341_Select>
    ILI9341_WriteCommand(0x36);
 8000cb0:	2036      	movs	r0, #54	; 0x36
 8000cb2:	f7ff fdcb 	bl	800084c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000cb6:	2348      	movs	r3, #72	; 0x48
 8000cb8:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fdde 	bl	8000880 <ILI9341_WriteData>
    }
    ILI9341_Unselect();
 8000cc4:	f7ff fda2 	bl	800080c <ILI9341_Unselect>
    HAL_Delay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f001 fc13 	bl	80024f4 <HAL_Delay>

}
 8000cce:	bf00      	nop
 8000cd0:	376c      	adds	r7, #108	; 0x6c
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd90      	pop	{r4, r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	08009434 	.word	0x08009434
 8000cdc:	0800943c 	.word	0x0800943c
 8000ce0:	08009440 	.word	0x08009440
 8000ce4:	08009444 	.word	0x08009444
 8000ce8:	08009448 	.word	0x08009448
 8000cec:	0800944c 	.word	0x0800944c
 8000cf0:	08009450 	.word	0x08009450
 8000cf4:	08009460 	.word	0x08009460

08000cf8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
 8000d02:	460b      	mov	r3, r1
 8000d04:	80bb      	strh	r3, [r7, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	2bef      	cmp	r3, #239	; 0xef
 8000d0e:	d820      	bhi.n	8000d52 <ILI9341_DrawPixel+0x5a>
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d16:	d21c      	bcs.n	8000d52 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8000d18:	f7ff fd6c 	bl	80007f4 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	88b9      	ldrh	r1, [r7, #4]
 8000d2a:	88f8      	ldrh	r0, [r7, #6]
 8000d2c:	f7ff fdd4 	bl	80008d8 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	733b      	strb	r3, [r7, #12]
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2102      	movs	r1, #2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fd9a 	bl	8000880 <ILI9341_WriteData>

    ILI9341_Unselect();
 8000d4c:	f7ff fd5e 	bl	800080c <ILI9341_Unselect>
 8000d50:	e000      	b.n	8000d54 <ILI9341_DrawPixel+0x5c>
        return;
 8000d52:	bf00      	nop
}
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000d5a:	b590      	push	{r4, r7, lr}
 8000d5c:	b089      	sub	sp, #36	; 0x24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4604      	mov	r4, r0
 8000d62:	4608      	mov	r0, r1
 8000d64:	4611      	mov	r1, r2
 8000d66:	461a      	mov	r2, r3
 8000d68:	4623      	mov	r3, r4
 8000d6a:	80fb      	strh	r3, [r7, #6]
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	80bb      	strh	r3, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
 8000d74:	4613      	mov	r3, r2
 8000d76:	803b      	strh	r3, [r7, #0]
int32_t dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
 8000d78:	887a      	ldrh	r2, [r7, #2]
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bfb8      	it	lt
 8000d82:	425b      	neglt	r3, r3
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	887b      	ldrh	r3, [r7, #2]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d201      	bcs.n	8000d92 <ILI9341_DrawLine+0x38>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e001      	b.n	8000d96 <ILI9341_DrawLine+0x3c>
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d96:	617b      	str	r3, [r7, #20]
int32_t dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
 8000d98:	883a      	ldrh	r2, [r7, #0]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bfb8      	it	lt
 8000da2:	425b      	neglt	r3, r3
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	88ba      	ldrh	r2, [r7, #4]
 8000da8:	883b      	ldrh	r3, [r7, #0]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d201      	bcs.n	8000db2 <ILI9341_DrawLine+0x58>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e001      	b.n	8000db6 <ILI9341_DrawLine+0x5c>
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db6:	60fb      	str	r3, [r7, #12]
int32_t err = (dx>dy ? dx : -dy)/2, e2;
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dc06      	bgt.n	8000dce <ILI9341_DrawLine+0x74>
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da00      	bge.n	8000dca <ILI9341_DrawLine+0x70>
 8000dc8:	3301      	adds	r3, #1
 8000dca:	105b      	asrs	r3, r3, #1
 8000dcc:	e004      	b.n	8000dd8 <ILI9341_DrawLine+0x7e>
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	da00      	bge.n	8000dd6 <ILI9341_DrawLine+0x7c>
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	105b      	asrs	r3, r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]

	for(;;)
	{
		ILI9341_DrawPixel(x0,y0,color);
 8000dda:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000ddc:	88b9      	ldrh	r1, [r7, #4]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff89 	bl	8000cf8 <ILI9341_DrawPixel>
		if (x0==x1 && y0==y1)
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d103      	bne.n	8000df6 <ILI9341_DrawLine+0x9c>
 8000dee:	88ba      	ldrh	r2, [r7, #4]
 8000df0:	883b      	ldrh	r3, [r7, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d01d      	beq.n	8000e32 <ILI9341_DrawLine+0xd8>
			break;
		e2 = err;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	60bb      	str	r3, [r7, #8]
		if (e2 >-dx)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	425b      	negs	r3, r3
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dd08      	ble.n	8000e16 <ILI9341_DrawLine+0xbc>
		{
			err -= dy;
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	61fb      	str	r3, [r7, #28]
			x0 += sx;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	4413      	add	r3, r2
 8000e14:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy)
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	dadd      	bge.n	8000dda <ILI9341_DrawLine+0x80>
		{
			err += dx;
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	4413      	add	r3, r2
 8000e24:	61fb      	str	r3, [r7, #28]
			y0 += sy;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	80bb      	strh	r3, [r7, #4]
		ILI9341_DrawPixel(x0,y0,color);
 8000e30:	e7d3      	b.n	8000dda <ILI9341_DrawLine+0x80>
			break;
 8000e32:	bf00      	nop
		}
	}
}
 8000e34:	bf00      	nop
 8000e36:	3724      	adds	r7, #36	; 0x24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}

08000e3c <ILI9341_DrawCircle>:
void ILI9341_DrawCircle(uint16_t x0,uint16_t y0,uint16_t radius,uint16_t color)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4604      	mov	r4, r0
 8000e44:	4608      	mov	r0, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	80fb      	strh	r3, [r7, #6]
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80bb      	strh	r3, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]
 8000e56:	4613      	mov	r3, r2
 8000e58:	803b      	strh	r3, [r7, #0]
int32_t f = 1 - radius;
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	f1c3 0301 	rsb	r3, r3, #1
 8000e60:	61fb      	str	r3, [r7, #28]
int32_t ddF_x = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
int32_t ddF_y = -2 * radius;
 8000e66:	887a      	ldrh	r2, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	07db      	lsls	r3, r3, #31
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
int32_t x = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
int32_t y = radius;
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	60fb      	str	r3, [r7, #12]

	ILI9341_DrawPixel(x0,y0 + radius,color);
 8000e7a:	88ba      	ldrh	r2, [r7, #4]
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	4413      	add	r3, r2
 8000e80:	b299      	uxth	r1, r3
 8000e82:	883a      	ldrh	r2, [r7, #0]
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff36 	bl	8000cf8 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0,y0 - radius,color);
 8000e8c:	88ba      	ldrh	r2, [r7, #4]
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	b299      	uxth	r1, r3
 8000e94:	883a      	ldrh	r2, [r7, #0]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff2d 	bl	8000cf8 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 + radius,y0,color);
 8000e9e:	88fa      	ldrh	r2, [r7, #6]
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	883a      	ldrh	r2, [r7, #0]
 8000ea8:	88b9      	ldrh	r1, [r7, #4]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff24 	bl	8000cf8 <ILI9341_DrawPixel>
	ILI9341_DrawPixel(x0 - radius,y0,color);
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	883a      	ldrh	r2, [r7, #0]
 8000eba:	88b9      	ldrh	r1, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff1b 	bl	8000cf8 <ILI9341_DrawPixel>

    while(x < y)
 8000ec2:	e087      	b.n	8000fd4 <ILI9341_DrawCircle+0x198>
    {
        if(f >= 0)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db09      	blt.n	8000ede <ILI9341_DrawCircle+0xa2>
        {
            y--;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
            ddF_y += 2;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	617b      	str	r3, [r7, #20]
            f += ddF_y;
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	61fb      	str	r3, [r7, #28]
        }
        x++;
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
        ddF_x += 2;
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
        f += ddF_x + 1;
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	3301      	adds	r3, #1
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	61fb      	str	r3, [r7, #28]

        ILI9341_DrawPixel(x0 + x, y0 + y,color);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	4413      	add	r3, r2
 8000efc:	b298      	uxth	r0, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	883a      	ldrh	r2, [r7, #0]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fef4 	bl	8000cf8 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - x, y0 + y,color);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	b298      	uxth	r0, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	883a      	ldrh	r2, [r7, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	f7ff fee6 	bl	8000cf8 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 + x, y0 - y,color);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	4413      	add	r3, r2
 8000f34:	b298      	uxth	r0, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	88ba      	ldrh	r2, [r7, #4]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	f7ff fed8 	bl	8000cf8 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - x, y0 - y,color);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	88fa      	ldrh	r2, [r7, #6]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	b298      	uxth	r0, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	88ba      	ldrh	r2, [r7, #4]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	883a      	ldrh	r2, [r7, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff feca 	bl	8000cf8 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 + y, y0 + x,color);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b298      	uxth	r0, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	883a      	ldrh	r2, [r7, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff febc 	bl	8000cf8 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - y, y0 + x,color);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	88fa      	ldrh	r2, [r7, #6]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	b298      	uxth	r0, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	88bb      	ldrh	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	883a      	ldrh	r2, [r7, #0]
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff feae 	bl	8000cf8 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 + y, y0 - x,color);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b298      	uxth	r0, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	883a      	ldrh	r2, [r7, #0]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f7ff fea0 	bl	8000cf8 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - y, y0 - x,color);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	88fa      	ldrh	r2, [r7, #6]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b298      	uxth	r0, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	88ba      	ldrh	r2, [r7, #4]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	883a      	ldrh	r2, [r7, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fe92 	bl	8000cf8 <ILI9341_DrawPixel>
    while(x < y)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f6ff af73 	blt.w	8000ec4 <ILI9341_DrawCircle+0x88>
    }
}
 8000fde:	bf00      	nop
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	80bb      	strh	r3, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000ffc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001000:	b29a      	uxth	r2, r3
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	4413      	add	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	3b01      	subs	r3, #1
 800100a:	b29c      	uxth	r4, r3
 800100c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001010:	b29a      	uxth	r2, r3
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	3b01      	subs	r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	88b9      	ldrh	r1, [r7, #4]
 800101e:	88f8      	ldrh	r0, [r7, #6]
 8001020:	4622      	mov	r2, r4
 8001022:	f7ff fc59 	bl	80008d8 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e043      	b.n	80010b4 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 800102c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	3b20      	subs	r3, #32
 8001032:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001036:	fb01 f303 	mul.w	r3, r1, r3
 800103a:	4619      	mov	r1, r3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	440b      	add	r3, r1
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	e029      	b.n	80010a2 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00e      	beq.n	800107c <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800105e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	b29b      	uxth	r3, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	743b      	strb	r3, [r7, #16]
 8001068:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800106a:	b2db      	uxtb	r3, r3
 800106c:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2102      	movs	r1, #2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fc03 	bl	8000880 <ILI9341_WriteData>
 800107a:	e00f      	b.n	800109c <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800107c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	733b      	strb	r3, [r7, #12]
 8001088:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800108c:	b2db      	uxtb	r3, r3
 800108e:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fbf2 	bl	8000880 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	3301      	adds	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010a6:	461a      	mov	r2, r3
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d3cf      	bcc.n	800104e <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3301      	adds	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010b8:	461a      	mov	r2, r3
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	4293      	cmp	r3, r2
 80010be:	d3b5      	bcc.n	800102c <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 80010c0:	bf00      	nop
 80010c2:	3724      	adds	r7, #36	; 0x24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010ca:	b002      	add	sp, #8
 80010cc:	4770      	bx	lr

080010ce <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010ce:	b082      	sub	sp, #8
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	603a      	str	r2, [r7, #0]
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	460b      	mov	r3, r1
 80010e0:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80010e2:	f7ff fb87 	bl	80007f4 <ILI9341_Select>

    while(*str) {
 80010e6:	e02e      	b.n	8001146 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	7d3a      	ldrb	r2, [r7, #20]
 80010ec:	4413      	add	r3, r2
 80010ee:	2bef      	cmp	r3, #239	; 0xef
 80010f0:	dd14      	ble.n	800111c <ILI9341_WriteString+0x4e>
            x = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80010f6:	7d7b      	ldrb	r3, [r7, #21]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	7d7a      	ldrb	r2, [r7, #21]
 8001104:	4413      	add	r3, r2
 8001106:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800110a:	da21      	bge.n	8001150 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b20      	cmp	r3, #32
 8001112:	d103      	bne.n	800111c <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
                continue;
 800111a:	e014      	b.n	8001146 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	88b9      	ldrh	r1, [r7, #4]
 8001122:	88f8      	ldrh	r0, [r7, #6]
 8001124:	8c3b      	ldrh	r3, [r7, #32]
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	8bbb      	ldrh	r3, [r7, #28]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f7ff ff58 	bl	8000fe6 <ILI9341_WriteChar>
        x += font.width;
 8001136:	7d3b      	ldrb	r3, [r7, #20]
 8001138:	b29a      	uxth	r2, r3
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4413      	add	r3, r2
 800113e:	80fb      	strh	r3, [r7, #6]
        str++;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1cc      	bne.n	80010e8 <ILI9341_WriteString+0x1a>
 800114e:	e000      	b.n	8001152 <ILI9341_WriteString+0x84>
                break;
 8001150:	bf00      	nop
    }

    ILI9341_Unselect();
 8001152:	f7ff fb5b 	bl	800080c <ILI9341_Unselect>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001160:	b002      	add	sp, #8
 8001162:	4770      	bx	lr

08001164 <ILI9341_FillRectangle>:



void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	4604      	mov	r4, r0
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4623      	mov	r3, r4
 8001174:	80fb      	strh	r3, [r7, #6]
 8001176:	4603      	mov	r3, r0
 8001178:	80bb      	strh	r3, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]
 800117e:	4613      	mov	r3, r2
 8001180:	803b      	strh	r3, [r7, #0]
	uint32_t	i,fillsize,fillbufindex;
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2bef      	cmp	r3, #239	; 0xef
 8001186:	d87d      	bhi.n	8001284 <ILI9341_FillRectangle+0x120>
 8001188:	88bb      	ldrh	r3, [r7, #4]
 800118a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800118e:	d279      	bcs.n	8001284 <ILI9341_FillRectangle+0x120>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	4413      	add	r3, r2
 8001196:	3b01      	subs	r3, #1
 8001198:	2bef      	cmp	r3, #239	; 0xef
 800119a:	dd03      	ble.n	80011a4 <ILI9341_FillRectangle+0x40>
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80011a2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80011a4:	88ba      	ldrh	r2, [r7, #4]
 80011a6:	883b      	ldrh	r3, [r7, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011b0:	db03      	blt.n	80011ba <ILI9341_FillRectangle+0x56>
 80011b2:	88bb      	ldrh	r3, [r7, #4]
 80011b4:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80011b8:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80011ba:	f7ff fb1b 	bl	80007f4 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	4413      	add	r3, r2
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29c      	uxth	r4, r3
 80011ca:	88ba      	ldrh	r2, [r7, #4]
 80011cc:	883b      	ldrh	r3, [r7, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3b01      	subs	r3, #1
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	88b9      	ldrh	r1, [r7, #4]
 80011d8:	88f8      	ldrh	r0, [r7, #6]
 80011da:	4622      	mov	r2, r4
 80011dc:	f7ff fb7c 	bl	80008d8 <ILI9341_SetAddressWindow>

    //uint8_t data[] = { color >> 8, color & 0xFF };
    for(i=0;i<h*w*2;i+=2 )
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e011      	b.n	800120a <ILI9341_FillRectangle+0xa6>
    {
    	fillbuff[i] = color >> 8;
 80011e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b2d9      	uxtb	r1, r3
 80011ee:	4a27      	ldr	r2, [pc, #156]	; (800128c <ILI9341_FillRectangle+0x128>)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	460a      	mov	r2, r1
 80011f6:	701a      	strb	r2, [r3, #0]
    	fillbuff[i+1] = color & 0xFF;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80011fe:	b2d1      	uxtb	r1, r2
 8001200:	4a22      	ldr	r2, [pc, #136]	; (800128c <ILI9341_FillRectangle+0x128>)
 8001202:	54d1      	strb	r1, [r2, r3]
    for(i=0;i<h*w*2;i+=2 )
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3302      	adds	r3, #2
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	883b      	ldrh	r3, [r7, #0]
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	461a      	mov	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	4293      	cmp	r3, r2
 800121a:	d3e4      	bcc.n	80011e6 <ILI9341_FillRectangle+0x82>
    }
    fillsize = h*w*2;
 800121c:	883b      	ldrh	r3, [r7, #0]
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	613b      	str	r3, [r7, #16]
    fillbufindex = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2110      	movs	r1, #16
 8001230:	4817      	ldr	r0, [pc, #92]	; (8001290 <ILI9341_FillRectangle+0x12c>)
 8001232:	f003 fb6b 	bl	800490c <HAL_GPIO_WritePin>
    while(fillsize > TXSIZE)
 8001236:	e011      	b.n	800125c <ILI9341_FillRectangle+0xf8>
    {
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, &fillbuff[fillbufindex], TXSIZE, HAL_MAX_DELAY);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <ILI9341_FillRectangle+0x128>)
 800123c:	1899      	adds	r1, r3, r2
 800123e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <ILI9341_FillRectangle+0x130>)
 8001248:	f005 fc5a 	bl	8006b00 <HAL_SPI_Transmit>
        fillbufindex += TXSIZE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001252:	60fb      	str	r3, [r7, #12]
        fillsize -= TXSIZE;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800125a:	613b      	str	r3, [r7, #16]
    while(fillsize > TXSIZE)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001262:	d8e9      	bhi.n	8001238 <ILI9341_FillRectangle+0xd4>
    }
    if ( fillsize != 0 )
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d009      	beq.n	800127e <ILI9341_FillRectangle+0x11a>
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, &fillbuff[fillsize], fillsize, HAL_MAX_DELAY);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <ILI9341_FillRectangle+0x128>)
 800126e:	1899      	adds	r1, r3, r2
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	b29a      	uxth	r2, r3
 8001274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <ILI9341_FillRectangle+0x130>)
 800127a:	f005 fc41 	bl	8006b00 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
        }
    }
	*/
    ILI9341_Unselect();
 800127e:	f7ff fac5 	bl	800080c <ILI9341_Unselect>
 8001282:	e000      	b.n	8001286 <ILI9341_FillRectangle+0x122>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001284:	bf00      	nop
}
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	240000fc 	.word	0x240000fc
 8001290:	58020c00 	.word	0x58020c00
 8001294:	240259b4 	.word	0x240259b4

08001298 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af02      	add	r7, sp, #8
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012aa:	22f0      	movs	r2, #240	; 0xf0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ff58 	bl	8001164 <ILI9341_FillRectangle>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	4611      	mov	r1, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	80fb      	strh	r3, [r7, #6]
 80012ce:	4603      	mov	r3, r0
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	2bef      	cmp	r3, #239	; 0xef
 80012de:	d82f      	bhi.n	8001340 <ILI9341_DrawImage+0x84>
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012e6:	d22b      	bcs.n	8001340 <ILI9341_DrawImage+0x84>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	4413      	add	r3, r2
 80012ee:	3b01      	subs	r3, #1
 80012f0:	2bef      	cmp	r3, #239	; 0xef
 80012f2:	dc27      	bgt.n	8001344 <ILI9341_DrawImage+0x88>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	883b      	ldrh	r3, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001300:	da22      	bge.n	8001348 <ILI9341_DrawImage+0x8c>

    ILI9341_Select();
 8001302:	f7ff fa77 	bl	80007f4 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001306:	88fa      	ldrh	r2, [r7, #6]
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	b29c      	uxth	r4, r3
 8001312:	88ba      	ldrh	r2, [r7, #4]
 8001314:	883b      	ldrh	r3, [r7, #0]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	3b01      	subs	r3, #1
 800131c:	b29b      	uxth	r3, r3
 800131e:	88b9      	ldrh	r1, [r7, #4]
 8001320:	88f8      	ldrh	r0, [r7, #6]
 8001322:	4622      	mov	r2, r4
 8001324:	f7ff fad8 	bl	80008d8 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	883a      	ldrh	r2, [r7, #0]
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4619      	mov	r1, r3
 8001334:	69b8      	ldr	r0, [r7, #24]
 8001336:	f7ff faa3 	bl	8000880 <ILI9341_WriteData>
    ILI9341_Unselect();
 800133a:	f7ff fa67 	bl	800080c <ILI9341_Unselect>
 800133e:	e004      	b.n	800134a <ILI9341_DrawImage+0x8e>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001340:	bf00      	nop
 8001342:	e002      	b.n	800134a <ILI9341_DrawImage+0x8e>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8001344:	bf00      	nop
 8001346:	e000      	b.n	800134a <ILI9341_DrawImage+0x8e>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8001348:	bf00      	nop
}
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}

08001350 <LoadBackgroundImage>:
	}
}
extern	uint8_t GIMP_IMAGE_pixel_data[240 * 320 * 2 + 1];

void LoadBackgroundImage(uint16_t background_index)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
uint32_t	i,sector,number_of_sectors;
uint8_t	*buf_ptr = 	GIMP_IMAGE_pixel_data;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <LoadBackgroundImage+0x68>)
 800135c:	613b      	str	r3, [r7, #16]
	sector = background_index+BACKGROUND1_SECTOR;
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	3310      	adds	r3, #16
 8001362:	60fb      	str	r3, [r7, #12]
	number_of_sectors = (ILI9341_WIDTH*ILI9341_HEIGHT*2)/SECTOR_SIZE;
 8001364:	2325      	movs	r3, #37	; 0x25
 8001366:	60bb      	str	r3, [r7, #8]
	for(i=0;i<number_of_sectors;i++)
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e013      	b.n	8001396 <LoadBackgroundImage+0x46>
	{
		flash_ReadBytes(buf_ptr,flash_SectorToAddress(i+sector),SECTOR_SIZE);
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8db 	bl	8000530 <flash_SectorToAddress>
 800137a:	4603      	mov	r3, r0
 800137c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001380:	4619      	mov	r1, r3
 8001382:	6938      	ldr	r0, [r7, #16]
 8001384:	f7ff f942 	bl	800060c <flash_ReadBytes>
		buf_ptr += SECTOR_SIZE;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138e:	613b      	str	r3, [r7, #16]
	for(i=0;i<number_of_sectors;i++)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3e7      	bcc.n	800136e <LoadBackgroundImage+0x1e>
	}
	ILI9341_DrawImage(0, 0, ILI9341_WIDTH-1, ILI9341_HEIGHT-1, (uint16_t *) GIMP_IMAGE_pixel_data);
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <LoadBackgroundImage+0x68>)
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	f240 133f 	movw	r3, #319	; 0x13f
 80013a6:	22ef      	movs	r2, #239	; 0xef
 80013a8:	2100      	movs	r1, #0
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff ff86 	bl	80012bc <ILI9341_DrawImage>
}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	08009490 	.word	0x08009490

080013bc <ILI9341_draw_calibrate>:
uint32_t 	raw_calibration_touch_x[5], raw_calibration_touch_y[5];
uint32_t 	calibration_touch_x, calibration_touch_y;
//uint32_t	x_minimum,x_correction,y_minimum,y_correction;

static void ILI9341_draw_calibrate(uint16_t step,uint16_t color)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	4613      	mov	r3, r2
 80013ca:	80bb      	strh	r3, [r7, #4]
	switch ( step)
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d831      	bhi.n	8001436 <ILI9341_draw_calibrate+0x7a>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <ILI9341_draw_calibrate+0x1c>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013ed 	.word	0x080013ed
 80013dc:	080013fb 	.word	0x080013fb
 80013e0:	08001409 	.word	0x08001409
 80013e4:	08001419 	.word	0x08001419
 80013e8:	08001429 	.word	0x08001429
	{
	case 0 : ILI9341_DrawCircle(TOUCH_OFFSET_X_Y,TOUCH_OFFSET_X_Y,TOUCH_CIRCLE_RADIUS,color); break;
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	2205      	movs	r2, #5
 80013f0:	210f      	movs	r1, #15
 80013f2:	200f      	movs	r0, #15
 80013f4:	f7ff fd22 	bl	8000e3c <ILI9341_DrawCircle>
 80013f8:	e01d      	b.n	8001436 <ILI9341_draw_calibrate+0x7a>
	case 1 : ILI9341_DrawCircle(ILI9341_WIDTH-1-TOUCH_OFFSET_X_Y,TOUCH_OFFSET_X_Y,TOUCH_CIRCLE_RADIUS,color);break;
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	2205      	movs	r2, #5
 80013fe:	210f      	movs	r1, #15
 8001400:	20e0      	movs	r0, #224	; 0xe0
 8001402:	f7ff fd1b 	bl	8000e3c <ILI9341_DrawCircle>
 8001406:	e016      	b.n	8001436 <ILI9341_draw_calibrate+0x7a>
	case 2 : ILI9341_DrawCircle(ILI9341_WIDTH-1-TOUCH_OFFSET_X_Y,ILI9341_HEIGHT-1-TOUCH_OFFSET_X_Y,TOUCH_CIRCLE_RADIUS,color);break;
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	2205      	movs	r2, #5
 800140c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001410:	20e0      	movs	r0, #224	; 0xe0
 8001412:	f7ff fd13 	bl	8000e3c <ILI9341_DrawCircle>
 8001416:	e00e      	b.n	8001436 <ILI9341_draw_calibrate+0x7a>
	case 3 : ILI9341_DrawCircle(TOUCH_OFFSET_X_Y,ILI9341_HEIGHT-1-TOUCH_OFFSET_X_Y,TOUCH_CIRCLE_RADIUS,color);break;
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	2205      	movs	r2, #5
 800141c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001420:	200f      	movs	r0, #15
 8001422:	f7ff fd0b 	bl	8000e3c <ILI9341_DrawCircle>
 8001426:	e006      	b.n	8001436 <ILI9341_draw_calibrate+0x7a>
	case 4 : ILI9341_DrawCircle(ILI9341_WIDTH/2,ILI9341_HEIGHT/2,TOUCH_CIRCLE_RADIUS,color);break;
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	2205      	movs	r2, #5
 800142c:	21a0      	movs	r1, #160	; 0xa0
 800142e:	2078      	movs	r0, #120	; 0x78
 8001430:	f7ff fd04 	bl	8000e3c <ILI9341_DrawCircle>
 8001434:	bf00      	nop
 	}
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop

08001440 <ILI9341_calibrate_touch>:

void ILI9341_calibrate_touch(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b090      	sub	sp, #64	; 0x40
 8001444:	af04      	add	r7, sp, #16
uint16_t	i;
uint32_t	xmin,ymin,xmax,ymax;
char		calibration_string[CALIBRATION_STRING_LEN];

	ILI9341_FillScreen(ILI9341_BLACK);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ff26 	bl	8001298 <ILI9341_FillScreen>
	ILI9341_DrawLine(1,1,ILI9341_WIDTH-2,1,ILI9341_RED);
 800144c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	22ee      	movs	r2, #238	; 0xee
 8001456:	2101      	movs	r1, #1
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff fc7e 	bl	8000d5a <ILI9341_DrawLine>
	ILI9341_DrawLine(1,ILI9341_HEIGHT-2,ILI9341_WIDTH-2,ILI9341_HEIGHT-2,ILI9341_RED);
 800145e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001468:	22ee      	movs	r2, #238	; 0xee
 800146a:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fc73 	bl	8000d5a <ILI9341_DrawLine>
	ILI9341_DrawLine(1,1,1,ILI9341_HEIGHT-2,ILI9341_RED);
 8001474:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800147e:	2201      	movs	r2, #1
 8001480:	2101      	movs	r1, #1
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff fc69 	bl	8000d5a <ILI9341_DrawLine>
	ILI9341_DrawLine(ILI9341_WIDTH-2,1,ILI9341_WIDTH-2,ILI9341_HEIGHT-2,ILI9341_RED);
 8001488:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001492:	22ee      	movs	r2, #238	; 0xee
 8001494:	2101      	movs	r1, #1
 8001496:	20ee      	movs	r0, #238	; 0xee
 8001498:	f7ff fc5f 	bl	8000d5a <ILI9341_DrawLine>

	for(i=0;i<5;i++)
 800149c:	2300      	movs	r3, #0
 800149e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80014a0:	e052      	b.n	8001548 <ILI9341_calibrate_touch+0x108>
	{
		ILI9341_draw_calibrate(i,ILI9341_WHITE);
 80014a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff87 	bl	80013bc <ILI9341_draw_calibrate>
		while ( touch_flag == 0 );
 80014ae:	bf00      	nop
 80014b0:	4b46      	ldr	r3, [pc, #280]	; (80015cc <ILI9341_calibrate_touch+0x18c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0fb      	beq.n	80014b0 <ILI9341_calibrate_touch+0x70>
		ILI9341_draw_calibrate(i,ILI9341_BLUE);
 80014b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014ba:	211f      	movs	r1, #31
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff7d 	bl	80013bc <ILI9341_draw_calibrate>
		if ( ILI9341_TouchGetCoordinates(&raw_calibration_touch_x[i],&raw_calibration_touch_y[i]) != 0 )
 80014c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4a42      	ldr	r2, [pc, #264]	; (80015d0 <ILI9341_calibrate_touch+0x190>)
 80014c8:	1898      	adds	r0, r3, r2
 80014ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4a41      	ldr	r2, [pc, #260]	; (80015d4 <ILI9341_calibrate_touch+0x194>)
 80014d0:	4413      	add	r3, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f000 f8be 	bl	8001654 <ILI9341_TouchGetCoordinates>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d028      	beq.n	8001530 <ILI9341_calibrate_touch+0xf0>
		{
			sprintf(calibration_string,"X : %d , y : %d",(int )raw_calibration_touch_x[i],(int )raw_calibration_touch_y[i]);
 80014de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014e0:	4a3b      	ldr	r2, [pc, #236]	; (80015d0 <ILI9341_calibrate_touch+0x190>)
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	4619      	mov	r1, r3
 80014e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014ea:	4a3a      	ldr	r2, [pc, #232]	; (80015d4 <ILI9341_calibrate_touch+0x194>)
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	1d38      	adds	r0, r7, #4
 80014f2:	460a      	mov	r2, r1
 80014f4:	4938      	ldr	r1, [pc, #224]	; (80015d8 <ILI9341_calibrate_touch+0x198>)
 80014f6:	f007 fb65 	bl	8008bc4 <siprintf>
			ILI9341_WriteString(CALIBRATION_STRING_XPOS, CALIBRATION_STRING_YPOS, calibration_string, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <ILI9341_calibrate_touch+0x19c>)
 80014fc:	1d39      	adds	r1, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	9202      	str	r2, [sp, #8]
 8001502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001506:	9201      	str	r2, [sp, #4]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	9200      	str	r2, [sp, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	460a      	mov	r2, r1
 8001510:	211e      	movs	r1, #30
 8001512:	201e      	movs	r0, #30
 8001514:	f7ff fddb 	bl	80010ce <ILI9341_WriteString>
			HAL_Delay(1000);
 8001518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151c:	f000 ffea 	bl	80024f4 <HAL_Delay>
			ILI9341_FillRectangle(CALIBRATION_STRING_XPOS, CALIBRATION_STRING_YPOS, CALIBRATION_STRING_LEN*7, 10, ILI9341_BLACK);
 8001520:	2300      	movs	r3, #0
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	230a      	movs	r3, #10
 8001526:	22a8      	movs	r2, #168	; 0xa8
 8001528:	211e      	movs	r1, #30
 800152a:	201e      	movs	r0, #30
 800152c:	f7ff fe1a 	bl	8001164 <ILI9341_FillRectangle>
		}
		touch_flag = 0;
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <ILI9341_calibrate_touch+0x18c>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
		ILI9341_draw_calibrate(i,ILI9341_GREEN);
 8001536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001538:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff3d 	bl	80013bc <ILI9341_draw_calibrate>
	for(i=0;i<5;i++)
 8001542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001544:	3301      	adds	r3, #1
 8001546:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001548:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800154a:	2b04      	cmp	r3, #4
 800154c:	d9a9      	bls.n	80014a2 <ILI9341_calibrate_touch+0x62>
	}
	ILI9341_FillScreen(ILI9341_BLACK);
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fea2 	bl	8001298 <ILI9341_FillScreen>

	xmin = (raw_calibration_touch_x[0] + raw_calibration_touch_x[3]) / 2;
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <ILI9341_calibrate_touch+0x190>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <ILI9341_calibrate_touch+0x190>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4413      	add	r3, r2
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
	ymax = (raw_calibration_touch_y[0] + raw_calibration_touch_y[1]) / 2;
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <ILI9341_calibrate_touch+0x194>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <ILI9341_calibrate_touch+0x194>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4413      	add	r3, r2
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
	xmax = (raw_calibration_touch_x[1] + raw_calibration_touch_x[2]) / 2;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <ILI9341_calibrate_touch+0x190>)
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <ILI9341_calibrate_touch+0x190>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4413      	add	r3, r2
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	623b      	str	r3, [r7, #32]
	ymin = (raw_calibration_touch_y[2] + raw_calibration_touch_y[3]) / 2;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <ILI9341_calibrate_touch+0x194>)
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <ILI9341_calibrate_touch+0x194>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4413      	add	r3, r2
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
	SystemParameters.touch_x_minimum = xmin;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <ILI9341_calibrate_touch+0x1a0>)
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	6293      	str	r3, [r2, #40]	; 0x28
	SystemParameters.touch_y_minimum = ymin;
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <ILI9341_calibrate_touch+0x1a0>)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	62d3      	str	r3, [r2, #44]	; 0x2c
	SystemParameters.touch_x_correction = (xmax - xmin) / ILI9341_WIDTH;
 8001598:	6a3a      	ldr	r2, [r7, #32]
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <ILI9341_calibrate_touch+0x1a4>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	09db      	lsrs	r3, r3, #7
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <ILI9341_calibrate_touch+0x1a0>)
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
	SystemParameters.touch_y_correction = (ymax - ymin) / ILI9341_HEIGHT;
 80015aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <ILI9341_calibrate_touch+0x1a8>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <ILI9341_calibrate_touch+0x1a0>)
 80015ba:	6353      	str	r3, [r2, #52]	; 0x34
	SystemParameters.touch_is_calibrated = 1;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <ILI9341_calibrate_touch+0x1a0>)
 80015be:	2201      	movs	r2, #1
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80015c2:	bf00      	nop
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	240000ac 	.word	0x240000ac
 80015d0:	24025914 	.word	0x24025914
 80015d4:	240258fc 	.word	0x240258fc
 80015d8:	08009470 	.word	0x08009470
 80015dc:	24000000 	.word	0x24000000
 80015e0:	240000c4 	.word	0x240000c4
 80015e4:	88888889 	.word	0x88888889
 80015e8:	cccccccd 	.word	0xcccccccd

080015ec <ILI9341_TouchCallback>:
#define READ_Y 0x90

uint32_t	touch_flag = 0;

void ILI9341_TouchCallback(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	touch_flag = 1;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <ILI9341_TouchCallback+0x14>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	240000ac 	.word	0x240000ac

08001604 <ILI9341_TouchSelect>:

static void ILI9341_TouchSelect(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160e:	4802      	ldr	r0, [pc, #8]	; (8001618 <ILI9341_TouchSelect+0x14>)
 8001610:	f003 f97c 	bl	800490c <HAL_GPIO_WritePin>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	58021000 	.word	0x58021000

0800161c <ILI9341_TouchUnselect>:

void ILI9341_TouchUnselect(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001626:	4802      	ldr	r0, [pc, #8]	; (8001630 <ILI9341_TouchUnselect+0x14>)
 8001628:	f003 f970 	bl	800490c <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	58021000 	.word	0x58021000

08001634 <ILI9341_TouchPressed>:

uint32_t ILI9341_TouchPressed(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ILI9341_TOUCH_IRQ_GPIO_Port, ILI9341_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
 8001638:	2101      	movs	r1, #1
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <ILI9341_TouchPressed+0x1c>)
 800163c:	f003 f94e 	bl	80048dc <HAL_GPIO_ReadPin>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf0c      	ite	eq
 8001646:	2301      	moveq	r3, #1
 8001648:	2300      	movne	r3, #0
 800164a:	b2db      	uxtb	r3, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	58020400 	.word	0x58020400

08001654 <ILI9341_TouchGetCoordinates>:

uint32_t ILI9341_TouchGetCoordinates(uint32_t* raw_x, uint32_t* raw_y)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };
    uint32_t	mbr , touch_mbr;

    /* set prescaler to 128 */
    mbr = hspi1.Instance->CFG1;
 800165e:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <ILI9341_TouchGetCoordinates+0xf4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	61bb      	str	r3, [r7, #24]
    touch_mbr = mbr & 0x8fffffff;
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800166c:	617b      	str	r3, [r7, #20]
    touch_mbr |= 0xe0000000;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8001674:	617b      	str	r3, [r7, #20]
    hspi1.Instance->CFG1 = touch_mbr;
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <ILI9341_TouchGetCoordinates+0xf4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	609a      	str	r2, [r3, #8]

    ILI9341_TouchSelect();
 800167e:	f7ff ffc1 	bl	8001604 <ILI9341_TouchSelect>

    uint32_t avg_x = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 16; i++) {
 800168e:	2300      	movs	r3, #0
 8001690:	77bb      	strb	r3, [r7, #30]
 8001692:	e03c      	b.n	800170e <ILI9341_TouchGetCoordinates+0xba>
        if(!ILI9341_TouchPressed())
 8001694:	f7ff ffce 	bl	8001634 <ILI9341_TouchPressed>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d03b      	beq.n	8001716 <ILI9341_TouchGetCoordinates+0xc2>
            break;

        nsamples++;
 800169e:	7ffb      	ldrb	r3, [r7, #31]
 80016a0:	3301      	adds	r3, #1
 80016a2:	77fb      	strb	r3, [r7, #31]

        HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a8:	2201      	movs	r2, #1
 80016aa:	4928      	ldr	r1, [pc, #160]	; (800174c <ILI9341_TouchGetCoordinates+0xf8>)
 80016ac:	4826      	ldr	r0, [pc, #152]	; (8001748 <ILI9341_TouchGetCoordinates+0xf4>)
 80016ae:	f005 fa27 	bl	8006b00 <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 80016b2:	f107 0210 	add.w	r2, r7, #16
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2302      	movs	r3, #2
 80016be:	4924      	ldr	r1, [pc, #144]	; (8001750 <ILI9341_TouchGetCoordinates+0xfc>)
 80016c0:	4821      	ldr	r0, [pc, #132]	; (8001748 <ILI9341_TouchGetCoordinates+0xf4>)
 80016c2:	f005 fe01 	bl	80072c8 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ca:	2201      	movs	r2, #1
 80016cc:	4921      	ldr	r1, [pc, #132]	; (8001754 <ILI9341_TouchGetCoordinates+0x100>)
 80016ce:	481e      	ldr	r0, [pc, #120]	; (8001748 <ILI9341_TouchGetCoordinates+0xf4>)
 80016d0:	f005 fa16 	bl	8006b00 <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 80016d4:	f107 020c 	add.w	r2, r7, #12
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	491b      	ldr	r1, [pc, #108]	; (8001750 <ILI9341_TouchGetCoordinates+0xfc>)
 80016e2:	4819      	ldr	r0, [pc, #100]	; (8001748 <ILI9341_TouchGetCoordinates+0xf4>)
 80016e4:	f005 fdf0 	bl	80072c8 <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 80016e8:	7b3b      	ldrb	r3, [r7, #12]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	7b7a      	ldrb	r2, [r7, #13]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	4413      	add	r3, r2
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 80016f8:	7c3b      	ldrb	r3, [r7, #16]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	7c7a      	ldrb	r2, [r7, #17]
 80016fe:	4313      	orrs	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	4413      	add	r3, r2
 8001706:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++) {
 8001708:	7fbb      	ldrb	r3, [r7, #30]
 800170a:	3301      	adds	r3, #1
 800170c:	77bb      	strb	r3, [r7, #30]
 800170e:	7fbb      	ldrb	r3, [r7, #30]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d9bf      	bls.n	8001694 <ILI9341_TouchGetCoordinates+0x40>
 8001714:	e000      	b.n	8001718 <ILI9341_TouchGetCoordinates+0xc4>
            break;
 8001716:	bf00      	nop
    }

    ILI9341_TouchUnselect();
 8001718:	f7ff ff80 	bl	800161c <ILI9341_TouchUnselect>
    hspi1.Instance->CFG1 = mbr;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <ILI9341_TouchGetCoordinates+0xf4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	609a      	str	r2, [r3, #8]

    if(nsamples < 16)
 8001724:	7ffb      	ldrb	r3, [r7, #31]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	d801      	bhi.n	800172e <ILI9341_TouchGetCoordinates+0xda>
        return 0;
 800172a:	2300      	movs	r3, #0
 800172c:	e008      	b.n	8001740 <ILI9341_TouchGetCoordinates+0xec>

    *raw_x = (avg_x / 16);
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	091a      	lsrs	r2, r3, #4
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	601a      	str	r2, [r3, #0]
    *raw_y = (avg_y / 16);
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	091a      	lsrs	r2, r3, #4
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	601a      	str	r2, [r3, #0]

    return 1;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	240259b4 	.word	0x240259b4
 800174c:	0800f8a8 	.word	0x0800f8a8
 8001750:	0800f8ac 	.word	0x0800f8ac
 8001754:	0800f8b0 	.word	0x0800f8b0

08001758 <ILI9341_GetTouch>:

uint32_t ILI9341_GetTouch(uint32_t* raw_x, uint32_t* raw_y)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
uint32_t ret_val;
	ret_val = ILI9341_TouchGetCoordinates(raw_x, raw_y);
 8001762:	6839      	ldr	r1, [r7, #0]
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff75 	bl	8001654 <ILI9341_TouchGetCoordinates>
 800176a:	60f8      	str	r0, [r7, #12]
	if ( *raw_x < SystemParameters.touch_x_minimum )
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <ILI9341_GetTouch+0x84>)
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	429a      	cmp	r2, r3
 8001776:	d203      	bcs.n	8001780 <ILI9341_GetTouch+0x28>
		*raw_x = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e006      	b.n	800178e <ILI9341_GetTouch+0x36>
	else
		*raw_x -= SystemParameters.touch_x_minimum;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <ILI9341_GetTouch+0x84>)
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	1ad2      	subs	r2, r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
	*raw_x /= SystemParameters.touch_x_correction;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <ILI9341_GetTouch+0x84>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	fbb2 f2f3 	udiv	r2, r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	601a      	str	r2, [r3, #0]
	if ( *raw_y < SystemParameters.touch_y_minimum )
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <ILI9341_GetTouch+0x84>)
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d203      	bcs.n	80017b2 <ILI9341_GetTouch+0x5a>
		*raw_y = 0;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e006      	b.n	80017c0 <ILI9341_GetTouch+0x68>
	else
		*raw_y -= SystemParameters.touch_y_minimum;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <ILI9341_GetTouch+0x84>)
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	1ad2      	subs	r2, r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	601a      	str	r2, [r3, #0]
	*raw_y /= SystemParameters.touch_y_correction;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <ILI9341_GetTouch+0x84>)
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	601a      	str	r2, [r3, #0]
	return ret_val;
 80017d0:	68fb      	ldr	r3, [r7, #12]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	240000c4 	.word	0x240000c4

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e6:	f000 fdf3 	bl	80023d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ea:	f000 f88f 	bl	800190c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ee:	f000 fa9f 	bl	8001d30 <MX_GPIO_Init>
  MX_DMA_Init();
 80017f2:	f000 fa7d 	bl	8001cf0 <MX_DMA_Init>
  MX_TIM2_Init();
 80017f6:	f000 fa15 	bl	8001c24 <MX_TIM2_Init>
  MX_SPI1_Init();
 80017fa:	f000 f967 	bl	8001acc <MX_SPI1_Init>
  MX_SPI6_Init();
 80017fe:	f000 f9bb 	bl	8001b78 <MX_SPI6_Init>
  /* USER CODE BEGIN 2 */
  Init_SintMate();
 8001802:	f7fe fde1 	bl	80003c8 <Init_SintMate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( touch_flag == 1 )
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <main+0x118>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d1fb      	bne.n	8001806 <main+0x26>
	  		{
	  			if ( ILI9341_GetTouch(&SystemVar.touch_x,&SystemVar.touch_y) != 0 )
 800180e:	493b      	ldr	r1, [pc, #236]	; (80018fc <main+0x11c>)
 8001810:	483b      	ldr	r0, [pc, #236]	; (8001900 <main+0x120>)
 8001812:	f7ff ffa1 	bl	8001758 <ILI9341_GetTouch>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d068      	beq.n	80018ee <main+0x10e>
	  			{
	  				switch ( fillcolor )
 800181c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800181e:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8001822:	d01d      	beq.n	8001860 <main+0x80>
 8001824:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8001828:	dc09      	bgt.n	800183e <main+0x5e>
 800182a:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800182e:	d01b      	beq.n	8001868 <main+0x88>
 8001830:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001834:	4293      	cmp	r3, r2
 8001836:	d01b      	beq.n	8001870 <main+0x90>
 8001838:	2b1f      	cmp	r3, #31
 800183a:	d00d      	beq.n	8001858 <main+0x78>
 800183c:	e027      	b.n	800188e <main+0xae>
 800183e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001842:	4293      	cmp	r3, r2
 8001844:	d01c      	beq.n	8001880 <main+0xa0>
 8001846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184a:	4293      	cmp	r3, r2
 800184c:	d01c      	beq.n	8001888 <main+0xa8>
 800184e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001852:	4293      	cmp	r3, r2
 8001854:	d010      	beq.n	8001878 <main+0x98>
 8001856:	e01a      	b.n	800188e <main+0xae>
	  				{
	  				case	ILI9341_BLUE    :	fillcolor = ILI9341_RED; break;
 8001858:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800185c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800185e:	e019      	b.n	8001894 <main+0xb4>
	  				case	ILI9341_RED    	:	fillcolor = ILI9341_GREEN; break;
 8001860:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001864:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001866:	e015      	b.n	8001894 <main+0xb4>
	  				case	ILI9341_GREEN   :	fillcolor = ILI9341_CYAN; break;
 8001868:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800186c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800186e:	e011      	b.n	8001894 <main+0xb4>
	  				case	ILI9341_CYAN    :	fillcolor = ILI9341_MAGENTA; break;
 8001870:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001874:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001876:	e00d      	b.n	8001894 <main+0xb4>
	  				case	ILI9341_MAGENTA :	fillcolor = ILI9341_YELLOW; break;
 8001878:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800187c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800187e:	e009      	b.n	8001894 <main+0xb4>
	  				case	ILI9341_YELLOW  :	fillcolor = ILI9341_WHITE; break;
 8001880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001884:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001886:	e005      	b.n	8001894 <main+0xb4>
	  				case	ILI9341_WHITE   :	fillcolor = ILI9341_BLUE; break;
 8001888:	231f      	movs	r3, #31
 800188a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800188c:	e002      	b.n	8001894 <main+0xb4>
	  				default				    :	fillcolor = ILI9341_BLUE; break;
 800188e:	231f      	movs	r3, #31
 8001890:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001892:	bf00      	nop
	  				}
	  				ILI9341_FillScreen(fillcolor);
 8001894:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fcfe 	bl	8001298 <ILI9341_FillScreen>
	  				sprintf(lcdstring,"X : %d , y : %d",(int )(SystemVar.touch_x),(int )(SystemVar.touch_y));
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <main+0x120>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <main+0x120>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	1d38      	adds	r0, r7, #4
 80018a8:	4916      	ldr	r1, [pc, #88]	; (8001904 <main+0x124>)
 80018aa:	f007 f98b 	bl	8008bc4 <siprintf>
	  				ILI9341_FillRectangle(0, 0, strlen(lcdstring)*7, 10, ILI9341_BLACK);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fd15 	bl	80002e0 <strlen>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	2300      	movs	r3, #0
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	230a      	movs	r3, #10
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fc4a 	bl	8001164 <ILI9341_FillRectangle>
	  				ILI9341_WriteString(0, 0, lcdstring, Font_7x10, ILI9341_RED, ILI9341_BLACK);
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <main+0x128>)
 80018d2:	1d39      	adds	r1, r7, #4
 80018d4:	2200      	movs	r2, #0
 80018d6:	9202      	str	r2, [sp, #8]
 80018d8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	9200      	str	r2, [sp, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	460a      	mov	r2, r1
 80018e6:	2100      	movs	r1, #0
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff fbf0 	bl	80010ce <ILI9341_WriteString>

	  			}
	  			touch_flag = 0;
 80018ee:	4b02      	ldr	r3, [pc, #8]	; (80018f8 <main+0x118>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
	  if ( touch_flag == 1 )
 80018f4:	e787      	b.n	8001806 <main+0x26>
 80018f6:	bf00      	nop
 80018f8:	240000ac 	.word	0x240000ac
 80018fc:	240000c0 	.word	0x240000c0
 8001900:	240000bc 	.word	0x240000bc
 8001904:	08009480 	.word	0x08009480
 8001908:	24000000 	.word	0x24000000

0800190c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0cc      	sub	sp, #304	; 0x130
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001916:	224c      	movs	r2, #76	; 0x4c
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f007 f94a 	bl	8008bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001924:	2220      	movs	r2, #32
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f007 f943 	bl	8008bb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	4618      	mov	r0, r3
 8001934:	23bc      	movs	r3, #188	; 0xbc
 8001936:	461a      	mov	r2, r3
 8001938:	2100      	movs	r1, #0
 800193a:	f007 f93b 	bl	8008bb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800193e:	2002      	movs	r0, #2
 8001940:	f003 f822 	bl	8004988 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <SystemClock_Config+0x1b4>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <SystemClock_Config+0x1b4>)
 8001950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001954:	6193      	str	r3, [r2, #24]
 8001956:	4b5a      	ldr	r3, [pc, #360]	; (8001ac0 <SystemClock_Config+0x1b4>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <SystemClock_Config+0x1b8>)
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <SystemClock_Config+0x1b8>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800196e:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <SystemClock_Config+0x1b8>)
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f003 0201 	and.w	r2, r3, #1
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800197e:	bf00      	nop
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <SystemClock_Config+0x1b4>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198c:	d1f8      	bne.n	8001980 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800198e:	4b4e      	ldr	r3, [pc, #312]	; (8001ac8 <SystemClock_Config+0x1bc>)
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	4a4c      	ldr	r2, [pc, #304]	; (8001ac8 <SystemClock_Config+0x1bc>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800199e:	2301      	movs	r3, #1
 80019a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ac:	2302      	movs	r3, #2
 80019ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 80;
 80019be:	2350      	movs	r3, #80	; 0x50
 80019c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80019d6:	230c      	movs	r3, #12
 80019d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 f805 	bl	80049fc <HAL_RCC_OscConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80019f8:	f000 fa62 	bl	8001ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fc:	233f      	movs	r3, #63	; 0x3f
 80019fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a02:	2303      	movs	r3, #3
 8001a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a14:	2340      	movs	r3, #64	; 0x40
 8001a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a1a:	2340      	movs	r3, #64	; 0x40
 8001a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a28:	2340      	movs	r3, #64	; 0x40
 8001a2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a32:	2104      	movs	r1, #4
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fbf1 	bl	800521c <HAL_RCC_ClockConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8001a40:	f000 fa3e 	bl	8001ec0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI6;
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8001a4c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 12;
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	220c      	movs	r2, #12
 8001a54:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 200;
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	22c8      	movs	r2, #200	; 0xc8
 8001a5c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	2202      	movs	r2, #2
 8001a64:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	2202      	movs	r2, #2
 8001a74:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a96:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fee0 	bl	800586c <HAL_RCCEx_PeriphCLKConfig>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <SystemClock_Config+0x1aa>
  {
    Error_Handler();
 8001ab2:	f000 fa05 	bl	8001ec0 <Error_Handler>
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	58024800 	.word	0x58024800
 8001ac4:	58000400 	.word	0x58000400
 8001ac8:	58024400 	.word	0x58024400

08001acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001ad2:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <MX_SPI1_Init+0xa8>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001ad8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001af8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_SPI1_Init+0xa4>)
 8001b5e:	f004 fed7 	bl	8006910 <HAL_SPI_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001b68:	f000 f9aa 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	240259b4 	.word	0x240259b4
 8001b74:	40013000 	.word	0x40013000

08001b78 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001b7e:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <MX_SPI6_Init+0xa8>)
 8001b80:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001b84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b88:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001b92:	2207      	movs	r2, #7
 8001b94:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001ba4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ba8:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bac:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001bb0:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <MX_SPI6_Init+0xa4>)
 8001c0a:	f004 fe81 	bl	8006910 <HAL_SPI_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 8001c14:	f000 f954 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2402592c 	.word	0x2402592c
 8001c20:	58001400 	.word	0x58001400

08001c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c36:	463b      	mov	r3, r7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240;
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001c52:	22f0      	movs	r2, #240	; 0xf0
 8001c54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c70:	481e      	ldr	r0, [pc, #120]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001c72:	f006 f922 	bl	8007eba <HAL_TIM_PWM_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001c7c:	f000 f920 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4817      	ldr	r0, [pc, #92]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001c90:	f006 feda 	bl	8008a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001c9a:	f000 f911 	bl	8001ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c9e:	2360      	movs	r3, #96	; 0x60
 8001ca0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001ca2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ca6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480d      	ldr	r0, [pc, #52]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001cb8:	f006 fa28 	bl	800810c <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001cc2:	f000 f8fd 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2204      	movs	r2, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4807      	ldr	r0, [pc, #28]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001cce:	f006 fa1d 	bl	800810c <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001cd8:	f000 f8f2 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cdc:	4803      	ldr	r0, [pc, #12]	; (8001cec <MX_TIM2_Init+0xc8>)
 8001cde:	f000 fa0b 	bl	80020f8 <HAL_TIM_MspPostInit>

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	24025a3c 	.word	0x24025a3c

08001cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <MX_DMA_Init+0x3c>)
 8001cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <MX_DMA_Init+0x3c>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_DMA_Init+0x3c>)
 8001d08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	200b      	movs	r0, #11
 8001d1a:	f000 fcf4 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d1e:	200b      	movs	r0, #11
 8001d20:	f000 fd0b 	bl	800273a <HAL_NVIC_EnableIRQ>

}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	58024400 	.word	0x58024400

08001d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d46:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	4a56      	ldr	r2, [pc, #344]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d56:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b50      	ldr	r3, [pc, #320]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6a:	4a4f      	ldr	r2, [pc, #316]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d74:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d92:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da6:	4a40      	ldr	r2, [pc, #256]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001da8:	f043 0310 	orr.w	r3, r3, #16
 8001dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db0:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a38      	ldr	r2, [pc, #224]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001dc6:	f043 0308 	orr.w	r3, r3, #8
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <MX_GPIO_Init+0x178>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_SS_GPIO_Port, FLASH_SS_Pin, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2110      	movs	r1, #16
 8001de0:	4832      	ldr	r0, [pc, #200]	; (8001eac <MX_GPIO_Init+0x17c>)
 8001de2:	f002 fd93 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dec:	4830      	ldr	r0, [pc, #192]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001dee:	f002 fd8d 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RST_Pin|DC_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2118      	movs	r1, #24
 8001df6:	482f      	ldr	r0, [pc, #188]	; (8001eb4 <MX_GPIO_Init+0x184>)
 8001df8:	f002 fd88 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2140      	movs	r1, #64	; 0x40
 8001e00:	482c      	ldr	r0, [pc, #176]	; (8001eb4 <MX_GPIO_Init+0x184>)
 8001e02:	f002 fd83 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLASH_SS_Pin */
  GPIO_InitStruct.Pin = FLASH_SS_Pin;
 8001e06:	2310      	movs	r3, #16
 8001e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_SS_GPIO_Port, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4823      	ldr	r0, [pc, #140]	; (8001eac <MX_GPIO_Init+0x17c>)
 8001e1e:	f002 fbad 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8001e22:	2301      	movs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <MX_GPIO_Init+0x188>)
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4821      	ldr	r0, [pc, #132]	; (8001ebc <MX_GPIO_Init+0x18c>)
 8001e36:	f002 fba1 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4817      	ldr	r0, [pc, #92]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001e54:	f002 fb92 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <MX_GPIO_Init+0x184>)
 8001e70:	f002 fb84 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin CS_Pin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 8001e74:	2350      	movs	r3, #80	; 0x50
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e80:	2302      	movs	r3, #2
 8001e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480a      	ldr	r0, [pc, #40]	; (8001eb4 <MX_GPIO_Init+0x184>)
 8001e8c:	f002 fb76 	bl	800457c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2006      	movs	r0, #6
 8001e96:	f000 fc36 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e9a:	2006      	movs	r0, #6
 8001e9c:	f000 fc4d 	bl	800273a <HAL_NVIC_EnableIRQ>

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	58020000 	.word	0x58020000
 8001eb0:	58021000 	.word	0x58021000
 8001eb4:	58020c00 	.word	0x58020c00
 8001eb8:	11310000 	.word	0x11310000
 8001ebc:	58020400 	.word	0x58020400

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <Error_Handler+0x6>

08001ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_MspInit+0x30>)
 8001ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_MspInit+0x30>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_MspInit+0x30>)
 8001ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	58024400 	.word	0x58024400

08001efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5f      	ldr	r2, [pc, #380]	; (8002098 <HAL_SPI_MspInit+0x19c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	f040 8084 	bne.w	8002028 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f20:	4b5e      	ldr	r3, [pc, #376]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8001f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f26:	4a5d      	ldr	r2, [pc, #372]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8001f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f30:	4b5a      	ldr	r3, [pc, #360]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8001f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3e:	4b57      	ldr	r3, [pc, #348]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f44:	4a55      	ldr	r2, [pc, #340]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4e:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8001f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f62:	4a4e      	ldr	r2, [pc, #312]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8001f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4842      	ldr	r0, [pc, #264]	; (80020a0 <HAL_SPI_MspInit+0x1a4>)
 8001f96:	f002 faf1 	bl	800457c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_MOSI_Pin;
 8001f9a:	2318      	movs	r3, #24
 8001f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001faa:	2305      	movs	r3, #5
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	483b      	ldr	r0, [pc, #236]	; (80020a4 <HAL_SPI_MspInit+0x1a8>)
 8001fb6:	f002 fae1 	bl	800457c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001fbc:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <HAL_SPI_MspInit+0x1b0>)
 8001fbe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001fc0:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001fc2:	2226      	movs	r2, #38	; 0x26
 8001fc4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc6:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001fc8:	2240      	movs	r2, #64	; 0x40
 8001fca:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd2:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fda:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe0:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001fee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ff2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ffa:	482b      	ldr	r0, [pc, #172]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8001ffc:	f000 fbb8 	bl	8002770 <HAL_DMA_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8002006:	f7ff ff5b 	bl	8001ec0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 800200e:	679a      	str	r2, [r3, #120]	; 0x78
 8002010:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_SPI_MspInit+0x1ac>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2023      	movs	r0, #35	; 0x23
 800201c:	f000 fb73 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002020:	2023      	movs	r0, #35	; 0x23
 8002022:	f000 fb8a 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8002026:	e032      	b.n	800208e <HAL_SPI_MspInit+0x192>
  else if(hspi->Instance==SPI6)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <HAL_SPI_MspInit+0x1b4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12d      	bne.n	800208e <HAL_SPI_MspInit+0x192>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8002034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8002044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a11      	ldr	r2, [pc, #68]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_SPI_MspInit+0x1a0>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800206e:	23e0      	movs	r3, #224	; 0xe0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 800207e:	2308      	movs	r3, #8
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	480a      	ldr	r0, [pc, #40]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 800208a:	f002 fa77 	bl	800457c <HAL_GPIO_Init>
}
 800208e:	bf00      	nop
 8002090:	3730      	adds	r7, #48	; 0x30
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40013000 	.word	0x40013000
 800209c:	58024400 	.word	0x58024400
 80020a0:	58020c00 	.word	0x58020c00
 80020a4:	58020400 	.word	0x58020400
 80020a8:	24025a88 	.word	0x24025a88
 80020ac:	40020010 	.word	0x40020010
 80020b0:	58001400 	.word	0x58001400
 80020b4:	58020000 	.word	0x58020000

080020b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80020cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d0:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80020dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	58024400 	.word	0x58024400

080020f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d11e      	bne.n	8002158 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002138:	2303      	movs	r3, #3
 800213a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002148:	2301      	movs	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	4619      	mov	r1, r3
 8002152:	4804      	ldr	r0, [pc, #16]	; (8002164 <HAL_TIM_MspPostInit+0x6c>)
 8002154:	f002 fa12 	bl	800457c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	58024400 	.word	0x58024400
 8002164:	58020000 	.word	0x58020000

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 f97e 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f002 fbbc 	bl	800493e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  ILI9341_TouchCallback();
 80021c6:	f7ff fa11 	bl	80015ec <ILI9341_TouchCallback>

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <DMA1_Stream0_IRQHandler+0x10>)
 80021d6:	f001 f86b 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	24025a88 	.word	0x24025a88

080021e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <SPI1_IRQHandler+0x10>)
 80021ea:	f005 fb59 	bl	80078a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	240259b4 	.word	0x240259b4

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f006 fc9a 	bl	8008b60 <__errno>
 800222c:	4602      	mov	r2, r0
 800222e:	230c      	movs	r3, #12
 8002230:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	24080000 	.word	0x24080000
 8002258:	00000400 	.word	0x00000400
 800225c:	240000b0 	.word	0x240000b0
 8002260:	24025b08 	.word	0x24025b08

08002264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002268:	4b39      	ldr	r3, [pc, #228]	; (8002350 <SystemInit+0xec>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a38      	ldr	r2, [pc, #224]	; (8002350 <SystemInit+0xec>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <SystemInit+0xf0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	2b06      	cmp	r3, #6
 8002282:	d807      	bhi.n	8002294 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002284:	4b33      	ldr	r3, [pc, #204]	; (8002354 <SystemInit+0xf0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 030f 	bic.w	r3, r3, #15
 800228c:	4a31      	ldr	r2, [pc, #196]	; (8002354 <SystemInit+0xf0>)
 800228e:	f043 0307 	orr.w	r3, r3, #7
 8002292:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <SystemInit+0xf4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <SystemInit+0xf4>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <SystemInit+0xf4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <SystemInit+0xf4>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	492b      	ldr	r1, [pc, #172]	; (8002358 <SystemInit+0xf4>)
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <SystemInit+0xf8>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022b2:	4b28      	ldr	r3, [pc, #160]	; (8002354 <SystemInit+0xf0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d907      	bls.n	80022ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <SystemInit+0xf0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 030f 	bic.w	r3, r3, #15
 80022c6:	4a23      	ldr	r2, [pc, #140]	; (8002354 <SystemInit+0xf0>)
 80022c8:	f043 0307 	orr.w	r3, r3, #7
 80022cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <SystemInit+0xf4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022d4:	4b20      	ldr	r3, [pc, #128]	; (8002358 <SystemInit+0xf4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <SystemInit+0xf4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <SystemInit+0xf4>)
 80022e2:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <SystemInit+0xfc>)
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <SystemInit+0xf4>)
 80022e8:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <SystemInit+0x100>)
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <SystemInit+0xf4>)
 80022ee:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <SystemInit+0x104>)
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <SystemInit+0xf4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <SystemInit+0xf4>)
 80022fa:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <SystemInit+0x104>)
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <SystemInit+0xf4>)
 8002300:	2200      	movs	r2, #0
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <SystemInit+0xf4>)
 8002306:	4a18      	ldr	r2, [pc, #96]	; (8002368 <SystemInit+0x104>)
 8002308:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <SystemInit+0xf4>)
 800230c:	2200      	movs	r2, #0
 800230e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <SystemInit+0xf4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a10      	ldr	r2, [pc, #64]	; (8002358 <SystemInit+0xf4>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <SystemInit+0xf4>)
 800231e:	2200      	movs	r2, #0
 8002320:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <SystemInit+0x108>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <SystemInit+0x10c>)
 8002328:	4013      	ands	r3, r2
 800232a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800232e:	d202      	bcs.n	8002336 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <SystemInit+0x110>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <SystemInit+0x114>)
 8002338:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800233c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <SystemInit+0xec>)
 8002340:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002344:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	52002000 	.word	0x52002000
 8002358:	58024400 	.word	0x58024400
 800235c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002360:	02020200 	.word	0x02020200
 8002364:	01ff0000 	.word	0x01ff0000
 8002368:	01010280 	.word	0x01010280
 800236c:	5c001000 	.word	0x5c001000
 8002370:	ffff0000 	.word	0xffff0000
 8002374:	51008108 	.word	0x51008108
 8002378:	52004000 	.word	0x52004000

0800237c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002380:	f7ff ff70 	bl	8002264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002386:	e003      	b.n	8002390 <LoopCopyDataInit>

08002388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800238a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800238c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800238e:	3104      	adds	r1, #4

08002390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002390:	480a      	ldr	r0, [pc, #40]	; (80023bc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002398:	d3f6      	bcc.n	8002388 <CopyDataInit>
  ldr  r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800239c:	e002      	b.n	80023a4 <LoopFillZerobss>

0800239e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800239e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023a0:	f842 3b04 	str.w	r3, [r2], #4

080023a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80023a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023a8:	d3f9      	bcc.n	800239e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023aa:	f006 fbdf 	bl	8008b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ae:	f7ff fa17 	bl	80017e0 <main>
  bx  lr    
 80023b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80023b8:	0800f908 	.word	0x0800f908
  ldr  r0, =_sdata
 80023bc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80023c0:	2400008c 	.word	0x2400008c
  ldr  r2, =_sbss
 80023c4:	2400008c 	.word	0x2400008c
  ldr  r3, = _ebss
 80023c8:	24025b08 	.word	0x24025b08

080023cc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC3_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d6:	2003      	movs	r0, #3
 80023d8:	f000 f98a 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023dc:	f003 f8d4 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 80023e0:	4601      	mov	r1, r0
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_Init+0x68>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_Init+0x6c>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
 80023f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_Init+0x68>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_Init+0x6c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <HAL_Init+0x70>)
 8002412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <HAL_Init+0x74>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800241a:	2000      	movs	r0, #0
 800241c:	f000 f814 	bl	8002448 <HAL_InitTick>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e002      	b.n	8002430 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800242a:	f7ff fd4d 	bl	8001ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	58024400 	.word	0x58024400
 800243c:	0800f8b4 	.word	0x0800f8b4
 8002440:	2400001c 	.word	0x2400001c
 8002444:	24000018 	.word	0x24000018

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_InitTick+0x60>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e021      	b.n	80024a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_InitTick+0x64>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_InitTick+0x60>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f96f 	bl	8002756 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002490:	f000 f939 	bl	8002706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_InitTick+0x68>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	24000024 	.word	0x24000024
 80024ac:	24000018 	.word	0x24000018
 80024b0:	24000020 	.word	0x24000020

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	24000024 	.word	0x24000024
 80024d8:	24025b00 	.word	0x24025b00

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	24025b00 	.word	0x24025b00

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_Delay+0x40>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	24000024 	.word	0x24000024

08002538 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_GetREVID+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0c1b      	lsrs	r3, r3, #16
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	5c001000 	.word	0x5c001000

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <__NVIC_SetPriorityGrouping+0x40>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 800257a:	4313      	orrs	r3, r2
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x40>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00
 8002594:	05fa0000 	.word	0x05fa0000

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	; (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002714:	f7ff ff40 	bl	8002598 <__NVIC_GetPriorityGrouping>
 8002718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7ff ff90 	bl	8002644 <NVIC_EncodePriority>
 8002724:	4602      	mov	r2, r0
 8002726:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff5f 	bl	80025f0 <__NVIC_SetPriority>
}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff33 	bl	80025b4 <__NVIC_EnableIRQ>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffa4 	bl	80026ac <SysTick_Config>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff feb0 	bl	80024dc <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e316      	b.n	8002db6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a66      	ldr	r2, [pc, #408]	; (8002928 <HAL_DMA_Init+0x1b8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d04a      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a65      	ldr	r2, [pc, #404]	; (800292c <HAL_DMA_Init+0x1bc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d045      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a63      	ldr	r2, [pc, #396]	; (8002930 <HAL_DMA_Init+0x1c0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d040      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a62      	ldr	r2, [pc, #392]	; (8002934 <HAL_DMA_Init+0x1c4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d03b      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a60      	ldr	r2, [pc, #384]	; (8002938 <HAL_DMA_Init+0x1c8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d036      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5f      	ldr	r2, [pc, #380]	; (800293c <HAL_DMA_Init+0x1cc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d031      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a5d      	ldr	r2, [pc, #372]	; (8002940 <HAL_DMA_Init+0x1d0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02c      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <HAL_DMA_Init+0x1d4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d027      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <HAL_DMA_Init+0x1d8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d022      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a59      	ldr	r2, [pc, #356]	; (800294c <HAL_DMA_Init+0x1dc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d01d      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a57      	ldr	r2, [pc, #348]	; (8002950 <HAL_DMA_Init+0x1e0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d018      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a56      	ldr	r2, [pc, #344]	; (8002954 <HAL_DMA_Init+0x1e4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d013      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a54      	ldr	r2, [pc, #336]	; (8002958 <HAL_DMA_Init+0x1e8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00e      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a53      	ldr	r2, [pc, #332]	; (800295c <HAL_DMA_Init+0x1ec>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a51      	ldr	r2, [pc, #324]	; (8002960 <HAL_DMA_Init+0x1f0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_DMA_Init+0xb8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a50      	ldr	r2, [pc, #320]	; (8002964 <HAL_DMA_Init+0x1f4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_DMA_Init+0xbc>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_DMA_Init+0xbe>
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 813b 	beq.w	8002aaa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a37      	ldr	r2, [pc, #220]	; (8002928 <HAL_DMA_Init+0x1b8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d04a      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a36      	ldr	r2, [pc, #216]	; (800292c <HAL_DMA_Init+0x1bc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d045      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a34      	ldr	r2, [pc, #208]	; (8002930 <HAL_DMA_Init+0x1c0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d040      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a33      	ldr	r2, [pc, #204]	; (8002934 <HAL_DMA_Init+0x1c4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d03b      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a31      	ldr	r2, [pc, #196]	; (8002938 <HAL_DMA_Init+0x1c8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d036      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_DMA_Init+0x1cc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d031      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <HAL_DMA_Init+0x1d0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d02c      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <HAL_DMA_Init+0x1d4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d027      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2b      	ldr	r2, [pc, #172]	; (8002948 <HAL_DMA_Init+0x1d8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d022      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2a      	ldr	r2, [pc, #168]	; (800294c <HAL_DMA_Init+0x1dc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d01d      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a28      	ldr	r2, [pc, #160]	; (8002950 <HAL_DMA_Init+0x1e0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d018      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_DMA_Init+0x1e4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d013      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a25      	ldr	r2, [pc, #148]	; (8002958 <HAL_DMA_Init+0x1e8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00e      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a24      	ldr	r2, [pc, #144]	; (800295c <HAL_DMA_Init+0x1ec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <HAL_DMA_Init+0x1f0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_DMA_Init+0x174>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a21      	ldr	r2, [pc, #132]	; (8002964 <HAL_DMA_Init+0x1f4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <HAL_DMA_Init+0x186>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e007      	b.n	8002906 <HAL_DMA_Init+0x196>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002906:	e02f      	b.n	8002968 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002908:	f7ff fde8 	bl	80024dc <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b05      	cmp	r3, #5
 8002914:	d928      	bls.n	8002968 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2203      	movs	r2, #3
 8002920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e246      	b.n	8002db6 <HAL_DMA_Init+0x646>
 8002928:	40020010 	.word	0x40020010
 800292c:	40020028 	.word	0x40020028
 8002930:	40020040 	.word	0x40020040
 8002934:	40020058 	.word	0x40020058
 8002938:	40020070 	.word	0x40020070
 800293c:	40020088 	.word	0x40020088
 8002940:	400200a0 	.word	0x400200a0
 8002944:	400200b8 	.word	0x400200b8
 8002948:	40020410 	.word	0x40020410
 800294c:	40020428 	.word	0x40020428
 8002950:	40020440 	.word	0x40020440
 8002954:	40020458 	.word	0x40020458
 8002958:	40020470 	.word	0x40020470
 800295c:	40020488 	.word	0x40020488
 8002960:	400204a0 	.word	0x400204a0
 8002964:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1c8      	bne.n	8002908 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4b83      	ldr	r3, [pc, #524]	; (8002b90 <HAL_DMA_Init+0x420>)
 8002982:	4013      	ands	r3, r2
 8002984:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800298e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d107      	bne.n	80029cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	4313      	orrs	r3, r2
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80029cc:	4b71      	ldr	r3, [pc, #452]	; (8002b94 <HAL_DMA_Init+0x424>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b71      	ldr	r3, [pc, #452]	; (8002b98 <HAL_DMA_Init+0x428>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d8:	d328      	bcc.n	8002a2c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b28      	cmp	r3, #40	; 0x28
 80029e0:	d903      	bls.n	80029ea <HAL_DMA_Init+0x27a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b2e      	cmp	r3, #46	; 0x2e
 80029e8:	d917      	bls.n	8002a1a <HAL_DMA_Init+0x2aa>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b3e      	cmp	r3, #62	; 0x3e
 80029f0:	d903      	bls.n	80029fa <HAL_DMA_Init+0x28a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b42      	cmp	r3, #66	; 0x42
 80029f8:	d90f      	bls.n	8002a1a <HAL_DMA_Init+0x2aa>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b46      	cmp	r3, #70	; 0x46
 8002a00:	d903      	bls.n	8002a0a <HAL_DMA_Init+0x29a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b48      	cmp	r3, #72	; 0x48
 8002a08:	d907      	bls.n	8002a1a <HAL_DMA_Init+0x2aa>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b4e      	cmp	r3, #78	; 0x4e
 8002a10:	d905      	bls.n	8002a1e <HAL_DMA_Init+0x2ae>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b52      	cmp	r3, #82	; 0x52
 8002a18:	d801      	bhi.n	8002a1e <HAL_DMA_Init+0x2ae>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_DMA_Init+0x2b0>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a2a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0307 	bic.w	r3, r3, #7
 8002a42:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d117      	bne.n	8002a86 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f001 fbfd 	bl	8004268 <DMA_CheckFifoParam>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2240      	movs	r2, #64	; 0x40
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e197      	b.n	8002db6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f001 fb38 	bl	8004104 <DMA_CalcBaseAndBitshift>
 8002a94:	4603      	mov	r3, r0
 8002a96:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	223f      	movs	r2, #63	; 0x3f
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	e0cd      	b.n	8002c46 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3b      	ldr	r2, [pc, #236]	; (8002b9c <HAL_DMA_Init+0x42c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d022      	beq.n	8002afa <HAL_DMA_Init+0x38a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a39      	ldr	r2, [pc, #228]	; (8002ba0 <HAL_DMA_Init+0x430>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01d      	beq.n	8002afa <HAL_DMA_Init+0x38a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a38      	ldr	r2, [pc, #224]	; (8002ba4 <HAL_DMA_Init+0x434>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d018      	beq.n	8002afa <HAL_DMA_Init+0x38a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a36      	ldr	r2, [pc, #216]	; (8002ba8 <HAL_DMA_Init+0x438>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_DMA_Init+0x38a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a35      	ldr	r2, [pc, #212]	; (8002bac <HAL_DMA_Init+0x43c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00e      	beq.n	8002afa <HAL_DMA_Init+0x38a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a33      	ldr	r2, [pc, #204]	; (8002bb0 <HAL_DMA_Init+0x440>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d009      	beq.n	8002afa <HAL_DMA_Init+0x38a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a32      	ldr	r2, [pc, #200]	; (8002bb4 <HAL_DMA_Init+0x444>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d004      	beq.n	8002afa <HAL_DMA_Init+0x38a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <HAL_DMA_Init+0x448>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_DMA_Init+0x38e>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_DMA_Init+0x390>
 8002afe:	2300      	movs	r3, #0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8097 	beq.w	8002c34 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <HAL_DMA_Init+0x42c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d021      	beq.n	8002b54 <HAL_DMA_Init+0x3e4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_DMA_Init+0x430>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01c      	beq.n	8002b54 <HAL_DMA_Init+0x3e4>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <HAL_DMA_Init+0x434>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d017      	beq.n	8002b54 <HAL_DMA_Init+0x3e4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <HAL_DMA_Init+0x438>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d012      	beq.n	8002b54 <HAL_DMA_Init+0x3e4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <HAL_DMA_Init+0x43c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00d      	beq.n	8002b54 <HAL_DMA_Init+0x3e4>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <HAL_DMA_Init+0x440>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d008      	beq.n	8002b54 <HAL_DMA_Init+0x3e4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <HAL_DMA_Init+0x444>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d003      	beq.n	8002b54 <HAL_DMA_Init+0x3e4>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <HAL_DMA_Init+0x448>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_DMA_Init+0x44c>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d020      	beq.n	8002bc0 <HAL_DMA_Init+0x450>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b80      	cmp	r3, #128	; 0x80
 8002b84:	d102      	bne.n	8002b8c <HAL_DMA_Init+0x41c>
 8002b86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b8a:	e01a      	b.n	8002bc2 <HAL_DMA_Init+0x452>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e018      	b.n	8002bc2 <HAL_DMA_Init+0x452>
 8002b90:	fe10803f 	.word	0xfe10803f
 8002b94:	5c001000 	.word	0x5c001000
 8002b98:	ffff0000 	.word	0xffff0000
 8002b9c:	58025408 	.word	0x58025408
 8002ba0:	5802541c 	.word	0x5802541c
 8002ba4:	58025430 	.word	0x58025430
 8002ba8:	58025444 	.word	0x58025444
 8002bac:	58025458 	.word	0x58025458
 8002bb0:	5802546c 	.word	0x5802546c
 8002bb4:	58025480 	.word	0x58025480
 8002bb8:	58025494 	.word	0x58025494
 8002bbc:	fffe000f 	.word	0xfffe000f
 8002bc0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002be0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002be8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bf0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b6e      	ldr	r3, [pc, #440]	; (8002dc0 <HAL_DMA_Init+0x650>)
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a6e      	ldr	r2, [pc, #440]	; (8002dc4 <HAL_DMA_Init+0x654>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	009a      	lsls	r2, r3, #2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f001 fa73 	bl	8004104 <DMA_CalcBaseAndBitshift>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	e008      	b.n	8002c46 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2240      	movs	r2, #64	; 0x40
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0b7      	b.n	8002db6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a5f      	ldr	r2, [pc, #380]	; (8002dc8 <HAL_DMA_Init+0x658>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d072      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a5d      	ldr	r2, [pc, #372]	; (8002dcc <HAL_DMA_Init+0x65c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d06d      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a5c      	ldr	r2, [pc, #368]	; (8002dd0 <HAL_DMA_Init+0x660>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d068      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a5a      	ldr	r2, [pc, #360]	; (8002dd4 <HAL_DMA_Init+0x664>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d063      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a59      	ldr	r2, [pc, #356]	; (8002dd8 <HAL_DMA_Init+0x668>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d05e      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a57      	ldr	r2, [pc, #348]	; (8002ddc <HAL_DMA_Init+0x66c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d059      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a56      	ldr	r2, [pc, #344]	; (8002de0 <HAL_DMA_Init+0x670>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d054      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <HAL_DMA_Init+0x674>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d04f      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <HAL_DMA_Init+0x678>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d04a      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a51      	ldr	r2, [pc, #324]	; (8002dec <HAL_DMA_Init+0x67c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d045      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a50      	ldr	r2, [pc, #320]	; (8002df0 <HAL_DMA_Init+0x680>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d040      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <HAL_DMA_Init+0x684>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d03b      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4d      	ldr	r2, [pc, #308]	; (8002df8 <HAL_DMA_Init+0x688>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d036      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	; (8002dfc <HAL_DMA_Init+0x68c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d031      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_DMA_Init+0x690>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d02c      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_DMA_Init+0x694>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d027      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a47      	ldr	r2, [pc, #284]	; (8002e08 <HAL_DMA_Init+0x698>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d022      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a45      	ldr	r2, [pc, #276]	; (8002e0c <HAL_DMA_Init+0x69c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01d      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a44      	ldr	r2, [pc, #272]	; (8002e10 <HAL_DMA_Init+0x6a0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d018      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a42      	ldr	r2, [pc, #264]	; (8002e14 <HAL_DMA_Init+0x6a4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a41      	ldr	r2, [pc, #260]	; (8002e18 <HAL_DMA_Init+0x6a8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00e      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a3f      	ldr	r2, [pc, #252]	; (8002e1c <HAL_DMA_Init+0x6ac>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d009      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a3e      	ldr	r2, [pc, #248]	; (8002e20 <HAL_DMA_Init+0x6b0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_DMA_Init+0x5c6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3c      	ldr	r2, [pc, #240]	; (8002e24 <HAL_DMA_Init+0x6b4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_DMA_Init+0x5ca>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_DMA_Init+0x5cc>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d032      	beq.n	8002da6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f001 fb0d 	bl	8004360 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d102      	bne.n	8002d54 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d010      	beq.n	8002d94 <HAL_DMA_Init+0x624>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d80c      	bhi.n	8002d94 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f001 fb8a 	bl	8004494 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	e008      	b.n	8002da6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	a7fdabf8 	.word	0xa7fdabf8
 8002dc4:	cccccccd 	.word	0xcccccccd
 8002dc8:	40020010 	.word	0x40020010
 8002dcc:	40020028 	.word	0x40020028
 8002dd0:	40020040 	.word	0x40020040
 8002dd4:	40020058 	.word	0x40020058
 8002dd8:	40020070 	.word	0x40020070
 8002ddc:	40020088 	.word	0x40020088
 8002de0:	400200a0 	.word	0x400200a0
 8002de4:	400200b8 	.word	0x400200b8
 8002de8:	40020410 	.word	0x40020410
 8002dec:	40020428 	.word	0x40020428
 8002df0:	40020440 	.word	0x40020440
 8002df4:	40020458 	.word	0x40020458
 8002df8:	40020470 	.word	0x40020470
 8002dfc:	40020488 	.word	0x40020488
 8002e00:	400204a0 	.word	0x400204a0
 8002e04:	400204b8 	.word	0x400204b8
 8002e08:	58025408 	.word	0x58025408
 8002e0c:	5802541c 	.word	0x5802541c
 8002e10:	58025430 	.word	0x58025430
 8002e14:	58025444 	.word	0x58025444
 8002e18:	58025458 	.word	0x58025458
 8002e1c:	5802546c 	.word	0x5802546c
 8002e20:	58025480 	.word	0x58025480
 8002e24:	58025494 	.word	0x58025494

08002e28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e205      	b.n	8003246 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d004      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e1fa      	b.n	8003246 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a8c      	ldr	r2, [pc, #560]	; (8003088 <HAL_DMA_Abort_IT+0x260>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d04a      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a8b      	ldr	r2, [pc, #556]	; (800308c <HAL_DMA_Abort_IT+0x264>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d045      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a89      	ldr	r2, [pc, #548]	; (8003090 <HAL_DMA_Abort_IT+0x268>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d040      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a88      	ldr	r2, [pc, #544]	; (8003094 <HAL_DMA_Abort_IT+0x26c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d03b      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a86      	ldr	r2, [pc, #536]	; (8003098 <HAL_DMA_Abort_IT+0x270>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d036      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a85      	ldr	r2, [pc, #532]	; (800309c <HAL_DMA_Abort_IT+0x274>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d031      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a83      	ldr	r2, [pc, #524]	; (80030a0 <HAL_DMA_Abort_IT+0x278>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02c      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a82      	ldr	r2, [pc, #520]	; (80030a4 <HAL_DMA_Abort_IT+0x27c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d027      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a80      	ldr	r2, [pc, #512]	; (80030a8 <HAL_DMA_Abort_IT+0x280>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d022      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7f      	ldr	r2, [pc, #508]	; (80030ac <HAL_DMA_Abort_IT+0x284>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d01d      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a7d      	ldr	r2, [pc, #500]	; (80030b0 <HAL_DMA_Abort_IT+0x288>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7c      	ldr	r2, [pc, #496]	; (80030b4 <HAL_DMA_Abort_IT+0x28c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a7a      	ldr	r2, [pc, #488]	; (80030b8 <HAL_DMA_Abort_IT+0x290>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a79      	ldr	r2, [pc, #484]	; (80030bc <HAL_DMA_Abort_IT+0x294>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a77      	ldr	r2, [pc, #476]	; (80030c0 <HAL_DMA_Abort_IT+0x298>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0xc8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a76      	ldr	r2, [pc, #472]	; (80030c4 <HAL_DMA_Abort_IT+0x29c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_DMA_Abort_IT+0xcc>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_DMA_Abort_IT+0xce>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d065      	beq.n	8002fc6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2204      	movs	r2, #4
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a60      	ldr	r2, [pc, #384]	; (8003088 <HAL_DMA_Abort_IT+0x260>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d04a      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a5e      	ldr	r2, [pc, #376]	; (800308c <HAL_DMA_Abort_IT+0x264>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d045      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a5d      	ldr	r2, [pc, #372]	; (8003090 <HAL_DMA_Abort_IT+0x268>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d040      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a5b      	ldr	r2, [pc, #364]	; (8003094 <HAL_DMA_Abort_IT+0x26c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d03b      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a5a      	ldr	r2, [pc, #360]	; (8003098 <HAL_DMA_Abort_IT+0x270>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d036      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_DMA_Abort_IT+0x274>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d031      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_DMA_Abort_IT+0x278>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d02c      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a55      	ldr	r2, [pc, #340]	; (80030a4 <HAL_DMA_Abort_IT+0x27c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d027      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a54      	ldr	r2, [pc, #336]	; (80030a8 <HAL_DMA_Abort_IT+0x280>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a52      	ldr	r2, [pc, #328]	; (80030ac <HAL_DMA_Abort_IT+0x284>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01d      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a51      	ldr	r2, [pc, #324]	; (80030b0 <HAL_DMA_Abort_IT+0x288>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a4f      	ldr	r2, [pc, #316]	; (80030b4 <HAL_DMA_Abort_IT+0x28c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_DMA_Abort_IT+0x290>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a4c      	ldr	r2, [pc, #304]	; (80030bc <HAL_DMA_Abort_IT+0x294>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <HAL_DMA_Abort_IT+0x298>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x17a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a49      	ldr	r2, [pc, #292]	; (80030c4 <HAL_DMA_Abort_IT+0x29c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d108      	bne.n	8002fb4 <HAL_DMA_Abort_IT+0x18c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e147      	b.n	8003244 <HAL_DMA_Abort_IT+0x41c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e13e      	b.n	8003244 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 020e 	bic.w	r2, r2, #14
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <HAL_DMA_Abort_IT+0x260>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d04a      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a29      	ldr	r2, [pc, #164]	; (800308c <HAL_DMA_Abort_IT+0x264>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d045      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a28      	ldr	r2, [pc, #160]	; (8003090 <HAL_DMA_Abort_IT+0x268>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d040      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a26      	ldr	r2, [pc, #152]	; (8003094 <HAL_DMA_Abort_IT+0x26c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d03b      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a25      	ldr	r2, [pc, #148]	; (8003098 <HAL_DMA_Abort_IT+0x270>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d036      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a23      	ldr	r2, [pc, #140]	; (800309c <HAL_DMA_Abort_IT+0x274>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d031      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <HAL_DMA_Abort_IT+0x278>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d02c      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <HAL_DMA_Abort_IT+0x27c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d027      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <HAL_DMA_Abort_IT+0x280>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_DMA_Abort_IT+0x284>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_DMA_Abort_IT+0x288>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d018      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1a      	ldr	r2, [pc, #104]	; (80030b4 <HAL_DMA_Abort_IT+0x28c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_DMA_Abort_IT+0x290>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_DMA_Abort_IT+0x294>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_DMA_Abort_IT+0x298>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_DMA_Abort_IT+0x24e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <HAL_DMA_Abort_IT+0x29c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d128      	bne.n	80030c8 <HAL_DMA_Abort_IT+0x2a0>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e027      	b.n	80030d8 <HAL_DMA_Abort_IT+0x2b0>
 8003088:	40020010 	.word	0x40020010
 800308c:	40020028 	.word	0x40020028
 8003090:	40020040 	.word	0x40020040
 8003094:	40020058 	.word	0x40020058
 8003098:	40020070 	.word	0x40020070
 800309c:	40020088 	.word	0x40020088
 80030a0:	400200a0 	.word	0x400200a0
 80030a4:	400200b8 	.word	0x400200b8
 80030a8:	40020410 	.word	0x40020410
 80030ac:	40020428 	.word	0x40020428
 80030b0:	40020440 	.word	0x40020440
 80030b4:	40020458 	.word	0x40020458
 80030b8:	40020470 	.word	0x40020470
 80030bc:	40020488 	.word	0x40020488
 80030c0:	400204a0 	.word	0x400204a0
 80030c4:	400204b8 	.word	0x400204b8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a5c      	ldr	r2, [pc, #368]	; (8003250 <HAL_DMA_Abort_IT+0x428>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d072      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a5b      	ldr	r2, [pc, #364]	; (8003254 <HAL_DMA_Abort_IT+0x42c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d06d      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a59      	ldr	r2, [pc, #356]	; (8003258 <HAL_DMA_Abort_IT+0x430>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d068      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_DMA_Abort_IT+0x434>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d063      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a56      	ldr	r2, [pc, #344]	; (8003260 <HAL_DMA_Abort_IT+0x438>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d05e      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a55      	ldr	r2, [pc, #340]	; (8003264 <HAL_DMA_Abort_IT+0x43c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d059      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a53      	ldr	r2, [pc, #332]	; (8003268 <HAL_DMA_Abort_IT+0x440>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d054      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_DMA_Abort_IT+0x444>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d04f      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a50      	ldr	r2, [pc, #320]	; (8003270 <HAL_DMA_Abort_IT+0x448>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d04a      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a4f      	ldr	r2, [pc, #316]	; (8003274 <HAL_DMA_Abort_IT+0x44c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d045      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a4d      	ldr	r2, [pc, #308]	; (8003278 <HAL_DMA_Abort_IT+0x450>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d040      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4c      	ldr	r2, [pc, #304]	; (800327c <HAL_DMA_Abort_IT+0x454>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d03b      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4a      	ldr	r2, [pc, #296]	; (8003280 <HAL_DMA_Abort_IT+0x458>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d036      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a49      	ldr	r2, [pc, #292]	; (8003284 <HAL_DMA_Abort_IT+0x45c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d031      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a47      	ldr	r2, [pc, #284]	; (8003288 <HAL_DMA_Abort_IT+0x460>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d02c      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a46      	ldr	r2, [pc, #280]	; (800328c <HAL_DMA_Abort_IT+0x464>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d027      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a44      	ldr	r2, [pc, #272]	; (8003290 <HAL_DMA_Abort_IT+0x468>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d022      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a43      	ldr	r2, [pc, #268]	; (8003294 <HAL_DMA_Abort_IT+0x46c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d01d      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a41      	ldr	r2, [pc, #260]	; (8003298 <HAL_DMA_Abort_IT+0x470>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d018      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a40      	ldr	r2, [pc, #256]	; (800329c <HAL_DMA_Abort_IT+0x474>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3e      	ldr	r2, [pc, #248]	; (80032a0 <HAL_DMA_Abort_IT+0x478>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00e      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3d      	ldr	r2, [pc, #244]	; (80032a4 <HAL_DMA_Abort_IT+0x47c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d009      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3b      	ldr	r2, [pc, #236]	; (80032a8 <HAL_DMA_Abort_IT+0x480>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x3a0>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3a      	ldr	r2, [pc, #232]	; (80032ac <HAL_DMA_Abort_IT+0x484>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_DMA_Abort_IT+0x3a4>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_DMA_Abort_IT+0x3a6>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d028      	beq.n	8003224 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2201      	movs	r2, #1
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003200:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00c      	beq.n	8003224 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003218:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003222:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40020010 	.word	0x40020010
 8003254:	40020028 	.word	0x40020028
 8003258:	40020040 	.word	0x40020040
 800325c:	40020058 	.word	0x40020058
 8003260:	40020070 	.word	0x40020070
 8003264:	40020088 	.word	0x40020088
 8003268:	400200a0 	.word	0x400200a0
 800326c:	400200b8 	.word	0x400200b8
 8003270:	40020410 	.word	0x40020410
 8003274:	40020428 	.word	0x40020428
 8003278:	40020440 	.word	0x40020440
 800327c:	40020458 	.word	0x40020458
 8003280:	40020470 	.word	0x40020470
 8003284:	40020488 	.word	0x40020488
 8003288:	400204a0 	.word	0x400204a0
 800328c:	400204b8 	.word	0x400204b8
 8003290:	58025408 	.word	0x58025408
 8003294:	5802541c 	.word	0x5802541c
 8003298:	58025430 	.word	0x58025430
 800329c:	58025444 	.word	0x58025444
 80032a0:	58025458 	.word	0x58025458
 80032a4:	5802546c 	.word	0x5802546c
 80032a8:	58025480 	.word	0x58025480
 80032ac:	58025494 	.word	0x58025494

080032b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032bc:	4b67      	ldr	r3, [pc, #412]	; (800345c <HAL_DMA_IRQHandler+0x1ac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a67      	ldr	r2, [pc, #412]	; (8003460 <HAL_DMA_IRQHandler+0x1b0>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0a9b      	lsrs	r3, r3, #10
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a5f      	ldr	r2, [pc, #380]	; (8003464 <HAL_DMA_IRQHandler+0x1b4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d04a      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5d      	ldr	r2, [pc, #372]	; (8003468 <HAL_DMA_IRQHandler+0x1b8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d045      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5c      	ldr	r2, [pc, #368]	; (800346c <HAL_DMA_IRQHandler+0x1bc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d040      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5a      	ldr	r2, [pc, #360]	; (8003470 <HAL_DMA_IRQHandler+0x1c0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d03b      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a59      	ldr	r2, [pc, #356]	; (8003474 <HAL_DMA_IRQHandler+0x1c4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d036      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a57      	ldr	r2, [pc, #348]	; (8003478 <HAL_DMA_IRQHandler+0x1c8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d031      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a56      	ldr	r2, [pc, #344]	; (800347c <HAL_DMA_IRQHandler+0x1cc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d02c      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a54      	ldr	r2, [pc, #336]	; (8003480 <HAL_DMA_IRQHandler+0x1d0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d027      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a53      	ldr	r2, [pc, #332]	; (8003484 <HAL_DMA_IRQHandler+0x1d4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d022      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a51      	ldr	r2, [pc, #324]	; (8003488 <HAL_DMA_IRQHandler+0x1d8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01d      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a50      	ldr	r2, [pc, #320]	; (800348c <HAL_DMA_IRQHandler+0x1dc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a4e      	ldr	r2, [pc, #312]	; (8003490 <HAL_DMA_IRQHandler+0x1e0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a4d      	ldr	r2, [pc, #308]	; (8003494 <HAL_DMA_IRQHandler+0x1e4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a4b      	ldr	r2, [pc, #300]	; (8003498 <HAL_DMA_IRQHandler+0x1e8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a4a      	ldr	r2, [pc, #296]	; (800349c <HAL_DMA_IRQHandler+0x1ec>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_DMA_IRQHandler+0xd2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a48      	ldr	r2, [pc, #288]	; (80034a0 <HAL_DMA_IRQHandler+0x1f0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d101      	bne.n	8003386 <HAL_DMA_IRQHandler+0xd6>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_DMA_IRQHandler+0xd8>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 842b 	beq.w	8003be4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2208      	movs	r2, #8
 8003398:	409a      	lsls	r2, r3
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80a2 	beq.w	80034e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2e      	ldr	r2, [pc, #184]	; (8003464 <HAL_DMA_IRQHandler+0x1b4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d04a      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2d      	ldr	r2, [pc, #180]	; (8003468 <HAL_DMA_IRQHandler+0x1b8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d045      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a2b      	ldr	r2, [pc, #172]	; (800346c <HAL_DMA_IRQHandler+0x1bc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d040      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <HAL_DMA_IRQHandler+0x1c0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d03b      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a28      	ldr	r2, [pc, #160]	; (8003474 <HAL_DMA_IRQHandler+0x1c4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d036      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a27      	ldr	r2, [pc, #156]	; (8003478 <HAL_DMA_IRQHandler+0x1c8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d031      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a25      	ldr	r2, [pc, #148]	; (800347c <HAL_DMA_IRQHandler+0x1cc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02c      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a24      	ldr	r2, [pc, #144]	; (8003480 <HAL_DMA_IRQHandler+0x1d0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d027      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a22      	ldr	r2, [pc, #136]	; (8003484 <HAL_DMA_IRQHandler+0x1d4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d022      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	; (8003488 <HAL_DMA_IRQHandler+0x1d8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d01d      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1f      	ldr	r2, [pc, #124]	; (800348c <HAL_DMA_IRQHandler+0x1dc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d018      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <HAL_DMA_IRQHandler+0x1e0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d013      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <HAL_DMA_IRQHandler+0x1e4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00e      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <HAL_DMA_IRQHandler+0x1e8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d009      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a19      	ldr	r2, [pc, #100]	; (800349c <HAL_DMA_IRQHandler+0x1ec>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d004      	beq.n	8003444 <HAL_DMA_IRQHandler+0x194>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_DMA_IRQHandler+0x1f0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d12f      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x1f4>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	e02e      	b.n	80034b8 <HAL_DMA_IRQHandler+0x208>
 800345a:	bf00      	nop
 800345c:	24000018 	.word	0x24000018
 8003460:	1b4e81b5 	.word	0x1b4e81b5
 8003464:	40020010 	.word	0x40020010
 8003468:	40020028 	.word	0x40020028
 800346c:	40020040 	.word	0x40020040
 8003470:	40020058 	.word	0x40020058
 8003474:	40020070 	.word	0x40020070
 8003478:	40020088 	.word	0x40020088
 800347c:	400200a0 	.word	0x400200a0
 8003480:	400200b8 	.word	0x400200b8
 8003484:	40020410 	.word	0x40020410
 8003488:	40020428 	.word	0x40020428
 800348c:	40020440 	.word	0x40020440
 8003490:	40020458 	.word	0x40020458
 8003494:	40020470 	.word	0x40020470
 8003498:	40020488 	.word	0x40020488
 800349c:	400204a0 	.word	0x400204a0
 80034a0:	400204b8 	.word	0x400204b8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf14      	ite	ne
 80034b2:	2301      	movne	r3, #1
 80034b4:	2300      	moveq	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	2208      	movs	r2, #8
 80034d6:	409a      	lsls	r2, r3
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	fa22 f303 	lsr.w	r3, r2, r3
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d06e      	beq.n	80035dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a69      	ldr	r2, [pc, #420]	; (80036a8 <HAL_DMA_IRQHandler+0x3f8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d04a      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a67      	ldr	r2, [pc, #412]	; (80036ac <HAL_DMA_IRQHandler+0x3fc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d045      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a66      	ldr	r2, [pc, #408]	; (80036b0 <HAL_DMA_IRQHandler+0x400>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d040      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a64      	ldr	r2, [pc, #400]	; (80036b4 <HAL_DMA_IRQHandler+0x404>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d03b      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a63      	ldr	r2, [pc, #396]	; (80036b8 <HAL_DMA_IRQHandler+0x408>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d036      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a61      	ldr	r2, [pc, #388]	; (80036bc <HAL_DMA_IRQHandler+0x40c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d031      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a60      	ldr	r2, [pc, #384]	; (80036c0 <HAL_DMA_IRQHandler+0x410>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d02c      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a5e      	ldr	r2, [pc, #376]	; (80036c4 <HAL_DMA_IRQHandler+0x414>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d027      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5d      	ldr	r2, [pc, #372]	; (80036c8 <HAL_DMA_IRQHandler+0x418>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d022      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a5b      	ldr	r2, [pc, #364]	; (80036cc <HAL_DMA_IRQHandler+0x41c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01d      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5a      	ldr	r2, [pc, #360]	; (80036d0 <HAL_DMA_IRQHandler+0x420>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d018      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_DMA_IRQHandler+0x424>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a57      	ldr	r2, [pc, #348]	; (80036d8 <HAL_DMA_IRQHandler+0x428>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00e      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a55      	ldr	r2, [pc, #340]	; (80036dc <HAL_DMA_IRQHandler+0x42c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a54      	ldr	r2, [pc, #336]	; (80036e0 <HAL_DMA_IRQHandler+0x430>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_DMA_IRQHandler+0x2ee>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <HAL_DMA_IRQHandler+0x434>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10a      	bne.n	80035b4 <HAL_DMA_IRQHandler+0x304>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e003      	b.n	80035bc <HAL_DMA_IRQHandler+0x30c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2201      	movs	r2, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f043 0202 	orr.w	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2204      	movs	r2, #4
 80035e6:	409a      	lsls	r2, r3
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 808f 	beq.w	8003710 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <HAL_DMA_IRQHandler+0x3f8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d04a      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_DMA_IRQHandler+0x3fc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d045      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a29      	ldr	r2, [pc, #164]	; (80036b0 <HAL_DMA_IRQHandler+0x400>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d040      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <HAL_DMA_IRQHandler+0x404>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d03b      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <HAL_DMA_IRQHandler+0x408>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d036      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a24      	ldr	r2, [pc, #144]	; (80036bc <HAL_DMA_IRQHandler+0x40c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d031      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <HAL_DMA_IRQHandler+0x410>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d02c      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <HAL_DMA_IRQHandler+0x414>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d027      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <HAL_DMA_IRQHandler+0x418>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <HAL_DMA_IRQHandler+0x41c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01d      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_DMA_IRQHandler+0x420>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d018      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_DMA_IRQHandler+0x424>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <HAL_DMA_IRQHandler+0x428>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00e      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a18      	ldr	r2, [pc, #96]	; (80036dc <HAL_DMA_IRQHandler+0x42c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <HAL_DMA_IRQHandler+0x430>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_DMA_IRQHandler+0x3e2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <HAL_DMA_IRQHandler+0x434>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d12a      	bne.n	80036e8 <HAL_DMA_IRQHandler+0x438>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e023      	b.n	80036f0 <HAL_DMA_IRQHandler+0x440>
 80036a8:	40020010 	.word	0x40020010
 80036ac:	40020028 	.word	0x40020028
 80036b0:	40020040 	.word	0x40020040
 80036b4:	40020058 	.word	0x40020058
 80036b8:	40020070 	.word	0x40020070
 80036bc:	40020088 	.word	0x40020088
 80036c0:	400200a0 	.word	0x400200a0
 80036c4:	400200b8 	.word	0x400200b8
 80036c8:	40020410 	.word	0x40020410
 80036cc:	40020428 	.word	0x40020428
 80036d0:	40020440 	.word	0x40020440
 80036d4:	40020458 	.word	0x40020458
 80036d8:	40020470 	.word	0x40020470
 80036dc:	40020488 	.word	0x40020488
 80036e0:	400204a0 	.word	0x400204a0
 80036e4:	400204b8 	.word	0x400204b8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2204      	movs	r2, #4
 80036fe:	409a      	lsls	r2, r3
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2210      	movs	r2, #16
 800371a:	409a      	lsls	r2, r3
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80a6 	beq.w	8003872 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a85      	ldr	r2, [pc, #532]	; (8003940 <HAL_DMA_IRQHandler+0x690>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d04a      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a83      	ldr	r2, [pc, #524]	; (8003944 <HAL_DMA_IRQHandler+0x694>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d045      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a82      	ldr	r2, [pc, #520]	; (8003948 <HAL_DMA_IRQHandler+0x698>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d040      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a80      	ldr	r2, [pc, #512]	; (800394c <HAL_DMA_IRQHandler+0x69c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d03b      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7f      	ldr	r2, [pc, #508]	; (8003950 <HAL_DMA_IRQHandler+0x6a0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d036      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a7d      	ldr	r2, [pc, #500]	; (8003954 <HAL_DMA_IRQHandler+0x6a4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d031      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a7c      	ldr	r2, [pc, #496]	; (8003958 <HAL_DMA_IRQHandler+0x6a8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d02c      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a7a      	ldr	r2, [pc, #488]	; (800395c <HAL_DMA_IRQHandler+0x6ac>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d027      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a79      	ldr	r2, [pc, #484]	; (8003960 <HAL_DMA_IRQHandler+0x6b0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d022      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a77      	ldr	r2, [pc, #476]	; (8003964 <HAL_DMA_IRQHandler+0x6b4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01d      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a76      	ldr	r2, [pc, #472]	; (8003968 <HAL_DMA_IRQHandler+0x6b8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d018      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a74      	ldr	r2, [pc, #464]	; (800396c <HAL_DMA_IRQHandler+0x6bc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a73      	ldr	r2, [pc, #460]	; (8003970 <HAL_DMA_IRQHandler+0x6c0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a71      	ldr	r2, [pc, #452]	; (8003974 <HAL_DMA_IRQHandler+0x6c4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a70      	ldr	r2, [pc, #448]	; (8003978 <HAL_DMA_IRQHandler+0x6c8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x516>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6e      	ldr	r2, [pc, #440]	; (800397c <HAL_DMA_IRQHandler+0x6cc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10a      	bne.n	80037dc <HAL_DMA_IRQHandler+0x52c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e009      	b.n	80037f0 <HAL_DMA_IRQHandler+0x540>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bf14      	ite	ne
 80037ea:	2301      	movne	r3, #1
 80037ec:	2300      	moveq	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d03e      	beq.n	8003872 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2210      	movs	r2, #16
 80037fe:	409a      	lsls	r2, r3
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d018      	beq.n	8003844 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d108      	bne.n	8003832 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d024      	beq.n	8003872 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
 8003830:	e01f      	b.n	8003872 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01b      	beq.n	8003872 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
 8003842:	e016      	b.n	8003872 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d107      	bne.n	8003862 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0208 	bic.w	r2, r2, #8
 8003860:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	2220      	movs	r2, #32
 800387c:	409a      	lsls	r2, r3
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8110 	beq.w	8003aa8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <HAL_DMA_IRQHandler+0x690>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d04a      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2b      	ldr	r2, [pc, #172]	; (8003944 <HAL_DMA_IRQHandler+0x694>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d045      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a29      	ldr	r2, [pc, #164]	; (8003948 <HAL_DMA_IRQHandler+0x698>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d040      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a28      	ldr	r2, [pc, #160]	; (800394c <HAL_DMA_IRQHandler+0x69c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d03b      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a26      	ldr	r2, [pc, #152]	; (8003950 <HAL_DMA_IRQHandler+0x6a0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d036      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a25      	ldr	r2, [pc, #148]	; (8003954 <HAL_DMA_IRQHandler+0x6a4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d031      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a23      	ldr	r2, [pc, #140]	; (8003958 <HAL_DMA_IRQHandler+0x6a8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d02c      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a22      	ldr	r2, [pc, #136]	; (800395c <HAL_DMA_IRQHandler+0x6ac>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d027      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a20      	ldr	r2, [pc, #128]	; (8003960 <HAL_DMA_IRQHandler+0x6b0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d022      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <HAL_DMA_IRQHandler+0x6b4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d01d      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <HAL_DMA_IRQHandler+0x6b8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d018      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_DMA_IRQHandler+0x6bc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <HAL_DMA_IRQHandler+0x6c0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a19      	ldr	r2, [pc, #100]	; (8003974 <HAL_DMA_IRQHandler+0x6c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a17      	ldr	r2, [pc, #92]	; (8003978 <HAL_DMA_IRQHandler+0x6c8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_DMA_IRQHandler+0x678>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a16      	ldr	r2, [pc, #88]	; (800397c <HAL_DMA_IRQHandler+0x6cc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d12b      	bne.n	8003980 <HAL_DMA_IRQHandler+0x6d0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	bf14      	ite	ne
 8003936:	2301      	movne	r3, #1
 8003938:	2300      	moveq	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	e02a      	b.n	8003994 <HAL_DMA_IRQHandler+0x6e4>
 800393e:	bf00      	nop
 8003940:	40020010 	.word	0x40020010
 8003944:	40020028 	.word	0x40020028
 8003948:	40020040 	.word	0x40020040
 800394c:	40020058 	.word	0x40020058
 8003950:	40020070 	.word	0x40020070
 8003954:	40020088 	.word	0x40020088
 8003958:	400200a0 	.word	0x400200a0
 800395c:	400200b8 	.word	0x400200b8
 8003960:	40020410 	.word	0x40020410
 8003964:	40020428 	.word	0x40020428
 8003968:	40020440 	.word	0x40020440
 800396c:	40020458 	.word	0x40020458
 8003970:	40020470 	.word	0x40020470
 8003974:	40020488 	.word	0x40020488
 8003978:	400204a0 	.word	0x400204a0
 800397c:	400204b8 	.word	0x400204b8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8087 	beq.w	8003aa8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2220      	movs	r2, #32
 80039a4:	409a      	lsls	r2, r3
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d139      	bne.n	8003a2a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0216 	bic.w	r2, r2, #22
 80039c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x736>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0208 	bic.w	r2, r2, #8
 80039f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	223f      	movs	r2, #63	; 0x3f
 8003a00:	409a      	lsls	r2, r3
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 834a 	beq.w	80040b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4798      	blx	r3
          }
          return;
 8003a28:	e344      	b.n	80040b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d018      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02c      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
 8003a56:	e027      	b.n	8003aa8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d023      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
 8003a68:	e01e      	b.n	8003aa8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10f      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8306 	beq.w	80040be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8088 	beq.w	8003bd0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7a      	ldr	r2, [pc, #488]	; (8003cb8 <HAL_DMA_IRQHandler+0xa08>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d04a      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a79      	ldr	r2, [pc, #484]	; (8003cbc <HAL_DMA_IRQHandler+0xa0c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d045      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a77      	ldr	r2, [pc, #476]	; (8003cc0 <HAL_DMA_IRQHandler+0xa10>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d040      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a76      	ldr	r2, [pc, #472]	; (8003cc4 <HAL_DMA_IRQHandler+0xa14>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d03b      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a74      	ldr	r2, [pc, #464]	; (8003cc8 <HAL_DMA_IRQHandler+0xa18>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d036      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a73      	ldr	r2, [pc, #460]	; (8003ccc <HAL_DMA_IRQHandler+0xa1c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d031      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a71      	ldr	r2, [pc, #452]	; (8003cd0 <HAL_DMA_IRQHandler+0xa20>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d02c      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a70      	ldr	r2, [pc, #448]	; (8003cd4 <HAL_DMA_IRQHandler+0xa24>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d027      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a6e      	ldr	r2, [pc, #440]	; (8003cd8 <HAL_DMA_IRQHandler+0xa28>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d022      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6d      	ldr	r2, [pc, #436]	; (8003cdc <HAL_DMA_IRQHandler+0xa2c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d01d      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6b      	ldr	r2, [pc, #428]	; (8003ce0 <HAL_DMA_IRQHandler+0xa30>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d018      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6a      	ldr	r2, [pc, #424]	; (8003ce4 <HAL_DMA_IRQHandler+0xa34>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a68      	ldr	r2, [pc, #416]	; (8003ce8 <HAL_DMA_IRQHandler+0xa38>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00e      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a67      	ldr	r2, [pc, #412]	; (8003cec <HAL_DMA_IRQHandler+0xa3c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d009      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a65      	ldr	r2, [pc, #404]	; (8003cf0 <HAL_DMA_IRQHandler+0xa40>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x8b8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a64      	ldr	r2, [pc, #400]	; (8003cf4 <HAL_DMA_IRQHandler+0xa44>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d108      	bne.n	8003b7a <HAL_DMA_IRQHandler+0x8ca>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e007      	b.n	8003b8a <HAL_DMA_IRQHandler+0x8da>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d307      	bcc.n	8003ba6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f2      	bne.n	8003b8a <HAL_DMA_IRQHandler+0x8da>
 8003ba4:	e000      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ba6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003bc6:	e003      	b.n	8003bd0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8272 	beq.w	80040be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
 8003be2:	e26c      	b.n	80040be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a43      	ldr	r2, [pc, #268]	; (8003cf8 <HAL_DMA_IRQHandler+0xa48>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d022      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x984>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a42      	ldr	r2, [pc, #264]	; (8003cfc <HAL_DMA_IRQHandler+0xa4c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d01d      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x984>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a40      	ldr	r2, [pc, #256]	; (8003d00 <HAL_DMA_IRQHandler+0xa50>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d018      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x984>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a3f      	ldr	r2, [pc, #252]	; (8003d04 <HAL_DMA_IRQHandler+0xa54>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d013      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x984>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a3d      	ldr	r2, [pc, #244]	; (8003d08 <HAL_DMA_IRQHandler+0xa58>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x984>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a3c      	ldr	r2, [pc, #240]	; (8003d0c <HAL_DMA_IRQHandler+0xa5c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d009      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x984>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a3a      	ldr	r2, [pc, #232]	; (8003d10 <HAL_DMA_IRQHandler+0xa60>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x984>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a39      	ldr	r2, [pc, #228]	; (8003d14 <HAL_DMA_IRQHandler+0xa64>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x988>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_DMA_IRQHandler+0x98a>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 823f 	beq.w	80040be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2204      	movs	r2, #4
 8003c52:	409a      	lsls	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80cd 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xb48>
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80c7 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	2204      	movs	r2, #4
 8003c74:	409a      	lsls	r2, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d049      	beq.n	8003d18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8210 	beq.w	80040b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ca0:	e20a      	b.n	80040b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8206 	beq.w	80040b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cb4:	e200      	b.n	80040b8 <HAL_DMA_IRQHandler+0xe08>
 8003cb6:	bf00      	nop
 8003cb8:	40020010 	.word	0x40020010
 8003cbc:	40020028 	.word	0x40020028
 8003cc0:	40020040 	.word	0x40020040
 8003cc4:	40020058 	.word	0x40020058
 8003cc8:	40020070 	.word	0x40020070
 8003ccc:	40020088 	.word	0x40020088
 8003cd0:	400200a0 	.word	0x400200a0
 8003cd4:	400200b8 	.word	0x400200b8
 8003cd8:	40020410 	.word	0x40020410
 8003cdc:	40020428 	.word	0x40020428
 8003ce0:	40020440 	.word	0x40020440
 8003ce4:	40020458 	.word	0x40020458
 8003ce8:	40020470 	.word	0x40020470
 8003cec:	40020488 	.word	0x40020488
 8003cf0:	400204a0 	.word	0x400204a0
 8003cf4:	400204b8 	.word	0x400204b8
 8003cf8:	58025408 	.word	0x58025408
 8003cfc:	5802541c 	.word	0x5802541c
 8003d00:	58025430 	.word	0x58025430
 8003d04:	58025444 	.word	0x58025444
 8003d08:	58025458 	.word	0x58025458
 8003d0c:	5802546c 	.word	0x5802546c
 8003d10:	58025480 	.word	0x58025480
 8003d14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d160      	bne.n	8003de4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a8c      	ldr	r2, [pc, #560]	; (8003f58 <HAL_DMA_IRQHandler+0xca8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d04a      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a8a      	ldr	r2, [pc, #552]	; (8003f5c <HAL_DMA_IRQHandler+0xcac>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d045      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a89      	ldr	r2, [pc, #548]	; (8003f60 <HAL_DMA_IRQHandler+0xcb0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d040      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a87      	ldr	r2, [pc, #540]	; (8003f64 <HAL_DMA_IRQHandler+0xcb4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d03b      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a86      	ldr	r2, [pc, #536]	; (8003f68 <HAL_DMA_IRQHandler+0xcb8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d036      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a84      	ldr	r2, [pc, #528]	; (8003f6c <HAL_DMA_IRQHandler+0xcbc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d031      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a83      	ldr	r2, [pc, #524]	; (8003f70 <HAL_DMA_IRQHandler+0xcc0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d02c      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a81      	ldr	r2, [pc, #516]	; (8003f74 <HAL_DMA_IRQHandler+0xcc4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d027      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a80      	ldr	r2, [pc, #512]	; (8003f78 <HAL_DMA_IRQHandler+0xcc8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a7e      	ldr	r2, [pc, #504]	; (8003f7c <HAL_DMA_IRQHandler+0xccc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01d      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <HAL_DMA_IRQHandler+0xcd0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d018      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a7b      	ldr	r2, [pc, #492]	; (8003f84 <HAL_DMA_IRQHandler+0xcd4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a7a      	ldr	r2, [pc, #488]	; (8003f88 <HAL_DMA_IRQHandler+0xcd8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00e      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a78      	ldr	r2, [pc, #480]	; (8003f8c <HAL_DMA_IRQHandler+0xcdc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a77      	ldr	r2, [pc, #476]	; (8003f90 <HAL_DMA_IRQHandler+0xce0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xb12>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a75      	ldr	r2, [pc, #468]	; (8003f94 <HAL_DMA_IRQHandler+0xce4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d108      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0xb24>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0208 	bic.w	r2, r2, #8
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e007      	b.n	8003de4 <HAL_DMA_IRQHandler+0xb34>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0204 	bic.w	r2, r2, #4
 8003de2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8165 	beq.w	80040b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df6:	e15f      	b.n	80040b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	2202      	movs	r2, #2
 8003e02:	409a      	lsls	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80c5 	beq.w	8003f98 <HAL_DMA_IRQHandler+0xce8>
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80bf 	beq.w	8003f98 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2202      	movs	r2, #2
 8003e24:	409a      	lsls	r2, r3
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d018      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 813a 	beq.w	80040bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e50:	e134      	b.n	80040bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8130 	beq.w	80040bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e64:	e12a      	b.n	80040bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d168      	bne.n	8003f42 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a38      	ldr	r2, [pc, #224]	; (8003f58 <HAL_DMA_IRQHandler+0xca8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d04a      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a37      	ldr	r2, [pc, #220]	; (8003f5c <HAL_DMA_IRQHandler+0xcac>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d045      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a35      	ldr	r2, [pc, #212]	; (8003f60 <HAL_DMA_IRQHandler+0xcb0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d040      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a34      	ldr	r2, [pc, #208]	; (8003f64 <HAL_DMA_IRQHandler+0xcb4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d03b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a32      	ldr	r2, [pc, #200]	; (8003f68 <HAL_DMA_IRQHandler+0xcb8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d036      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a31      	ldr	r2, [pc, #196]	; (8003f6c <HAL_DMA_IRQHandler+0xcbc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <HAL_DMA_IRQHandler+0xcc0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2e      	ldr	r2, [pc, #184]	; (8003f74 <HAL_DMA_IRQHandler+0xcc4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d027      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <HAL_DMA_IRQHandler+0xcc8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <HAL_DMA_IRQHandler+0xccc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01d      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <HAL_DMA_IRQHandler+0xcd0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <HAL_DMA_IRQHandler+0xcd4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <HAL_DMA_IRQHandler+0xcd8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <HAL_DMA_IRQHandler+0xcdc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <HAL_DMA_IRQHandler+0xce0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xc60>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <HAL_DMA_IRQHandler+0xce4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <HAL_DMA_IRQHandler+0xc72>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0214 	bic.w	r2, r2, #20
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e007      	b.n	8003f32 <HAL_DMA_IRQHandler+0xc82>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 020a 	bic.w	r2, r2, #10
 8003f30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80b8 	beq.w	80040bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f54:	e0b2      	b.n	80040bc <HAL_DMA_IRQHandler+0xe0c>
 8003f56:	bf00      	nop
 8003f58:	40020010 	.word	0x40020010
 8003f5c:	40020028 	.word	0x40020028
 8003f60:	40020040 	.word	0x40020040
 8003f64:	40020058 	.word	0x40020058
 8003f68:	40020070 	.word	0x40020070
 8003f6c:	40020088 	.word	0x40020088
 8003f70:	400200a0 	.word	0x400200a0
 8003f74:	400200b8 	.word	0x400200b8
 8003f78:	40020410 	.word	0x40020410
 8003f7c:	40020428 	.word	0x40020428
 8003f80:	40020440 	.word	0x40020440
 8003f84:	40020458 	.word	0x40020458
 8003f88:	40020470 	.word	0x40020470
 8003f8c:	40020488 	.word	0x40020488
 8003f90:	400204a0 	.word	0x400204a0
 8003f94:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8088 	beq.w	80040be <HAL_DMA_IRQHandler+0xe0e>
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8082 	beq.w	80040be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a41      	ldr	r2, [pc, #260]	; (80040c4 <HAL_DMA_IRQHandler+0xe14>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d04a      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <HAL_DMA_IRQHandler+0xe18>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d045      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a3e      	ldr	r2, [pc, #248]	; (80040cc <HAL_DMA_IRQHandler+0xe1c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d040      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <HAL_DMA_IRQHandler+0xe20>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d03b      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <HAL_DMA_IRQHandler+0xe24>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d036      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a39      	ldr	r2, [pc, #228]	; (80040d8 <HAL_DMA_IRQHandler+0xe28>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d031      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a38      	ldr	r2, [pc, #224]	; (80040dc <HAL_DMA_IRQHandler+0xe2c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d02c      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a36      	ldr	r2, [pc, #216]	; (80040e0 <HAL_DMA_IRQHandler+0xe30>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d027      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a35      	ldr	r2, [pc, #212]	; (80040e4 <HAL_DMA_IRQHandler+0xe34>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d022      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a33      	ldr	r2, [pc, #204]	; (80040e8 <HAL_DMA_IRQHandler+0xe38>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01d      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a32      	ldr	r2, [pc, #200]	; (80040ec <HAL_DMA_IRQHandler+0xe3c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d018      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a30      	ldr	r2, [pc, #192]	; (80040f0 <HAL_DMA_IRQHandler+0xe40>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <HAL_DMA_IRQHandler+0xe44>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2d      	ldr	r2, [pc, #180]	; (80040f8 <HAL_DMA_IRQHandler+0xe48>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2c      	ldr	r2, [pc, #176]	; (80040fc <HAL_DMA_IRQHandler+0xe4c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_DMA_IRQHandler+0xdaa>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <HAL_DMA_IRQHandler+0xe50>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d108      	bne.n	800406c <HAL_DMA_IRQHandler+0xdbc>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 021c 	bic.w	r2, r2, #28
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e007      	b.n	800407c <HAL_DMA_IRQHandler+0xdcc>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 020e 	bic.w	r2, r2, #14
 800407a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2201      	movs	r2, #1
 8004086:	409a      	lsls	r2, r3
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
 80040b2:	e004      	b.n	80040be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80040b4:	bf00      	nop
 80040b6:	e002      	b.n	80040be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040b8:	bf00      	nop
 80040ba:	e000      	b.n	80040be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040be:	3728      	adds	r7, #40	; 0x28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40020010 	.word	0x40020010
 80040c8:	40020028 	.word	0x40020028
 80040cc:	40020040 	.word	0x40020040
 80040d0:	40020058 	.word	0x40020058
 80040d4:	40020070 	.word	0x40020070
 80040d8:	40020088 	.word	0x40020088
 80040dc:	400200a0 	.word	0x400200a0
 80040e0:	400200b8 	.word	0x400200b8
 80040e4:	40020410 	.word	0x40020410
 80040e8:	40020428 	.word	0x40020428
 80040ec:	40020440 	.word	0x40020440
 80040f0:	40020458 	.word	0x40020458
 80040f4:	40020470 	.word	0x40020470
 80040f8:	40020488 	.word	0x40020488
 80040fc:	400204a0 	.word	0x400204a0
 8004100:	400204b8 	.word	0x400204b8

08004104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a42      	ldr	r2, [pc, #264]	; (800421c <DMA_CalcBaseAndBitshift+0x118>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d04a      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a41      	ldr	r2, [pc, #260]	; (8004220 <DMA_CalcBaseAndBitshift+0x11c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d045      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3f      	ldr	r2, [pc, #252]	; (8004224 <DMA_CalcBaseAndBitshift+0x120>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d040      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3e      	ldr	r2, [pc, #248]	; (8004228 <DMA_CalcBaseAndBitshift+0x124>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d03b      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a3c      	ldr	r2, [pc, #240]	; (800422c <DMA_CalcBaseAndBitshift+0x128>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d036      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <DMA_CalcBaseAndBitshift+0x12c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d031      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a39      	ldr	r2, [pc, #228]	; (8004234 <DMA_CalcBaseAndBitshift+0x130>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d02c      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a38      	ldr	r2, [pc, #224]	; (8004238 <DMA_CalcBaseAndBitshift+0x134>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d027      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a36      	ldr	r2, [pc, #216]	; (800423c <DMA_CalcBaseAndBitshift+0x138>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d022      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a35      	ldr	r2, [pc, #212]	; (8004240 <DMA_CalcBaseAndBitshift+0x13c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d01d      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a33      	ldr	r2, [pc, #204]	; (8004244 <DMA_CalcBaseAndBitshift+0x140>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d018      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a32      	ldr	r2, [pc, #200]	; (8004248 <DMA_CalcBaseAndBitshift+0x144>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d013      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a30      	ldr	r2, [pc, #192]	; (800424c <DMA_CalcBaseAndBitshift+0x148>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00e      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2f      	ldr	r2, [pc, #188]	; (8004250 <DMA_CalcBaseAndBitshift+0x14c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d009      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2d      	ldr	r2, [pc, #180]	; (8004254 <DMA_CalcBaseAndBitshift+0x150>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d004      	beq.n	80041ac <DMA_CalcBaseAndBitshift+0xa8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <DMA_CalcBaseAndBitshift+0x154>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d101      	bne.n	80041b0 <DMA_CalcBaseAndBitshift+0xac>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <DMA_CalcBaseAndBitshift+0xae>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d024      	beq.n	8004200 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	3b10      	subs	r3, #16
 80041be:	4a27      	ldr	r2, [pc, #156]	; (800425c <DMA_CalcBaseAndBitshift+0x158>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	4a24      	ldr	r2, [pc, #144]	; (8004260 <DMA_CalcBaseAndBitshift+0x15c>)
 80041d0:	5cd3      	ldrb	r3, [r2, r3]
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d908      	bls.n	80041f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <DMA_CalcBaseAndBitshift+0x160>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	659a      	str	r2, [r3, #88]	; 0x58
 80041ee:	e00d      	b.n	800420c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <DMA_CalcBaseAndBitshift+0x160>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6593      	str	r3, [r2, #88]	; 0x58
 80041fe:	e005      	b.n	800420c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40020010 	.word	0x40020010
 8004220:	40020028 	.word	0x40020028
 8004224:	40020040 	.word	0x40020040
 8004228:	40020058 	.word	0x40020058
 800422c:	40020070 	.word	0x40020070
 8004230:	40020088 	.word	0x40020088
 8004234:	400200a0 	.word	0x400200a0
 8004238:	400200b8 	.word	0x400200b8
 800423c:	40020410 	.word	0x40020410
 8004240:	40020428 	.word	0x40020428
 8004244:	40020440 	.word	0x40020440
 8004248:	40020458 	.word	0x40020458
 800424c:	40020470 	.word	0x40020470
 8004250:	40020488 	.word	0x40020488
 8004254:	400204a0 	.word	0x400204a0
 8004258:	400204b8 	.word	0x400204b8
 800425c:	aaaaaaab 	.word	0xaaaaaaab
 8004260:	0800f8c4 	.word	0x0800f8c4
 8004264:	fffffc00 	.word	0xfffffc00

08004268 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d120      	bne.n	80042be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	2b03      	cmp	r3, #3
 8004282:	d858      	bhi.n	8004336 <DMA_CheckFifoParam+0xce>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <DMA_CheckFifoParam+0x24>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042af 	.word	0x080042af
 8004294:	0800429d 	.word	0x0800429d
 8004298:	08004337 	.word	0x08004337
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d048      	beq.n	800433a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042ac:	e045      	b.n	800433a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042b6:	d142      	bne.n	800433e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042bc:	e03f      	b.n	800433e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c6:	d123      	bne.n	8004310 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d838      	bhi.n	8004342 <DMA_CheckFifoParam+0xda>
 80042d0:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <DMA_CheckFifoParam+0x70>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042ef 	.word	0x080042ef
 80042e0:	080042e9 	.word	0x080042e9
 80042e4:	08004301 	.word	0x08004301
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
        break;
 80042ec:	e030      	b.n	8004350 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d025      	beq.n	8004346 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042fe:	e022      	b.n	8004346 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004308:	d11f      	bne.n	800434a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800430e:	e01c      	b.n	800434a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	2b02      	cmp	r3, #2
 8004316:	d902      	bls.n	800431e <DMA_CheckFifoParam+0xb6>
 8004318:	2b03      	cmp	r3, #3
 800431a:	d003      	beq.n	8004324 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800431c:	e018      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
        break;
 8004322:	e015      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00e      	beq.n	800434e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
    break;
 8004334:	e00b      	b.n	800434e <DMA_CheckFifoParam+0xe6>
        break;
 8004336:	bf00      	nop
 8004338:	e00a      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
        break;
 800433a:	bf00      	nop
 800433c:	e008      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
        break;
 800433e:	bf00      	nop
 8004340:	e006      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
        break;
 8004342:	bf00      	nop
 8004344:	e004      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
        break;
 8004346:	bf00      	nop
 8004348:	e002      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
        break;
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
    break;
 800434e:	bf00      	nop
    }
  }

  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop

08004360 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a38      	ldr	r2, [pc, #224]	; (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d022      	beq.n	80043be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a36      	ldr	r2, [pc, #216]	; (8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01d      	beq.n	80043be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a35      	ldr	r2, [pc, #212]	; (800445c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d018      	beq.n	80043be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a33      	ldr	r2, [pc, #204]	; (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a32      	ldr	r2, [pc, #200]	; (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a30      	ldr	r2, [pc, #192]	; (8004468 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2f      	ldr	r2, [pc, #188]	; (800446c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a2d      	ldr	r2, [pc, #180]	; (8004470 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d101      	bne.n	80043c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80043c2:	2300      	movs	r3, #0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01a      	beq.n	80043fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	3b08      	subs	r3, #8
 80043d0:	4a28      	ldr	r2, [pc, #160]	; (8004474 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4b26      	ldr	r3, [pc, #152]	; (8004478 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	461a      	mov	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a24      	ldr	r2, [pc, #144]	; (800447c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	2201      	movs	r2, #1
 80043f6:	409a      	lsls	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80043fc:	e024      	b.n	8004448 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	3b10      	subs	r3, #16
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d806      	bhi.n	8004426 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d902      	bls.n	8004426 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3308      	adds	r3, #8
 8004424:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4b18      	ldr	r3, [pc, #96]	; (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a16      	ldr	r2, [pc, #88]	; (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004438:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	2201      	movs	r2, #1
 8004442:	409a      	lsls	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	58025408 	.word	0x58025408
 8004458:	5802541c 	.word	0x5802541c
 800445c:	58025430 	.word	0x58025430
 8004460:	58025444 	.word	0x58025444
 8004464:	58025458 	.word	0x58025458
 8004468:	5802546c 	.word	0x5802546c
 800446c:	58025480 	.word	0x58025480
 8004470:	58025494 	.word	0x58025494
 8004474:	cccccccd 	.word	0xcccccccd
 8004478:	16009600 	.word	0x16009600
 800447c:	58025880 	.word	0x58025880
 8004480:	aaaaaaab 	.word	0xaaaaaaab
 8004484:	400204b8 	.word	0x400204b8
 8004488:	4002040f 	.word	0x4002040f
 800448c:	10008200 	.word	0x10008200
 8004490:	40020880 	.word	0x40020880

08004494 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d04a      	beq.n	8004540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d847      	bhi.n	8004540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a25      	ldr	r2, [pc, #148]	; (800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d022      	beq.n	8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a24      	ldr	r2, [pc, #144]	; (8004550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d01d      	beq.n	8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a22      	ldr	r2, [pc, #136]	; (8004554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a21      	ldr	r2, [pc, #132]	; (8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1f      	ldr	r2, [pc, #124]	; (800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d101      	bne.n	8004504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4b17      	ldr	r3, [pc, #92]	; (800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	461a      	mov	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800451c:	671a      	str	r2, [r3, #112]	; 0x70
 800451e:	e009      	b.n	8004534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	461a      	mov	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a11      	ldr	r2, [pc, #68]	; (8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004532:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3b01      	subs	r3, #1
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	58025408 	.word	0x58025408
 8004550:	5802541c 	.word	0x5802541c
 8004554:	58025430 	.word	0x58025430
 8004558:	58025444 	.word	0x58025444
 800455c:	58025458 	.word	0x58025458
 8004560:	5802546c 	.word	0x5802546c
 8004564:	58025480 	.word	0x58025480
 8004568:	58025494 	.word	0x58025494
 800456c:	1600963f 	.word	0x1600963f
 8004570:	58025940 	.word	0x58025940
 8004574:	1000823f 	.word	0x1000823f
 8004578:	40020940 	.word	0x40020940

0800457c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800458a:	4b89      	ldr	r3, [pc, #548]	; (80047b0 <HAL_GPIO_Init+0x234>)
 800458c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800458e:	e194      	b.n	80048ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	2101      	movs	r1, #1
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	4013      	ands	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8186 	beq.w	80048b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d00b      	beq.n	80045c8 <HAL_GPIO_Init+0x4c>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d007      	beq.n	80045c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045bc:	2b11      	cmp	r3, #17
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b12      	cmp	r3, #18
 80045c6:	d130      	bne.n	800462a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	2203      	movs	r2, #3
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045fe:	2201      	movs	r2, #1
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	091b      	lsrs	r3, r3, #4
 8004614:	f003 0201 	and.w	r2, r3, #1
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	2203      	movs	r2, #3
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d003      	beq.n	800466a <HAL_GPIO_Init+0xee>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b12      	cmp	r3, #18
 8004668:	d123      	bne.n	80046b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	08da      	lsrs	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3208      	adds	r2, #8
 8004672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	08da      	lsrs	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3208      	adds	r2, #8
 80046ac:	69b9      	ldr	r1, [r7, #24]
 80046ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	2203      	movs	r2, #3
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0203 	and.w	r2, r3, #3
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4313      	orrs	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80e0 	beq.w	80048b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f4:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <HAL_GPIO_Init+0x238>)
 80046f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046fa:	4a2e      	ldr	r2, [pc, #184]	; (80047b4 <HAL_GPIO_Init+0x238>)
 80046fc:	f043 0302 	orr.w	r3, r3, #2
 8004700:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <HAL_GPIO_Init+0x238>)
 8004706:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004712:	4a29      	ldr	r2, [pc, #164]	; (80047b8 <HAL_GPIO_Init+0x23c>)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	3302      	adds	r3, #2
 800471a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	220f      	movs	r2, #15
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a20      	ldr	r2, [pc, #128]	; (80047bc <HAL_GPIO_Init+0x240>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d052      	beq.n	80047e4 <HAL_GPIO_Init+0x268>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <HAL_GPIO_Init+0x244>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d031      	beq.n	80047aa <HAL_GPIO_Init+0x22e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <HAL_GPIO_Init+0x248>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d02b      	beq.n	80047a6 <HAL_GPIO_Init+0x22a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <HAL_GPIO_Init+0x24c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d025      	beq.n	80047a2 <HAL_GPIO_Init+0x226>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <HAL_GPIO_Init+0x250>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01f      	beq.n	800479e <HAL_GPIO_Init+0x222>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <HAL_GPIO_Init+0x254>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d019      	beq.n	800479a <HAL_GPIO_Init+0x21e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <HAL_GPIO_Init+0x258>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <HAL_GPIO_Init+0x21a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_GPIO_Init+0x25c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00d      	beq.n	8004792 <HAL_GPIO_Init+0x216>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_GPIO_Init+0x260>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d007      	beq.n	800478e <HAL_GPIO_Init+0x212>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <HAL_GPIO_Init+0x264>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d101      	bne.n	800478a <HAL_GPIO_Init+0x20e>
 8004786:	2309      	movs	r3, #9
 8004788:	e02d      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 800478a:	230a      	movs	r3, #10
 800478c:	e02b      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 800478e:	2308      	movs	r3, #8
 8004790:	e029      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 8004792:	2307      	movs	r3, #7
 8004794:	e027      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 8004796:	2306      	movs	r3, #6
 8004798:	e025      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 800479a:	2305      	movs	r3, #5
 800479c:	e023      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 800479e:	2304      	movs	r3, #4
 80047a0:	e021      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 80047a2:	2303      	movs	r3, #3
 80047a4:	e01f      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e01d      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e01b      	b.n	80047e6 <HAL_GPIO_Init+0x26a>
 80047ae:	bf00      	nop
 80047b0:	58000080 	.word	0x58000080
 80047b4:	58024400 	.word	0x58024400
 80047b8:	58000400 	.word	0x58000400
 80047bc:	58020000 	.word	0x58020000
 80047c0:	58020400 	.word	0x58020400
 80047c4:	58020800 	.word	0x58020800
 80047c8:	58020c00 	.word	0x58020c00
 80047cc:	58021000 	.word	0x58021000
 80047d0:	58021400 	.word	0x58021400
 80047d4:	58021800 	.word	0x58021800
 80047d8:	58021c00 	.word	0x58021c00
 80047dc:	58022000 	.word	0x58022000
 80047e0:	58022400 	.word	0x58022400
 80047e4:	2300      	movs	r3, #0
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	f002 0203 	and.w	r2, r2, #3
 80047ec:	0092      	lsls	r2, r2, #2
 80047ee:	4093      	lsls	r3, r2
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f6:	4938      	ldr	r1, [pc, #224]	; (80048d8 <HAL_GPIO_Init+0x35c>)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	3302      	adds	r3, #2
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800487e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	3301      	adds	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f47f ae63 	bne.w	8004590 <HAL_GPIO_Init+0x14>
  }
}
 80048ca:	bf00      	nop
 80048cc:	3724      	adds	r7, #36	; 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	58000400 	.word	0x58000400

080048dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	887b      	ldrh	r3, [r7, #2]
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
 80048f8:	e001      	b.n	80048fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	807b      	strh	r3, [r7, #2]
 8004918:	4613      	mov	r3, r2
 800491a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800491c:	787b      	ldrb	r3, [r7, #1]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004928:	e003      	b.n	8004932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	041a      	lsls	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	619a      	str	r2, [r3, #24]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	4603      	mov	r3, r0
 8004946:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004950:	88fb      	ldrh	r3, [r7, #6]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f804 	bl	8004972 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	4603      	mov	r3, r0
 800497a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_PWREx_ConfigSupply+0x70>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b04      	cmp	r3, #4
 800499a:	d00a      	beq.n	80049b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800499c:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <HAL_PWREx_ConfigSupply+0x70>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d001      	beq.n	80049ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e01f      	b.n	80049ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e01d      	b.n	80049ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <HAL_PWREx_ConfigSupply+0x70>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f023 0207 	bic.w	r2, r3, #7
 80049ba:	490f      	ldr	r1, [pc, #60]	; (80049f8 <HAL_PWREx_ConfigSupply+0x70>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049c2:	f7fd fd8b 	bl	80024dc <HAL_GetTick>
 80049c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049c8:	e009      	b.n	80049de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049ca:	f7fd fd87 	bl	80024dc <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049d8:	d901      	bls.n	80049de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e007      	b.n	80049ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_PWREx_ConfigSupply+0x70>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ea:	d1ee      	bne.n	80049ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	58024800 	.word	0x58024800

080049fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08c      	sub	sp, #48	; 0x30
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e3ff      	b.n	800520e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 8087 	beq.w	8004b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a1c:	4b99      	ldr	r3, [pc, #612]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a26:	4b97      	ldr	r3, [pc, #604]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d007      	beq.n	8004a42 <HAL_RCC_OscConfig+0x46>
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	2b18      	cmp	r3, #24
 8004a36:	d110      	bne.n	8004a5a <HAL_RCC_OscConfig+0x5e>
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d10b      	bne.n	8004a5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a42:	4b90      	ldr	r3, [pc, #576]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d06c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x12c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d168      	bne.n	8004b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e3d9      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x76>
 8004a64:	4b87      	ldr	r3, [pc, #540]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a86      	ldr	r2, [pc, #536]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e02e      	b.n	8004ad0 <HAL_RCC_OscConfig+0xd4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x98>
 8004a7a:	4b82      	ldr	r3, [pc, #520]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a81      	ldr	r2, [pc, #516]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b7f      	ldr	r3, [pc, #508]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7e      	ldr	r2, [pc, #504]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e01d      	b.n	8004ad0 <HAL_RCC_OscConfig+0xd4>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0xbc>
 8004a9e:	4b79      	ldr	r3, [pc, #484]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a78      	ldr	r2, [pc, #480]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b76      	ldr	r3, [pc, #472]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a75      	ldr	r2, [pc, #468]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e00b      	b.n	8004ad0 <HAL_RCC_OscConfig+0xd4>
 8004ab8:	4b72      	ldr	r3, [pc, #456]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a71      	ldr	r2, [pc, #452]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b6f      	ldr	r3, [pc, #444]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a6e      	ldr	r2, [pc, #440]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d013      	beq.n	8004b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fd fd00 	bl	80024dc <HAL_GetTick>
 8004adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fd fcfc 	bl	80024dc <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e38d      	b.n	800520e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004af2:	4b64      	ldr	r3, [pc, #400]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xe4>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fd fcec 	bl	80024dc <HAL_GetTick>
 8004b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fd fce8 	bl	80024dc <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e379      	b.n	800520e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b1a:	4b5a      	ldr	r3, [pc, #360]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x10c>
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80ae 	beq.w	8004c94 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b38:	4b52      	ldr	r3, [pc, #328]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b42:	4b50      	ldr	r3, [pc, #320]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_RCC_OscConfig+0x162>
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	2b18      	cmp	r3, #24
 8004b52:	d13a      	bne.n	8004bca <HAL_RCC_OscConfig+0x1ce>
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d135      	bne.n	8004bca <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b5e:	4b49      	ldr	r3, [pc, #292]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_RCC_OscConfig+0x17a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e34b      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b76:	f7fd fcdf 	bl	8002538 <HAL_GetREVID>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d817      	bhi.n	8004bb4 <HAL_RCC_OscConfig+0x1b8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d108      	bne.n	8004b9e <HAL_RCC_OscConfig+0x1a2>
 8004b8c:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b94:	4a3b      	ldr	r2, [pc, #236]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b9c:	e07a      	b.n	8004c94 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	031b      	lsls	r3, r3, #12
 8004bac:	4935      	ldr	r1, [pc, #212]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb2:	e06f      	b.n	8004c94 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb4:	4b33      	ldr	r3, [pc, #204]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	061b      	lsls	r3, r3, #24
 8004bc2:	4930      	ldr	r1, [pc, #192]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc8:	e064      	b.n	8004c94 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d045      	beq.n	8004c5e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 0219 	bic.w	r2, r3, #25
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	4929      	ldr	r1, [pc, #164]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fd fc7a 	bl	80024dc <HAL_GetTick>
 8004be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bec:	f7fd fc76 	bl	80024dc <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e307      	b.n	800520e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0a:	f7fd fc95 	bl	8002538 <HAL_GetREVID>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	f241 0303 	movw	r3, #4099	; 0x1003
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d817      	bhi.n	8004c48 <HAL_RCC_OscConfig+0x24c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d108      	bne.n	8004c32 <HAL_RCC_OscConfig+0x236>
 8004c20:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c28:	4a16      	ldr	r2, [pc, #88]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c2e:	6053      	str	r3, [r2, #4]
 8004c30:	e030      	b.n	8004c94 <HAL_RCC_OscConfig+0x298>
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	031b      	lsls	r3, r3, #12
 8004c40:	4910      	ldr	r1, [pc, #64]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
 8004c46:	e025      	b.n	8004c94 <HAL_RCC_OscConfig+0x298>
 8004c48:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	061b      	lsls	r3, r3, #24
 8004c56:	490b      	ldr	r1, [pc, #44]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	604b      	str	r3, [r1, #4]
 8004c5c:	e01a      	b.n	8004c94 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fc37 	bl	80024dc <HAL_GetTick>
 8004c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fd fc33 	bl	80024dc <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d903      	bls.n	8004c88 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e2c4      	b.n	800520e <HAL_RCC_OscConfig+0x812>
 8004c84:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c88:	4ba4      	ldr	r3, [pc, #656]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ee      	bne.n	8004c72 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80a9 	beq.w	8004df4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca2:	4b9e      	ldr	r3, [pc, #632]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004caa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cac:	4b9b      	ldr	r3, [pc, #620]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d007      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x2cc>
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2b18      	cmp	r3, #24
 8004cbc:	d13a      	bne.n	8004d34 <HAL_RCC_OscConfig+0x338>
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d135      	bne.n	8004d34 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cc8:	4b94      	ldr	r3, [pc, #592]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x2e4>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	2b80      	cmp	r3, #128	; 0x80
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e296      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ce0:	f7fd fc2a 	bl	8002538 <HAL_GetREVID>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	f241 0303 	movw	r3, #4099	; 0x1003
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d817      	bhi.n	8004d1e <HAL_RCC_OscConfig+0x322>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d108      	bne.n	8004d08 <HAL_RCC_OscConfig+0x30c>
 8004cf6:	4b89      	ldr	r3, [pc, #548]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004cfe:	4a87      	ldr	r2, [pc, #540]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d06:	e075      	b.n	8004df4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d08:	4b84      	ldr	r3, [pc, #528]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	069b      	lsls	r3, r3, #26
 8004d16:	4981      	ldr	r1, [pc, #516]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d1c:	e06a      	b.n	8004df4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d1e:	4b7f      	ldr	r3, [pc, #508]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	061b      	lsls	r3, r3, #24
 8004d2c:	497b      	ldr	r1, [pc, #492]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d32:	e05f      	b.n	8004df4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d042      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d3c:	4b77      	ldr	r3, [pc, #476]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a76      	ldr	r2, [pc, #472]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fd fbc8 	bl	80024dc <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d50:	f7fd fbc4 	bl	80024dc <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e255      	b.n	800520e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d62:	4b6e      	ldr	r3, [pc, #440]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d6e:	f7fd fbe3 	bl	8002538 <HAL_GetREVID>
 8004d72:	4602      	mov	r2, r0
 8004d74:	f241 0303 	movw	r3, #4099	; 0x1003
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d817      	bhi.n	8004dac <HAL_RCC_OscConfig+0x3b0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d108      	bne.n	8004d96 <HAL_RCC_OscConfig+0x39a>
 8004d84:	4b65      	ldr	r3, [pc, #404]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d8c:	4a63      	ldr	r2, [pc, #396]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d92:	6053      	str	r3, [r2, #4]
 8004d94:	e02e      	b.n	8004df4 <HAL_RCC_OscConfig+0x3f8>
 8004d96:	4b61      	ldr	r3, [pc, #388]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	069b      	lsls	r3, r3, #26
 8004da4:	495d      	ldr	r1, [pc, #372]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	604b      	str	r3, [r1, #4]
 8004daa:	e023      	b.n	8004df4 <HAL_RCC_OscConfig+0x3f8>
 8004dac:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	4958      	ldr	r1, [pc, #352]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60cb      	str	r3, [r1, #12]
 8004dc0:	e018      	b.n	8004df4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dc2:	4b56      	ldr	r3, [pc, #344]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a55      	ldr	r2, [pc, #340]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dce:	f7fd fb85 	bl	80024dc <HAL_GetTick>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004dd6:	f7fd fb81 	bl	80024dc <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e212      	b.n	800520e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004de8:	4b4c      	ldr	r3, [pc, #304]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f0      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d036      	beq.n	8004e6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d019      	beq.n	8004e3c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e08:	4b44      	ldr	r3, [pc, #272]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0c:	4a43      	ldr	r2, [pc, #268]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7fd fb62 	bl	80024dc <HAL_GetTick>
 8004e18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e1c:	f7fd fb5e 	bl	80024dc <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e1ef      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e2e:	4b3b      	ldr	r3, [pc, #236]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x420>
 8004e3a:	e018      	b.n	8004e6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3c:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e40:	4a36      	ldr	r2, [pc, #216]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fd fb48 	bl	80024dc <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e50:	f7fd fb44 	bl	80024dc <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e1d5      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e62:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d036      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d019      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e82:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004e88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e8e:	f7fd fb25 	bl	80024dc <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e96:	f7fd fb21 	bl	80024dc <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e1b2      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ea8:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x49a>
 8004eb4:	e018      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eb6:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ec2:	f7fd fb0b 	bl	80024dc <HAL_GetTick>
 8004ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004eca:	f7fd fb07 	bl	80024dc <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e198      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <HAL_RCC_OscConfig+0x520>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8085 	beq.w	8005000 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_RCC_OscConfig+0x524>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <HAL_RCC_OscConfig+0x524>)
 8004efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f02:	f7fd faeb 	bl	80024dc <HAL_GetTick>
 8004f06:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f08:	e00c      	b.n	8004f24 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f0a:	f7fd fae7 	bl	80024dc <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b64      	cmp	r3, #100	; 0x64
 8004f16:	d905      	bls.n	8004f24 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e178      	b.n	800520e <HAL_RCC_OscConfig+0x812>
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f24:	4b96      	ldr	r3, [pc, #600]	; (8005180 <HAL_RCC_OscConfig+0x784>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0ec      	beq.n	8004f0a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x54a>
 8004f38:	4b92      	ldr	r3, [pc, #584]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a91      	ldr	r2, [pc, #580]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	e02d      	b.n	8004fa2 <HAL_RCC_OscConfig+0x5a6>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x56c>
 8004f4e:	4b8d      	ldr	r3, [pc, #564]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a8c      	ldr	r2, [pc, #560]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	4b8a      	ldr	r3, [pc, #552]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a89      	ldr	r2, [pc, #548]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f60:	f023 0304 	bic.w	r3, r3, #4
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	e01c      	b.n	8004fa2 <HAL_RCC_OscConfig+0x5a6>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b05      	cmp	r3, #5
 8004f6e:	d10c      	bne.n	8004f8a <HAL_RCC_OscConfig+0x58e>
 8004f70:	4b84      	ldr	r3, [pc, #528]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a83      	ldr	r2, [pc, #524]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f76:	f043 0304 	orr.w	r3, r3, #4
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7c:	4b81      	ldr	r3, [pc, #516]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	4a80      	ldr	r2, [pc, #512]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6713      	str	r3, [r2, #112]	; 0x70
 8004f88:	e00b      	b.n	8004fa2 <HAL_RCC_OscConfig+0x5a6>
 8004f8a:	4b7e      	ldr	r3, [pc, #504]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4a7d      	ldr	r2, [pc, #500]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	; 0x70
 8004f96:	4b7b      	ldr	r3, [pc, #492]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a7a      	ldr	r2, [pc, #488]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004f9c:	f023 0304 	bic.w	r3, r3, #4
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d015      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fd fa97 	bl	80024dc <HAL_GetTick>
 8004fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fd fa93 	bl	80024dc <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e122      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fc8:	4b6e      	ldr	r3, [pc, #440]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ee      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x5b6>
 8004fd4:	e014      	b.n	8005000 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd6:	f7fd fa81 	bl	80024dc <HAL_GetTick>
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fd fa7d 	bl	80024dc <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e10c      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ff4:	4b63      	ldr	r3, [pc, #396]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1ee      	bne.n	8004fde <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8101 	beq.w	800520c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800500a:	4b5e      	ldr	r3, [pc, #376]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005012:	2b18      	cmp	r3, #24
 8005014:	f000 80bc 	beq.w	8005190 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b02      	cmp	r3, #2
 800501e:	f040 8095 	bne.w	800514c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	4b58      	ldr	r3, [pc, #352]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a57      	ldr	r2, [pc, #348]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8005028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fd fa55 	bl	80024dc <HAL_GetTick>
 8005032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005036:	f7fd fa51 	bl	80024dc <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e0e2      	b.n	800520e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005048:	4b4e      	ldr	r3, [pc, #312]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f0      	bne.n	8005036 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005054:	4b4b      	ldr	r3, [pc, #300]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8005056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005058:	4b4b      	ldr	r3, [pc, #300]	; (8005188 <HAL_RCC_OscConfig+0x78c>)
 800505a:	4013      	ands	r3, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005064:	0112      	lsls	r2, r2, #4
 8005066:	430a      	orrs	r2, r1
 8005068:	4946      	ldr	r1, [pc, #280]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 800506a:	4313      	orrs	r3, r2
 800506c:	628b      	str	r3, [r1, #40]	; 0x28
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	3b01      	subs	r3, #1
 8005074:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	3b01      	subs	r3, #1
 800507e:	025b      	lsls	r3, r3, #9
 8005080:	b29b      	uxth	r3, r3
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	3b01      	subs	r3, #1
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	3b01      	subs	r3, #1
 8005098:	061b      	lsls	r3, r3, #24
 800509a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800509e:	4939      	ldr	r1, [pc, #228]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80050a4:	4b37      	ldr	r3, [pc, #220]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4a36      	ldr	r2, [pc, #216]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050b0:	4b34      	ldr	r3, [pc, #208]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b4:	4b35      	ldr	r3, [pc, #212]	; (800518c <HAL_RCC_OscConfig+0x790>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050bc:	00d2      	lsls	r2, r2, #3
 80050be:	4931      	ldr	r1, [pc, #196]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050c4:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	f023 020c 	bic.w	r2, r3, #12
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	492c      	ldr	r1, [pc, #176]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050d6:	4b2b      	ldr	r3, [pc, #172]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	f023 0202 	bic.w	r2, r3, #2
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	4928      	ldr	r1, [pc, #160]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050e8:	4b26      	ldr	r3, [pc, #152]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	4a25      	ldr	r2, [pc, #148]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f4:	4b23      	ldr	r3, [pc, #140]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	4a22      	ldr	r2, [pc, #136]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 80050fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005100:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8005106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005118:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 800511e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fd f9da 	bl	80024dc <HAL_GetTick>
 8005128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800512c:	f7fd f9d6 	bl	80024dc <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e067      	b.n	800520e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800513e:	4b11      	ldr	r3, [pc, #68]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x730>
 800514a:	e05f      	b.n	800520c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0c      	ldr	r2, [pc, #48]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8005152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fd f9c0 	bl	80024dc <HAL_GetTick>
 800515c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005160:	f7fd f9bc 	bl	80024dc <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e04d      	b.n	800520e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <HAL_RCC_OscConfig+0x788>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x764>
 800517e:	e045      	b.n	800520c <HAL_RCC_OscConfig+0x810>
 8005180:	58024800 	.word	0x58024800
 8005184:	58024400 	.word	0x58024400
 8005188:	fffffc0c 	.word	0xfffffc0c
 800518c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005190:	4b21      	ldr	r3, [pc, #132]	; (8005218 <HAL_RCC_OscConfig+0x81c>)
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005196:	4b20      	ldr	r3, [pc, #128]	; (8005218 <HAL_RCC_OscConfig+0x81c>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d031      	beq.n	8005208 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f003 0203 	and.w	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d12a      	bne.n	8005208 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051be:	429a      	cmp	r2, r3
 80051c0:	d122      	bne.n	8005208 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d11a      	bne.n	8005208 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	0a5b      	lsrs	r3, r3, #9
 80051d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051de:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d111      	bne.n	8005208 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	0c1b      	lsrs	r3, r3, #16
 80051e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d108      	bne.n	8005208 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	0e1b      	lsrs	r3, r3, #24
 80051fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3730      	adds	r7, #48	; 0x30
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	58024400 	.word	0x58024400

0800521c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e19c      	b.n	800556a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005230:	4b8a      	ldr	r3, [pc, #552]	; (800545c <HAL_RCC_ClockConfig+0x240>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d910      	bls.n	8005260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523e:	4b87      	ldr	r3, [pc, #540]	; (800545c <HAL_RCC_ClockConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 020f 	bic.w	r2, r3, #15
 8005246:	4985      	ldr	r1, [pc, #532]	; (800545c <HAL_RCC_ClockConfig+0x240>)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	4313      	orrs	r3, r2
 800524c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	4b83      	ldr	r3, [pc, #524]	; (800545c <HAL_RCC_ClockConfig+0x240>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e184      	b.n	800556a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d010      	beq.n	800528e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	4b7b      	ldr	r3, [pc, #492]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005278:	429a      	cmp	r2, r3
 800527a:	d908      	bls.n	800528e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800527c:	4b78      	ldr	r3, [pc, #480]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	4975      	ldr	r1, [pc, #468]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 800528a:	4313      	orrs	r3, r2
 800528c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d010      	beq.n	80052bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	4b70      	ldr	r3, [pc, #448]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d908      	bls.n	80052bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052aa:	4b6d      	ldr	r3, [pc, #436]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	496a      	ldr	r1, [pc, #424]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d010      	beq.n	80052ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	4b64      	ldr	r3, [pc, #400]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d908      	bls.n	80052ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052d8:	4b61      	ldr	r3, [pc, #388]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	495e      	ldr	r1, [pc, #376]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d010      	beq.n	8005318 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	4b59      	ldr	r3, [pc, #356]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005302:	429a      	cmp	r2, r3
 8005304:	d908      	bls.n	8005318 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005306:	4b56      	ldr	r3, [pc, #344]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4953      	ldr	r1, [pc, #332]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005314:	4313      	orrs	r3, r2
 8005316:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d010      	beq.n	8005346 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	4b4d      	ldr	r3, [pc, #308]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	429a      	cmp	r2, r3
 8005332:	d908      	bls.n	8005346 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005334:	4b4a      	ldr	r3, [pc, #296]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f023 020f 	bic.w	r2, r3, #15
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4947      	ldr	r1, [pc, #284]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005342:	4313      	orrs	r3, r2
 8005344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d055      	beq.n	80053fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005352:	4b43      	ldr	r3, [pc, #268]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	4940      	ldr	r1, [pc, #256]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005360:	4313      	orrs	r3, r2
 8005362:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d107      	bne.n	800537c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800536c:	4b3c      	ldr	r3, [pc, #240]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d121      	bne.n	80053bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0f6      	b.n	800556a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d107      	bne.n	8005394 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005384:	4b36      	ldr	r3, [pc, #216]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d115      	bne.n	80053bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0ea      	b.n	800556a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d107      	bne.n	80053ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800539c:	4b30      	ldr	r3, [pc, #192]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0de      	b.n	800556a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ac:	4b2c      	ldr	r3, [pc, #176]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0d6      	b.n	800556a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053bc:	4b28      	ldr	r3, [pc, #160]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f023 0207 	bic.w	r2, r3, #7
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4925      	ldr	r1, [pc, #148]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ce:	f7fd f885 	bl	80024dc <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d4:	e00a      	b.n	80053ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d6:	f7fd f881 	bl	80024dc <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e0be      	b.n	800556a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ec:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d1eb      	bne.n	80053d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d010      	beq.n	800542c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	4b14      	ldr	r3, [pc, #80]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	429a      	cmp	r2, r3
 8005418:	d208      	bcs.n	800542c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800541a:	4b11      	ldr	r3, [pc, #68]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f023 020f 	bic.w	r2, r3, #15
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	490e      	ldr	r1, [pc, #56]	; (8005460 <HAL_RCC_ClockConfig+0x244>)
 8005428:	4313      	orrs	r3, r2
 800542a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800542c:	4b0b      	ldr	r3, [pc, #44]	; (800545c <HAL_RCC_ClockConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d214      	bcs.n	8005464 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543a:	4b08      	ldr	r3, [pc, #32]	; (800545c <HAL_RCC_ClockConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 020f 	bic.w	r2, r3, #15
 8005442:	4906      	ldr	r1, [pc, #24]	; (800545c <HAL_RCC_ClockConfig+0x240>)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	4b04      	ldr	r3, [pc, #16]	; (800545c <HAL_RCC_ClockConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d005      	beq.n	8005464 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e086      	b.n	800556a <HAL_RCC_ClockConfig+0x34e>
 800545c:	52002000 	.word	0x52002000
 8005460:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	4b3f      	ldr	r3, [pc, #252]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800547c:	429a      	cmp	r2, r3
 800547e:	d208      	bcs.n	8005492 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005480:	4b3c      	ldr	r3, [pc, #240]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	4939      	ldr	r1, [pc, #228]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 800548e:	4313      	orrs	r3, r2
 8005490:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d010      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	4b34      	ldr	r3, [pc, #208]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d208      	bcs.n	80054c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054ae:	4b31      	ldr	r3, [pc, #196]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	492e      	ldr	r1, [pc, #184]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d010      	beq.n	80054ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699a      	ldr	r2, [r3, #24]
 80054d0:	4b28      	ldr	r3, [pc, #160]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054d8:	429a      	cmp	r2, r3
 80054da:	d208      	bcs.n	80054ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054dc:	4b25      	ldr	r3, [pc, #148]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	4922      	ldr	r1, [pc, #136]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d010      	beq.n	800551c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005506:	429a      	cmp	r2, r3
 8005508:	d208      	bcs.n	800551c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800550a:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	4917      	ldr	r1, [pc, #92]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 8005518:	4313      	orrs	r3, r2
 800551a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800551c:	f000 f834 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8005520:	4601      	mov	r1, r0
 8005522:	4b14      	ldr	r3, [pc, #80]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	4a12      	ldr	r2, [pc, #72]	; (8005578 <HAL_RCC_ClockConfig+0x35c>)
 800552e:	5cd3      	ldrb	r3, [r2, r3]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	fa21 f303 	lsr.w	r3, r1, r3
 8005538:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800553a:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <HAL_RCC_ClockConfig+0x358>)
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	4a0d      	ldr	r2, [pc, #52]	; (8005578 <HAL_RCC_ClockConfig+0x35c>)
 8005544:	5cd3      	ldrb	r3, [r2, r3]
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	fa22 f303 	lsr.w	r3, r2, r3
 8005550:	4a0a      	ldr	r2, [pc, #40]	; (800557c <HAL_RCC_ClockConfig+0x360>)
 8005552:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005554:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <HAL_RCC_ClockConfig+0x364>)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <HAL_RCC_ClockConfig+0x368>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f7fc ff72 	bl	8002448 <HAL_InitTick>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	58024400 	.word	0x58024400
 8005578:	0800f8b4 	.word	0x0800f8b4
 800557c:	2400001c 	.word	0x2400001c
 8005580:	24000018 	.word	0x24000018
 8005584:	24000020 	.word	0x24000020

08005588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800558e:	4baf      	ldr	r3, [pc, #700]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005596:	2b18      	cmp	r3, #24
 8005598:	f200 814e 	bhi.w	8005838 <HAL_RCC_GetSysClockFreq+0x2b0>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	08005609 	.word	0x08005609
 80055a8:	08005839 	.word	0x08005839
 80055ac:	08005839 	.word	0x08005839
 80055b0:	08005839 	.word	0x08005839
 80055b4:	08005839 	.word	0x08005839
 80055b8:	08005839 	.word	0x08005839
 80055bc:	08005839 	.word	0x08005839
 80055c0:	08005839 	.word	0x08005839
 80055c4:	0800562f 	.word	0x0800562f
 80055c8:	08005839 	.word	0x08005839
 80055cc:	08005839 	.word	0x08005839
 80055d0:	08005839 	.word	0x08005839
 80055d4:	08005839 	.word	0x08005839
 80055d8:	08005839 	.word	0x08005839
 80055dc:	08005839 	.word	0x08005839
 80055e0:	08005839 	.word	0x08005839
 80055e4:	08005635 	.word	0x08005635
 80055e8:	08005839 	.word	0x08005839
 80055ec:	08005839 	.word	0x08005839
 80055f0:	08005839 	.word	0x08005839
 80055f4:	08005839 	.word	0x08005839
 80055f8:	08005839 	.word	0x08005839
 80055fc:	08005839 	.word	0x08005839
 8005600:	08005839 	.word	0x08005839
 8005604:	0800563b 	.word	0x0800563b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005608:	4b90      	ldr	r3, [pc, #576]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005614:	4b8d      	ldr	r3, [pc, #564]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	08db      	lsrs	r3, r3, #3
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	4a8c      	ldr	r2, [pc, #560]	; (8005850 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
 8005624:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005626:	e10a      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005628:	4b89      	ldr	r3, [pc, #548]	; (8005850 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800562a:	61bb      	str	r3, [r7, #24]
    break;
 800562c:	e107      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800562e:	4b89      	ldr	r3, [pc, #548]	; (8005854 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005630:	61bb      	str	r3, [r7, #24]
    break;
 8005632:	e104      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005634:	4b88      	ldr	r3, [pc, #544]	; (8005858 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005636:	61bb      	str	r3, [r7, #24]
    break;
 8005638:	e101      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800563a:	4b84      	ldr	r3, [pc, #528]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005644:	4b81      	ldr	r3, [pc, #516]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800564e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005650:	4b7e      	ldr	r3, [pc, #504]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800565a:	4b7c      	ldr	r3, [pc, #496]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	08db      	lsrs	r3, r3, #3
 8005660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	fb02 f303 	mul.w	r3, r2, r3
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 80da 	beq.w	8005832 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d05a      	beq.n	800573a <HAL_RCC_GetSysClockFreq+0x1b2>
 8005684:	2b01      	cmp	r3, #1
 8005686:	d302      	bcc.n	800568e <HAL_RCC_GetSysClockFreq+0x106>
 8005688:	2b02      	cmp	r3, #2
 800568a:	d078      	beq.n	800577e <HAL_RCC_GetSysClockFreq+0x1f6>
 800568c:	e099      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800568e:	4b6f      	ldr	r3, [pc, #444]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d02d      	beq.n	80056f6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800569a:	4b6c      	ldr	r3, [pc, #432]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	08db      	lsrs	r3, r3, #3
 80056a0:	f003 0303 	and.w	r3, r3, #3
 80056a4:	4a6a      	ldr	r2, [pc, #424]	; (8005850 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80056a6:	fa22 f303 	lsr.w	r3, r2, r3
 80056aa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c4:	4b61      	ldr	r3, [pc, #388]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056cc:	ee07 3a90 	vmov	s15, r3
 80056d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80056d8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800585c <HAL_RCC_GetSysClockFreq+0x2d4>
 80056dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80056f4:	e087      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	ee07 3a90 	vmov	s15, r3
 80056fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005700:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005860 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005708:	4b50      	ldr	r3, [pc, #320]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005710:	ee07 3a90 	vmov	s15, r3
 8005714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005718:	ed97 6a02 	vldr	s12, [r7, #8]
 800571c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800585c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005734:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005738:	e065      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	ee07 3a90 	vmov	s15, r3
 8005740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005744:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005864 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574c:	4b3f      	ldr	r3, [pc, #252]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005760:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800585c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005764:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005778:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800577c:	e043      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	ee07 3a90 	vmov	s15, r3
 8005784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005788:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005868 <HAL_RCC_GetSysClockFreq+0x2e0>
 800578c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005790:	4b2e      	ldr	r3, [pc, #184]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005798:	ee07 3a90 	vmov	s15, r3
 800579c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80057a4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800585c <HAL_RCC_GetSysClockFreq+0x2d4>
 80057a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057c0:	e021      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057cc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005864 <HAL_RCC_GetSysClockFreq+0x2dc>
 80057d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057dc:	ee07 3a90 	vmov	s15, r3
 80057e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80057e8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800585c <HAL_RCC_GetSysClockFreq+0x2d4>
 80057ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005800:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005804:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005806:	4b11      	ldr	r3, [pc, #68]	; (800584c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	0a5b      	lsrs	r3, r3, #9
 800580c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005810:	3301      	adds	r3, #1
 8005812:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800581e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800582a:	ee17 3a90 	vmov	r3, s15
 800582e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005830:	e005      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	61bb      	str	r3, [r7, #24]
    break;
 8005836:	e002      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800583a:	61bb      	str	r3, [r7, #24]
    break;
 800583c:	bf00      	nop
  }

  return sysclockfreq;
 800583e:	69bb      	ldr	r3, [r7, #24]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3724      	adds	r7, #36	; 0x24
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	58024400 	.word	0x58024400
 8005850:	03d09000 	.word	0x03d09000
 8005854:	003d0900 	.word	0x003d0900
 8005858:	016e3600 	.word	0x016e3600
 800585c:	46000000 	.word	0x46000000
 8005860:	4c742400 	.word	0x4c742400
 8005864:	4a742400 	.word	0x4a742400
 8005868:	4bb71b00 	.word	0x4bb71b00

0800586c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005874:	2300      	movs	r3, #0
 8005876:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005878:	2300      	movs	r3, #0
 800587a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d03d      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800588c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005890:	d013      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005896:	d802      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x40>
 800589c:	e01f      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x72>
 800589e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058a2:	d013      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80058a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058a8:	d01c      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80058aa:	e018      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ac:	4baf      	ldr	r3, [pc, #700]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4aae      	ldr	r2, [pc, #696]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058b8:	e015      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3304      	adds	r3, #4
 80058be:	2102      	movs	r1, #2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fec1 	bl	8006648 <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058ca:	e00c      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3324      	adds	r3, #36	; 0x24
 80058d0:	2102      	movs	r1, #2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 ff6a 	bl	80067ac <RCCEx_PLL3_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	75fb      	strb	r3, [r7, #23]
      break;
 80058e2:	e000      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80058e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d109      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058ec:	4b9f      	ldr	r3, [pc, #636]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f8:	499c      	ldr	r1, [pc, #624]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	650b      	str	r3, [r1, #80]	; 0x50
 80058fe:	e001      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d03d      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	2b04      	cmp	r3, #4
 8005916:	d826      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	08005935 	.word	0x08005935
 8005924:	08005943 	.word	0x08005943
 8005928:	08005955 	.word	0x08005955
 800592c:	0800596d 	.word	0x0800596d
 8005930:	0800596d 	.word	0x0800596d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005934:	4b8d      	ldr	r3, [pc, #564]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a8c      	ldr	r2, [pc, #560]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800593a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800593e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005940:	e015      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fe7d 	bl	8006648 <RCCEx_PLL2_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005952:	e00c      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f000 ff26 	bl	80067ac <RCCEx_PLL3_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005964:	e003      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
      break;
 800596a:	e000      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800596c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005974:	4b7d      	ldr	r3, [pc, #500]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005978:	f023 0207 	bic.w	r2, r3, #7
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005980:	497a      	ldr	r1, [pc, #488]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005982:	4313      	orrs	r3, r2
 8005984:	650b      	str	r3, [r1, #80]	; 0x50
 8005986:	e001      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005994:	2b00      	cmp	r3, #0
 8005996:	d03e      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	2b80      	cmp	r3, #128	; 0x80
 800599e:	d01c      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80059a0:	2b80      	cmp	r3, #128	; 0x80
 80059a2:	d804      	bhi.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x142>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d00d      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80059ac:	e01e      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x180>
 80059ae:	2bc0      	cmp	r3, #192	; 0xc0
 80059b0:	d01f      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80059b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b6:	d01e      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80059b8:	e018      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ba:	4b6c      	ldr	r3, [pc, #432]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	4a6b      	ldr	r2, [pc, #428]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059c6:	e017      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	2100      	movs	r1, #0
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fe3a 	bl	8006648 <RCCEx_PLL2_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059d8:	e00e      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3324      	adds	r3, #36	; 0x24
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fee3 	bl	80067ac <RCCEx_PLL3_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80059ea:	e005      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	75fb      	strb	r3, [r7, #23]
      break;
 80059f0:	e002      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80059f2:	bf00      	nop
 80059f4:	e000      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80059f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80059fe:	4b5b      	ldr	r3, [pc, #364]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0a:	4958      	ldr	r1, [pc, #352]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	650b      	str	r3, [r1, #80]	; 0x50
 8005a10:	e001      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
 8005a14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d044      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a2c:	d01f      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a32:	d805      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a3c:	d00e      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005a3e:	e01f      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005a40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a44:	d01f      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005a46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a4a:	d01e      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005a4c:	e018      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4e:	4b47      	ldr	r3, [pc, #284]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	4a46      	ldr	r2, [pc, #280]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a5a:	e017      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fdf0 	bl	8006648 <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a6c:	e00e      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3324      	adds	r3, #36	; 0x24
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fe99 	bl	80067ac <RCCEx_PLL3_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a7e:	e005      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	e002      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a92:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a96:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005aa0:	4932      	ldr	r1, [pc, #200]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	658b      	str	r3, [r1, #88]	; 0x58
 8005aa6:	e001      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d044      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac2:	d01f      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005ac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac8:	d805      	bhi.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005ace:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ad2:	d00e      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ad4:	e01f      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005ad6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ada:	d01f      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005adc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae0:	d01e      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005ae2:	e018      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae4:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4a20      	ldr	r2, [pc, #128]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005af0:	e017      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2100      	movs	r1, #0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fda5 	bl	8006648 <RCCEx_PLL2_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b02:	e00e      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3324      	adds	r3, #36	; 0x24
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fe4e 	bl	80067ac <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b14:	e005      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	75fb      	strb	r3, [r7, #23]
      break;
 8005b1a:	e002      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b36:	490d      	ldr	r1, [pc, #52]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	658b      	str	r3, [r1, #88]	; 0x58
 8005b3c:	e001      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
 8005b40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d035      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b52:	2b10      	cmp	r3, #16
 8005b54:	d00c      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005b56:	2b10      	cmp	r3, #16
 8005b58:	d802      	bhi.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01b      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005b5e:	e017      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d00c      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005b64:	2b30      	cmp	r3, #48	; 0x30
 8005b66:	d018      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005b68:	e012      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005b6a:	bf00      	nop
 8005b6c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b70:	4baf      	ldr	r3, [pc, #700]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4aae      	ldr	r2, [pc, #696]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b7c:	e00e      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	2102      	movs	r1, #2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fd5f 	bl	8006648 <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b8e:	e005      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
      break;
 8005b94:	e002      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ba2:	4ba3      	ldr	r3, [pc, #652]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bae:	49a0      	ldr	r1, [pc, #640]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bb4:	e001      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb6:	7dfb      	ldrb	r3, [r7, #23]
 8005bb8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d042      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bce:	d01f      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd4:	d805      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bde:	d00e      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005be0:	e01f      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005be6:	d01f      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bec:	d01e      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005bee:	e018      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf0:	4b8f      	ldr	r3, [pc, #572]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	4a8e      	ldr	r2, [pc, #568]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005bfc:	e017      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fd1f 	bl	8006648 <RCCEx_PLL2_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c0e:	e00e      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3324      	adds	r3, #36	; 0x24
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fdc8 	bl	80067ac <RCCEx_PLL3_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c20:	e005      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005c28:	bf00      	nop
 8005c2a:	e000      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c34:	4b7e      	ldr	r3, [pc, #504]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c40:	497b      	ldr	r1, [pc, #492]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	650b      	str	r3, [r1, #80]	; 0x50
 8005c46:	e001      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d042      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c60:	d01b      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005c62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c66:	d805      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d022      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c72:	e01b      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c78:	d01d      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c7e:	d01c      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005c80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c84:	d01b      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005c86:	e011      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fcda 	bl	8006648 <RCCEx_PLL2_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c98:	e012      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3324      	adds	r3, #36	; 0x24
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fd83 	bl	80067ac <RCCEx_PLL3_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005caa:	e009      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e004      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e002      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e000      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cc6:	4b5a      	ldr	r3, [pc, #360]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd2:	4957      	ldr	r1, [pc, #348]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	650b      	str	r3, [r1, #80]	; 0x50
 8005cd8:	e001      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d044      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf4:	d01b      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfa:	d805      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d022      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005d06:	e01b      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0c:	d01d      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d12:	d01c      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005d14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d18:	d01b      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005d1a:	e011      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	2101      	movs	r1, #1
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fc90 	bl	8006648 <RCCEx_PLL2_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d2c:	e012      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3324      	adds	r3, #36	; 0x24
 8005d32:	2101      	movs	r1, #1
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fd39 	bl	80067ac <RCCEx_PLL3_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d3e:	e009      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]
      break;
 8005d44:	e006      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005d46:	bf00      	nop
 8005d48:	e004      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d5a:	4b35      	ldr	r3, [pc, #212]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d68:	4931      	ldr	r1, [pc, #196]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	658b      	str	r3, [r1, #88]	; 0x58
 8005d6e:	e001      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02d      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d88:	d005      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d8e:	d009      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005d94:	e00f      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d96:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005da2:	e00c      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	2101      	movs	r1, #1
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fc4c 	bl	8006648 <RCCEx_PLL2_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005db4:	e003      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dba:	e000      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dc4:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd0:	4917      	ldr	r1, [pc, #92]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	650b      	str	r3, [r1, #80]	; 0x50
 8005dd6:	e001      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d035      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d81b      	bhi.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005df0:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005e35 	.word	0x08005e35
 8005dfc:	08005e09 	.word	0x08005e09
 8005e00:	08005e17 	.word	0x08005e17
 8005e04:	08005e35 	.word	0x08005e35
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	4a08      	ldr	r2, [pc, #32]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e14:	e00f      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fc13 	bl	8006648 <RCCEx_PLL2_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e26:	e006      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2c:	e003      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005e2e:	bf00      	nop
 8005e30:	58024400 	.word	0x58024400
      break;
 8005e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e3c:	4bba      	ldr	r3, [pc, #744]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e40:	f023 0203 	bic.w	r2, r3, #3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e48:	49b7      	ldr	r1, [pc, #732]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e4e:	e001      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8086 	beq.w	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e62:	4bb2      	ldr	r3, [pc, #712]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4ab1      	ldr	r2, [pc, #708]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e6e:	f7fc fb35 	bl	80024dc <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e74:	e009      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e76:	f7fc fb31 	bl	80024dc <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b64      	cmp	r3, #100	; 0x64
 8005e82:	d902      	bls.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	75fb      	strb	r3, [r7, #23]
        break;
 8005e88:	e005      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e8a:	4ba8      	ldr	r3, [pc, #672]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0ef      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d166      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e9c:	4ba2      	ldr	r3, [pc, #648]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ea6:	4053      	eors	r3, r2
 8005ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d013      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eb0:	4b9d      	ldr	r3, [pc, #628]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005eba:	4b9b      	ldr	r3, [pc, #620]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	4a9a      	ldr	r2, [pc, #616]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ec6:	4b98      	ldr	r3, [pc, #608]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	4a97      	ldr	r2, [pc, #604]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ed2:	4a95      	ldr	r2, [pc, #596]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee2:	d115      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fc fafa 	bl	80024dc <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eea:	e00b      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eec:	f7fc faf6 	bl	80024dc <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d902      	bls.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	75fb      	strb	r3, [r7, #23]
            break;
 8005f02:	e005      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f04:	4b88      	ldr	r3, [pc, #544]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0ed      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d126      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f24:	d10d      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005f26:	4b80      	ldr	r3, [pc, #512]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f34:	0919      	lsrs	r1, r3, #4
 8005f36:	4b7e      	ldr	r3, [pc, #504]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005f38:	400b      	ands	r3, r1
 8005f3a:	497b      	ldr	r1, [pc, #492]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	610b      	str	r3, [r1, #16]
 8005f40:	e005      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005f42:	4b79      	ldr	r3, [pc, #484]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	4a78      	ldr	r2, [pc, #480]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f4c:	6113      	str	r3, [r2, #16]
 8005f4e:	4b76      	ldr	r3, [pc, #472]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f5c:	4972      	ldr	r1, [pc, #456]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	670b      	str	r3, [r1, #112]	; 0x70
 8005f62:	e004      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
 8005f66:	75bb      	strb	r3, [r7, #22]
 8005f68:	e001      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
 8005f6c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d07d      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f7e:	2b28      	cmp	r3, #40	; 0x28
 8005f80:	d866      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08006057 	.word	0x08006057
 8005f8c:	08006051 	.word	0x08006051
 8005f90:	08006051 	.word	0x08006051
 8005f94:	08006051 	.word	0x08006051
 8005f98:	08006051 	.word	0x08006051
 8005f9c:	08006051 	.word	0x08006051
 8005fa0:	08006051 	.word	0x08006051
 8005fa4:	08006051 	.word	0x08006051
 8005fa8:	0800602d 	.word	0x0800602d
 8005fac:	08006051 	.word	0x08006051
 8005fb0:	08006051 	.word	0x08006051
 8005fb4:	08006051 	.word	0x08006051
 8005fb8:	08006051 	.word	0x08006051
 8005fbc:	08006051 	.word	0x08006051
 8005fc0:	08006051 	.word	0x08006051
 8005fc4:	08006051 	.word	0x08006051
 8005fc8:	0800603f 	.word	0x0800603f
 8005fcc:	08006051 	.word	0x08006051
 8005fd0:	08006051 	.word	0x08006051
 8005fd4:	08006051 	.word	0x08006051
 8005fd8:	08006051 	.word	0x08006051
 8005fdc:	08006051 	.word	0x08006051
 8005fe0:	08006051 	.word	0x08006051
 8005fe4:	08006051 	.word	0x08006051
 8005fe8:	08006057 	.word	0x08006057
 8005fec:	08006051 	.word	0x08006051
 8005ff0:	08006051 	.word	0x08006051
 8005ff4:	08006051 	.word	0x08006051
 8005ff8:	08006051 	.word	0x08006051
 8005ffc:	08006051 	.word	0x08006051
 8006000:	08006051 	.word	0x08006051
 8006004:	08006051 	.word	0x08006051
 8006008:	08006057 	.word	0x08006057
 800600c:	08006051 	.word	0x08006051
 8006010:	08006051 	.word	0x08006051
 8006014:	08006051 	.word	0x08006051
 8006018:	08006051 	.word	0x08006051
 800601c:	08006051 	.word	0x08006051
 8006020:	08006051 	.word	0x08006051
 8006024:	08006051 	.word	0x08006051
 8006028:	08006057 	.word	0x08006057
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	2101      	movs	r1, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fb08 	bl	8006648 <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800603c:	e00c      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3324      	adds	r3, #36	; 0x24
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fbb1 	bl	80067ac <RCCEx_PLL3_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800604e:	e003      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
      break;
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800605e:	4b32      	ldr	r3, [pc, #200]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800606a:	492f      	ldr	r1, [pc, #188]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800606c:	4313      	orrs	r3, r2
 800606e:	654b      	str	r3, [r1, #84]	; 0x54
 8006070:	e001      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d037      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006086:	2b05      	cmp	r3, #5
 8006088:	d820      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060d3 	.word	0x080060d3
 8006094:	080060a9 	.word	0x080060a9
 8006098:	080060bb 	.word	0x080060bb
 800609c:	080060d3 	.word	0x080060d3
 80060a0:	080060d3 	.word	0x080060d3
 80060a4:	080060d3 	.word	0x080060d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	2101      	movs	r1, #1
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 faca 	bl	8006648 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060b8:	e00c      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3324      	adds	r3, #36	; 0x24
 80060be:	2101      	movs	r1, #1
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fb73 	bl	80067ac <RCCEx_PLL3_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80060ca:	e003      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
      break;
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80060d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	f023 0207 	bic.w	r2, r3, #7
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e6:	4910      	ldr	r1, [pc, #64]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	654b      	str	r3, [r1, #84]	; 0x54
 80060ec:	e001      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d040      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006104:	2b05      	cmp	r3, #5
 8006106:	d827      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006108:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	0800615f 	.word	0x0800615f
 8006114:	08006135 	.word	0x08006135
 8006118:	08006147 	.word	0x08006147
 800611c:	0800615f 	.word	0x0800615f
 8006120:	0800615f 	.word	0x0800615f
 8006124:	0800615f 	.word	0x0800615f
 8006128:	58024400 	.word	0x58024400
 800612c:	58024800 	.word	0x58024800
 8006130:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	2101      	movs	r1, #1
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fa84 	bl	8006648 <RCCEx_PLL2_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006144:	e00c      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3324      	adds	r3, #36	; 0x24
 800614a:	2101      	movs	r1, #1
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fb2d 	bl	80067ac <RCCEx_PLL3_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006156:	e003      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	75fb      	strb	r3, [r7, #23]
      break;
 800615c:	e000      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800615e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006166:	4bb2      	ldr	r3, [pc, #712]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	f023 0207 	bic.w	r2, r3, #7
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	49ae      	ldr	r1, [pc, #696]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006176:	4313      	orrs	r3, r2
 8006178:	658b      	str	r3, [r1, #88]	; 0x58
 800617a:	e001      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d044      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006196:	d01b      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619c:	d805      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d022      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80061a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061a6:	d00a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x952>
 80061a8:	e01b      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80061aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ae:	d01d      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x980>
 80061b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061b4:	d01c      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80061b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061ba:	d01b      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80061bc:	e011      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3304      	adds	r3, #4
 80061c2:	2100      	movs	r1, #0
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fa3f 	bl	8006648 <RCCEx_PLL2_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80061ce:	e012      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3324      	adds	r3, #36	; 0x24
 80061d4:	2102      	movs	r1, #2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fae8 	bl	80067ac <RCCEx_PLL3_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80061e0:	e009      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]
      break;
 80061e6:	e006      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80061e8:	bf00      	nop
 80061ea:	e004      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80061ec:	bf00      	nop
 80061ee:	e002      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80061f0:	bf00      	nop
 80061f2:	e000      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80061f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061fc:	4b8c      	ldr	r3, [pc, #560]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80061fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006200:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800620a:	4989      	ldr	r1, [pc, #548]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800620c:	4313      	orrs	r3, r2
 800620e:	654b      	str	r3, [r1, #84]	; 0x54
 8006210:	e001      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d044      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622c:	d01b      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800622e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006232:	d805      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d022      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d00a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800623e:	e01b      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006244:	d01d      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006246:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800624a:	d01c      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800624c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006250:	d01b      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006252:	e011      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f000 f9f4 	bl	8006648 <RCCEx_PLL2_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006264:	e012      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3324      	adds	r3, #36	; 0x24
 800626a:	2102      	movs	r1, #2
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fa9d 	bl	80067ac <RCCEx_PLL3_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006276:	e009      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	75fb      	strb	r3, [r7, #23]
      break;
 800627c:	e006      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800627e:	bf00      	nop
 8006280:	e004      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006282:	bf00      	nop
 8006284:	e002      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006286:	bf00      	nop
 8006288:	e000      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800628a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006292:	4b67      	ldr	r3, [pc, #412]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006296:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062a0:	4963      	ldr	r1, [pc, #396]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	658b      	str	r3, [r1, #88]	; 0x58
 80062a6:	e001      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d044      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c2:	d01b      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80062c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c8:	d805      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d022      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d2:	d00a      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80062d4:	e01b      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80062d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062da:	d01d      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80062dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062e0:	d01c      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80062e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062e6:	d01b      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80062e8:	e011      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f9a9 	bl	8006648 <RCCEx_PLL2_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062fa:	e012      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3324      	adds	r3, #36	; 0x24
 8006300:	2102      	movs	r1, #2
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fa52 	bl	80067ac <RCCEx_PLL3_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800630c:	e009      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	75fb      	strb	r3, [r7, #23]
      break;
 8006312:	e006      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006314:	bf00      	nop
 8006316:	e004      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006318:	bf00      	nop
 800631a:	e002      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800631c:	bf00      	nop
 800631e:	e000      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006328:	4b41      	ldr	r3, [pc, #260]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006336:	493e      	ldr	r1, [pc, #248]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006338:	4313      	orrs	r3, r2
 800633a:	658b      	str	r3, [r1, #88]	; 0x58
 800633c:	e001      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006358:	d10a      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3324      	adds	r3, #36	; 0x24
 800635e:	2102      	movs	r1, #2
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fa23 	bl	80067ac <RCCEx_PLL3_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006370:	4b2f      	ldr	r3, [pc, #188]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637e:	492c      	ldr	r1, [pc, #176]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006380:	4313      	orrs	r3, r2
 8006382:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0310 	and.w	r3, r3, #16
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01a      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800639a:	d10a      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3324      	adds	r3, #36	; 0x24
 80063a0:	2102      	movs	r1, #2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fa02 	bl	80067ac <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063b2:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c0:	491b      	ldr	r1, [pc, #108]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d032      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063dc:	d00d      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80063de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063e2:	d016      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d111      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3304      	adds	r3, #4
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f92a 	bl	8006648 <RCCEx_PLL2_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063f8:	e00c      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3324      	adds	r3, #36	; 0x24
 80063fe:	2102      	movs	r1, #2
 8006400:	4618      	mov	r0, r3
 8006402:	f000 f9d3 	bl	80067ac <RCCEx_PLL3_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800640a:	e003      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	75fb      	strb	r3, [r7, #23]
      break;
 8006410:	e000      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10c      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006428:	4901      	ldr	r1, [pc, #4]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800642a:	4313      	orrs	r3, r2
 800642c:	658b      	str	r3, [r1, #88]	; 0x58
 800642e:	e003      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d02f      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800644a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800644e:	d00c      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006450:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006454:	d015      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645a:	d10f      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645c:	4b79      	ldr	r3, [pc, #484]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	4a78      	ldr	r2, [pc, #480]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006468:	e00c      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3324      	adds	r3, #36	; 0x24
 800646e:	2101      	movs	r1, #1
 8006470:	4618      	mov	r0, r3
 8006472:	f000 f99b 	bl	80067ac <RCCEx_PLL3_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800647a:	e003      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	75fb      	strb	r3, [r7, #23]
      break;
 8006480:	e000      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800648a:	4b6e      	ldr	r3, [pc, #440]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006498:	496a      	ldr	r1, [pc, #424]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800649a:	4313      	orrs	r3, r2
 800649c:	654b      	str	r3, [r1, #84]	; 0x54
 800649e:	e001      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d029      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80064b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064bc:	d007      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80064be:	e00f      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c0:	4b60      	ldr	r3, [pc, #384]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a5f      	ldr	r2, [pc, #380]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80064c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064cc:	e00b      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3304      	adds	r3, #4
 80064d2:	2102      	movs	r1, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 f8b7 	bl	8006648 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064de:	e002      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
      break;
 80064e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064ec:	4b55      	ldr	r3, [pc, #340]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80064ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f8:	4952      	ldr	r1, [pc, #328]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064fe:	e001      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3324      	adds	r3, #36	; 0x24
 8006514:	2102      	movs	r1, #2
 8006516:	4618      	mov	r0, r3
 8006518:	f000 f948 	bl	80067ac <RCCEx_PLL3_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d02f      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800653a:	d00c      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800653c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006540:	d802      	bhi.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d011      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006546:	e00d      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800654c:	d00f      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800654e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006552:	d00e      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006554:	e006      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006556:	4b3b      	ldr	r3, [pc, #236]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	4a3a      	ldr	r2, [pc, #232]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800655c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006562:	e007      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	75fb      	strb	r3, [r7, #23]
      break;
 8006568:	e004      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800657a:	4b32      	ldr	r3, [pc, #200]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006586:	492f      	ldr	r1, [pc, #188]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006588:	4313      	orrs	r3, r2
 800658a:	654b      	str	r3, [r1, #84]	; 0x54
 800658c:	e001      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d008      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800659e:	4b29      	ldr	r3, [pc, #164]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	4926      	ldr	r1, [pc, #152]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065bc:	4b21      	ldr	r3, [pc, #132]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065ca:	491e      	ldr	r1, [pc, #120]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065dc:	4b19      	ldr	r3, [pc, #100]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e8:	4916      	ldr	r1, [pc, #88]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	4a11      	ldr	r2, [pc, #68]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006600:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006604:	6113      	str	r3, [r2, #16]
 8006606:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006610:	490c      	ldr	r1, [pc, #48]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006612:	4313      	orrs	r3, r2
 8006614:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	da08      	bge.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662a:	4906      	ldr	r1, [pc, #24]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800662c:	4313      	orrs	r3, r2
 800662e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006630:	7dbb      	ldrb	r3, [r7, #22]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	e000      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	58024400 	.word	0x58024400

08006648 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006656:	4b53      	ldr	r3, [pc, #332]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	2b03      	cmp	r3, #3
 8006660:	d101      	bne.n	8006666 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e099      	b.n	800679a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006666:	4b4f      	ldr	r3, [pc, #316]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a4e      	ldr	r2, [pc, #312]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800666c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006672:	f7fb ff33 	bl	80024dc <HAL_GetTick>
 8006676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006678:	e008      	b.n	800668c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800667a:	f7fb ff2f 	bl	80024dc <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e086      	b.n	800679a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800668c:	4b45      	ldr	r3, [pc, #276]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f0      	bne.n	800667a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006698:	4b42      	ldr	r3, [pc, #264]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	031b      	lsls	r3, r3, #12
 80066a6:	493f      	ldr	r1, [pc, #252]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	628b      	str	r3, [r1, #40]	; 0x28
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	025b      	lsls	r3, r3, #9
 80066be:	b29b      	uxth	r3, r3
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	061b      	lsls	r3, r3, #24
 80066d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066dc:	4931      	ldr	r1, [pc, #196]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80066e2:	4b30      	ldr	r3, [pc, #192]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	492d      	ldr	r1, [pc, #180]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066f4:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	f023 0220 	bic.w	r2, r3, #32
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	4928      	ldr	r1, [pc, #160]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006702:	4313      	orrs	r3, r2
 8006704:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006706:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	4a26      	ldr	r2, [pc, #152]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800670c:	f023 0310 	bic.w	r3, r3, #16
 8006710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006712:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <RCCEx_PLL2_Config+0x160>)
 8006718:	4013      	ands	r3, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	69d2      	ldr	r2, [r2, #28]
 800671e:	00d2      	lsls	r2, r2, #3
 8006720:	4920      	ldr	r1, [pc, #128]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006722:	4313      	orrs	r3, r2
 8006724:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006726:	4b1f      	ldr	r3, [pc, #124]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800672c:	f043 0310 	orr.w	r3, r3, #16
 8006730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006738:	4b1a      	ldr	r3, [pc, #104]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800673e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006744:	e00f      	b.n	8006766 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d106      	bne.n	800675a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800674c:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	4a14      	ldr	r2, [pc, #80]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006758:	e005      	b.n	8006766 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800675a:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	4a11      	ldr	r2, [pc, #68]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006764:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006766:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a0e      	ldr	r2, [pc, #56]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800676c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006772:	f7fb feb3 	bl	80024dc <HAL_GetTick>
 8006776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006778:	e008      	b.n	800678c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800677a:	f7fb feaf 	bl	80024dc <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e006      	b.n	800679a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <RCCEx_PLL2_Config+0x15c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0f0      	beq.n	800677a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	58024400 	.word	0x58024400
 80067a8:	ffff0007 	.word	0xffff0007

080067ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067ba:	4b53      	ldr	r3, [pc, #332]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d101      	bne.n	80067ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e099      	b.n	80068fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80067ca:	4b4f      	ldr	r3, [pc, #316]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a4e      	ldr	r2, [pc, #312]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80067d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d6:	f7fb fe81 	bl	80024dc <HAL_GetTick>
 80067da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067dc:	e008      	b.n	80067f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80067de:	f7fb fe7d 	bl	80024dc <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e086      	b.n	80068fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067f0:	4b45      	ldr	r3, [pc, #276]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f0      	bne.n	80067de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067fc:	4b42      	ldr	r3, [pc, #264]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	051b      	lsls	r3, r3, #20
 800680a:	493f      	ldr	r1, [pc, #252]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 800680c:	4313      	orrs	r3, r2
 800680e:	628b      	str	r3, [r1, #40]	; 0x28
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	3b01      	subs	r3, #1
 8006816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	3b01      	subs	r3, #1
 8006820:	025b      	lsls	r3, r3, #9
 8006822:	b29b      	uxth	r3, r3
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	3b01      	subs	r3, #1
 800682c:	041b      	lsls	r3, r3, #16
 800682e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	3b01      	subs	r3, #1
 800683a:	061b      	lsls	r3, r3, #24
 800683c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006840:	4931      	ldr	r1, [pc, #196]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 8006842:	4313      	orrs	r3, r2
 8006844:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006846:	4b30      	ldr	r3, [pc, #192]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	492d      	ldr	r1, [pc, #180]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 8006854:	4313      	orrs	r3, r2
 8006856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006858:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	4928      	ldr	r1, [pc, #160]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 8006866:	4313      	orrs	r3, r2
 8006868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800686a:	4b27      	ldr	r3, [pc, #156]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	4a26      	ldr	r2, [pc, #152]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 8006870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006876:	4b24      	ldr	r3, [pc, #144]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 8006878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <RCCEx_PLL3_Config+0x160>)
 800687c:	4013      	ands	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	69d2      	ldr	r2, [r2, #28]
 8006882:	00d2      	lsls	r2, r2, #3
 8006884:	4920      	ldr	r1, [pc, #128]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 8006886:	4313      	orrs	r3, r2
 8006888:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800688a:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 8006890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800689c:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	4a19      	ldr	r2, [pc, #100]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80068a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068a8:	e00f      	b.n	80068ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d106      	bne.n	80068be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80068b0:	4b15      	ldr	r3, [pc, #84]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	4a14      	ldr	r2, [pc, #80]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80068b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068bc:	e005      	b.n	80068ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80068be:	4b12      	ldr	r3, [pc, #72]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	4a11      	ldr	r2, [pc, #68]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80068c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80068ca:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a0e      	ldr	r2, [pc, #56]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80068d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d6:	f7fb fe01 	bl	80024dc <HAL_GetTick>
 80068da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068dc:	e008      	b.n	80068f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80068de:	f7fb fdfd 	bl	80024dc <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e006      	b.n	80068fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <RCCEx_PLL3_Config+0x15c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0f0      	beq.n	80068de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	ffff0007 	.word	0xffff0007

08006910 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e0e2      	b.n	8006aec <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a70      	ldr	r2, [pc, #448]	; (8006af4 <HAL_SPI_Init+0x1e4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00f      	beq.n	8006956 <HAL_SPI_Init+0x46>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a6f      	ldr	r2, [pc, #444]	; (8006af8 <HAL_SPI_Init+0x1e8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00a      	beq.n	8006956 <HAL_SPI_Init+0x46>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a6d      	ldr	r2, [pc, #436]	; (8006afc <HAL_SPI_Init+0x1ec>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d005      	beq.n	8006956 <HAL_SPI_Init+0x46>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b0f      	cmp	r3, #15
 8006950:	d901      	bls.n	8006956 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0ca      	b.n	8006aec <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fa94 	bl	8007e84 <SPI_GetPacketSize>
 800695c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a64      	ldr	r2, [pc, #400]	; (8006af4 <HAL_SPI_Init+0x1e4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00c      	beq.n	8006982 <HAL_SPI_Init+0x72>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a62      	ldr	r2, [pc, #392]	; (8006af8 <HAL_SPI_Init+0x1e8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <HAL_SPI_Init+0x72>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a61      	ldr	r2, [pc, #388]	; (8006afc <HAL_SPI_Init+0x1ec>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d002      	beq.n	8006982 <HAL_SPI_Init+0x72>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b08      	cmp	r3, #8
 8006980:	d811      	bhi.n	80069a6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006986:	4a5b      	ldr	r2, [pc, #364]	; (8006af4 <HAL_SPI_Init+0x1e4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d009      	beq.n	80069a0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a59      	ldr	r2, [pc, #356]	; (8006af8 <HAL_SPI_Init+0x1e8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d004      	beq.n	80069a0 <HAL_SPI_Init+0x90>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a58      	ldr	r2, [pc, #352]	; (8006afc <HAL_SPI_Init+0x1ec>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d104      	bne.n	80069aa <HAL_SPI_Init+0x9a>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b10      	cmp	r3, #16
 80069a4:	d901      	bls.n	80069aa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e0a0      	b.n	8006aec <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fb fa9c 	bl	8001efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0201 	bic.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069e4:	d110      	bne.n	8006a08 <HAL_SPI_Init+0xf8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ee:	d10b      	bne.n	8006a08 <HAL_SPI_Init+0xf8>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d107      	bne.n	8006a08 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a06:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	431a      	orrs	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1a:	ea42 0103 	orr.w	r1, r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a68:	ea42 0103 	orr.w	r1, r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d113      	bne.n	8006aa8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a92:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006aa6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40013000 	.word	0x40013000
 8006af8:	40003800 	.word	0x40003800
 8006afc:	40003c00 	.word	0x40003c00

08006b00 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3320      	adds	r3, #32
 8006b16:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_SPI_Transmit+0x2a>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e1d7      	b.n	8006eda <HAL_SPI_Transmit+0x3da>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b32:	f7fb fcd3 	bl	80024dc <HAL_GetTick>
 8006b36:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d007      	beq.n	8006b54 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006b44:	2302      	movs	r3, #2
 8006b46:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006b50:	7efb      	ldrb	r3, [r7, #27]
 8006b52:	e1c2      	b.n	8006eda <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_SPI_Transmit+0x60>
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d107      	bne.n	8006b70 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006b6c:	7efb      	ldrb	r3, [r7, #27]
 8006b6e:	e1b4      	b.n	8006eda <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2203      	movs	r2, #3
 8006b74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	88fa      	ldrh	r2, [r7, #6]
 8006b92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006bc0:	d107      	bne.n	8006bd2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	4b96      	ldr	r3, [pc, #600]	; (8006e34 <HAL_SPI_Transmit+0x334>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	88f9      	ldrh	r1, [r7, #6]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	430b      	orrs	r3, r1
 8006be4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0201 	orr.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bfe:	d107      	bne.n	8006c10 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b0f      	cmp	r3, #15
 8006c16:	d947      	bls.n	8006ca8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006c18:	e03f      	b.n	8006c9a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d114      	bne.n	8006c52 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c38:	1d1a      	adds	r2, r3, #4
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006c50:	e023      	b.n	8006c9a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c52:	f7fb fc43 	bl	80024dc <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d803      	bhi.n	8006c6a <HAL_SPI_Transmit+0x16a>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c68:	d102      	bne.n	8006c70 <HAL_SPI_Transmit+0x170>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d114      	bne.n	8006c9a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f001 f839 	bl	8007ce8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e11f      	b.n	8006eda <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1b9      	bne.n	8006c1a <HAL_SPI_Transmit+0x11a>
 8006ca6:	e0f2      	b.n	8006e8e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b07      	cmp	r3, #7
 8006cae:	f240 80e7 	bls.w	8006e80 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006cb2:	e05d      	b.n	8006d70 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d132      	bne.n	8006d28 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d918      	bls.n	8006d00 <HAL_SPI_Transmit+0x200>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d014      	beq.n	8006d00 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6812      	ldr	r2, [r2, #0]
 8006ce0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce6:	1d1a      	adds	r2, r3, #4
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b02      	subs	r3, #2
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006cfe:	e037      	b.n	8006d70 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d04:	881a      	ldrh	r2, [r3, #0]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0e:	1c9a      	adds	r2, r3, #2
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006d26:	e023      	b.n	8006d70 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d28:	f7fb fbd8 	bl	80024dc <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d803      	bhi.n	8006d40 <HAL_SPI_Transmit+0x240>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d3e:	d102      	bne.n	8006d46 <HAL_SPI_Transmit+0x246>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d114      	bne.n	8006d70 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 ffce 	bl	8007ce8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0b4      	b.n	8006eda <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d19b      	bne.n	8006cb4 <HAL_SPI_Transmit+0x1b4>
 8006d7c:	e087      	b.n	8006e8e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d155      	bne.n	8006e38 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d918      	bls.n	8006dca <HAL_SPI_Transmit+0x2ca>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	d914      	bls.n	8006dca <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db0:	1d1a      	adds	r2, r3, #4
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b04      	subs	r3, #4
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006dc8:	e05a      	b.n	8006e80 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d917      	bls.n	8006e06 <HAL_SPI_Transmit+0x306>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d013      	beq.n	8006e06 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de2:	881a      	ldrh	r2, [r3, #0]
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dec:	1c9a      	adds	r2, r3, #2
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3b02      	subs	r3, #2
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006e04:	e03c      	b.n	8006e80 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3320      	adds	r3, #32
 8006e10:	7812      	ldrb	r2, [r2, #0]
 8006e12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006e30:	e026      	b.n	8006e80 <HAL_SPI_Transmit+0x380>
 8006e32:	bf00      	nop
 8006e34:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e38:	f7fb fb50 	bl	80024dc <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d803      	bhi.n	8006e50 <HAL_SPI_Transmit+0x350>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e4e:	d102      	bne.n	8006e56 <HAL_SPI_Transmit+0x356>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d114      	bne.n	8006e80 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 ff46 	bl	8007ce8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e02c      	b.n	8006eda <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f47f af78 	bne.w	8006d7e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2200      	movs	r2, #0
 8006e96:	2108      	movs	r1, #8
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 ffc5 	bl	8007e28 <SPI_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eaa:	f043 0220 	orr.w	r2, r3, #32
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 ff17 	bl	8007ce8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006ed8:	7efb      	ldrb	r3, [r7, #27]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop

08006ee4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08a      	sub	sp, #40	; 0x28
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3330      	adds	r3, #48	; 0x30
 8006efe:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f08:	d112      	bne.n	8006f30 <HAL_SPI_Receive+0x4c>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10e      	bne.n	8006f30 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2204      	movs	r2, #4
 8006f16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f1a:	88fa      	ldrh	r2, [r7, #6]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	4613      	mov	r3, r2
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 f9ce 	bl	80072c8 <HAL_SPI_TransmitReceive>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	e1c7      	b.n	80072c0 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <HAL_SPI_Receive+0x5a>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e1c0      	b.n	80072c0 <HAL_SPI_Receive+0x3dc>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f46:	f7fb fac9 	bl	80024dc <HAL_GetTick>
 8006f4a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d007      	beq.n	8006f68 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006f64:	7ffb      	ldrb	r3, [r7, #31]
 8006f66:	e1ab      	b.n	80072c0 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_SPI_Receive+0x90>
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d107      	bne.n	8006f84 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006f80:	7ffb      	ldrb	r3, [r7, #31]
 8006f82:	e19d      	b.n	80072c0 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2204      	movs	r2, #4
 8006f88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	88fa      	ldrh	r2, [r7, #6]
 8006fa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006fd4:	d107      	bne.n	8006fe6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	4b94      	ldr	r3, [pc, #592]	; (8007240 <HAL_SPI_Receive+0x35c>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	88f9      	ldrh	r1, [r7, #6]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007012:	d107      	bne.n	8007024 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007022:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	2b0f      	cmp	r3, #15
 800702a:	d948      	bls.n	80070be <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800702c:	e040      	b.n	80070b0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	695a      	ldr	r2, [r3, #20]
 8007034:	f248 0308 	movw	r3, #32776	; 0x8008
 8007038:	4013      	ands	r3, r2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d014      	beq.n	8007068 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007046:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007048:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800704e:	1d1a      	adds	r2, r3, #4
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007066:	e023      	b.n	80070b0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007068:	f7fb fa38 	bl	80024dc <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d803      	bhi.n	8007080 <HAL_SPI_Receive+0x19c>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800707e:	d102      	bne.n	8007086 <HAL_SPI_Receive+0x1a2>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d114      	bne.n	80070b0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 fe2e 	bl	8007ce8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e107      	b.n	80072c0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1b8      	bne.n	800702e <HAL_SPI_Receive+0x14a>
 80070bc:	e0ed      	b.n	800729a <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	2b07      	cmp	r3, #7
 80070c4:	f240 80e2 	bls.w	800728c <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80070c8:	e05b      	b.n	8007182 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d030      	beq.n	800713a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d014      	beq.n	8007110 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80070f0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b02      	subs	r3, #2
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800710e:	e038      	b.n	8007182 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	8812      	ldrh	r2, [r2, #0]
 8007118:	b292      	uxth	r2, r2
 800711a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007120:	1c9a      	adds	r2, r3, #2
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007138:	e023      	b.n	8007182 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800713a:	f7fb f9cf 	bl	80024dc <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d803      	bhi.n	8007152 <HAL_SPI_Receive+0x26e>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007150:	d102      	bne.n	8007158 <HAL_SPI_Receive+0x274>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d114      	bne.n	8007182 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fdc5 	bl	8007ce8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800716c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e09e      	b.n	80072c0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d19d      	bne.n	80070ca <HAL_SPI_Receive+0x1e6>
 800718e:	e084      	b.n	800729a <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d052      	beq.n	8007244 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d014      	beq.n	80071d6 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80071b6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071bc:	1d1a      	adds	r2, r3, #4
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b04      	subs	r3, #4
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80071d4:	e05a      	b.n	800728c <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80071e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071e4:	d914      	bls.n	8007210 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	8812      	ldrh	r2, [r2, #0]
 80071ee:	b292      	uxth	r2, r2
 80071f0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f6:	1c9a      	adds	r2, r3, #2
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b02      	subs	r3, #2
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800720e:	e03d      	b.n	800728c <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800721c:	7812      	ldrb	r2, [r2, #0]
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007232:	b29b      	uxth	r3, r3
 8007234:	3b01      	subs	r3, #1
 8007236:	b29a      	uxth	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800723e:	e025      	b.n	800728c <HAL_SPI_Receive+0x3a8>
 8007240:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007244:	f7fb f94a 	bl	80024dc <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d803      	bhi.n	800725c <HAL_SPI_Receive+0x378>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800725a:	d102      	bne.n	8007262 <HAL_SPI_Receive+0x37e>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d114      	bne.n	800728c <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fd40 	bl	8007ce8 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007276:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e019      	b.n	80072c0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	f47f af7b 	bne.w	8007190 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 fd24 	bl	8007ce8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 80072be:	7ffb      	ldrb	r3, [r7, #31]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08e      	sub	sp, #56	; 0x38
 80072cc:	af02      	add	r7, sp, #8
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3320      	adds	r3, #32
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3330      	adds	r3, #48	; 0x30
 80072ea:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x32>
 80072f6:	2302      	movs	r3, #2
 80072f8:	e2ce      	b.n	8007898 <HAL_SPI_TransmitReceive+0x5d0>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007302:	f7fb f8eb 	bl	80024dc <HAL_GetTick>
 8007306:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8007308:	887b      	ldrh	r3, [r7, #2]
 800730a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800730c:	887b      	ldrh	r3, [r7, #2]
 800730e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007316:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800731e:	7efb      	ldrb	r3, [r7, #27]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d014      	beq.n	800734e <HAL_SPI_TransmitReceive+0x86>
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800732a:	d106      	bne.n	800733a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d102      	bne.n	800733a <HAL_SPI_TransmitReceive+0x72>
 8007334:	7efb      	ldrb	r3, [r7, #27]
 8007336:	2b04      	cmp	r3, #4
 8007338:	d009      	beq.n	800734e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800733a:	2302      	movs	r3, #2
 800733c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007348:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800734c:	e2a4      	b.n	8007898 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_SPI_TransmitReceive+0x98>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_SPI_TransmitReceive+0x98>
 800735a:	887b      	ldrh	r3, [r7, #2]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d109      	bne.n	8007374 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800736e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007372:	e291      	b.n	8007898 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b04      	cmp	r3, #4
 800737e:	d003      	beq.n	8007388 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2205      	movs	r2, #5
 8007384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	887a      	ldrh	r2, [r7, #2]
 800739a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	887a      	ldrh	r2, [r7, #2]
 80073a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	887a      	ldrh	r2, [r7, #2]
 80073b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	887a      	ldrh	r2, [r7, #2]
 80073b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	4b9f      	ldr	r3, [pc, #636]	; (800764c <HAL_SPI_TransmitReceive+0x384>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	8879      	ldrh	r1, [r7, #2]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	430b      	orrs	r3, r1
 80073da:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073f4:	d107      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007404:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2b0f      	cmp	r3, #15
 800740c:	d970      	bls.n	80074f0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800740e:	e068      	b.n	80074e2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b02      	cmp	r3, #2
 800741c:	d11a      	bne.n	8007454 <HAL_SPI_TransmitReceive+0x18c>
 800741e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007420:	2b00      	cmp	r3, #0
 8007422:	d017      	beq.n	8007454 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007434:	1d1a      	adds	r2, r3, #4
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007452:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695a      	ldr	r2, [r3, #20]
 800745a:	f248 0308 	movw	r3, #32776	; 0x8008
 800745e:	4013      	ands	r3, r2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01a      	beq.n	800749a <HAL_SPI_TransmitReceive+0x1d2>
 8007464:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d017      	beq.n	800749a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007472:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007474:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007498:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800749a:	f7fb f81f 	bl	80024dc <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d803      	bhi.n	80074b2 <HAL_SPI_TransmitReceive+0x1ea>
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b0:	d102      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x1f0>
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d114      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fc15 	bl	8007ce8 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e1da      	b.n	8007898 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80074e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d193      	bne.n	8007410 <HAL_SPI_TransmitReceive+0x148>
 80074e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d190      	bne.n	8007410 <HAL_SPI_TransmitReceive+0x148>
 80074ee:	e1ac      	b.n	800784a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	2b07      	cmp	r3, #7
 80074f6:	f240 81a0 	bls.w	800783a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80074fa:	e0a9      	b.n	8007650 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d139      	bne.n	800757e <HAL_SPI_TransmitReceive+0x2b6>
 800750a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800750c:	2b00      	cmp	r3, #0
 800750e:	d036      	beq.n	800757e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007512:	2b01      	cmp	r3, #1
 8007514:	d91c      	bls.n	8007550 <HAL_SPI_TransmitReceive+0x288>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d018      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6812      	ldr	r2, [r2, #0]
 8007528:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800752e:	1d1a      	adds	r2, r3, #4
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b02      	subs	r3, #2
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800754c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800754e:	e016      	b.n	800757e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007554:	881a      	ldrh	r2, [r3, #0]
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755e:	1c9a      	adds	r2, r3, #2
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800757c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d03a      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x33a>
 800758c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d037      	beq.n	8007602 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d018      	beq.n	80075d2 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075aa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b0:	1d1a      	adds	r2, r3, #4
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b02      	subs	r3, #2
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80075ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80075d0:	e017      	b.n	8007602 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d6:	6a3a      	ldr	r2, [r7, #32]
 80075d8:	8812      	ldrh	r2, [r2, #0]
 80075da:	b292      	uxth	r2, r2
 80075dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e2:	1c9a      	adds	r2, r3, #2
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007600:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007602:	f7fa ff6b 	bl	80024dc <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800760e:	429a      	cmp	r2, r3
 8007610:	d803      	bhi.n	800761a <HAL_SPI_TransmitReceive+0x352>
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007618:	d102      	bne.n	8007620 <HAL_SPI_TransmitReceive+0x358>
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	d117      	bne.n	8007650 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fb61 	bl	8007ce8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007634:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e126      	b.n	8007898 <HAL_SPI_TransmitReceive+0x5d0>
 800764a:	bf00      	nop
 800764c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007650:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007652:	2b00      	cmp	r3, #0
 8007654:	f47f af52 	bne.w	80074fc <HAL_SPI_TransmitReceive+0x234>
 8007658:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800765a:	2b00      	cmp	r3, #0
 800765c:	f47f af4e 	bne.w	80074fc <HAL_SPI_TransmitReceive+0x234>
 8007660:	e0f3      	b.n	800784a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b02      	cmp	r3, #2
 800766e:	d15a      	bne.n	8007726 <HAL_SPI_TransmitReceive+0x45e>
 8007670:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007672:	2b00      	cmp	r3, #0
 8007674:	d057      	beq.n	8007726 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007678:	2b03      	cmp	r3, #3
 800767a:	d91c      	bls.n	80076b6 <HAL_SPI_TransmitReceive+0x3ee>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d918      	bls.n	80076b6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007694:	1d1a      	adds	r2, r3, #4
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b04      	subs	r3, #4
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80076b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80076b4:	e037      	b.n	8007726 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80076b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d91b      	bls.n	80076f4 <HAL_SPI_TransmitReceive+0x42c>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d017      	beq.n	80076f4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c8:	881a      	ldrh	r2, [r3, #0]
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d2:	1c9a      	adds	r2, r3, #2
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b02      	subs	r3, #2
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80076f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80076f2:	e018      	b.n	8007726 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3320      	adds	r3, #32
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007724:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d05e      	beq.n	80077f2 <HAL_SPI_TransmitReceive+0x52a>
 8007734:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d05b      	beq.n	80077f2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d018      	beq.n	800777a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007750:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007752:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b04      	subs	r3, #4
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007776:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007778:	e03b      	b.n	80077f2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007788:	d918      	bls.n	80077bc <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800778e:	6a3a      	ldr	r2, [r7, #32]
 8007790:	8812      	ldrh	r2, [r2, #0]
 8007792:	b292      	uxth	r2, r2
 8007794:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800779a:	1c9a      	adds	r2, r3, #2
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b02      	subs	r3, #2
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80077ba:	e01a      	b.n	80077f2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c8:	7812      	ldrb	r2, [r2, #0]
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077f2:	f7fa fe73 	bl	80024dc <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077fe:	429a      	cmp	r2, r3
 8007800:	d803      	bhi.n	800780a <HAL_SPI_TransmitReceive+0x542>
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007808:	d102      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x548>
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	2b00      	cmp	r3, #0
 800780e:	d114      	bne.n	800783a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 fa69 	bl	8007ce8 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007824:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e02e      	b.n	8007898 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800783a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800783c:	2b00      	cmp	r3, #0
 800783e:	f47f af10 	bne.w	8007662 <HAL_SPI_TransmitReceive+0x39a>
 8007842:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007844:	2b00      	cmp	r3, #0
 8007846:	f47f af0c 	bne.w	8007662 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2200      	movs	r2, #0
 8007852:	2108      	movs	r1, #8
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fae7 	bl	8007e28 <SPI_WaitOnFlagUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007866:	f043 0220 	orr.w	r2, r3, #32
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 fa39 	bl	8007ce8 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e001      	b.n	8007898 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8007894:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007898:	4618      	mov	r0, r3
 800789a:	3730      	adds	r7, #48	; 0x30
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08a      	sub	sp, #40	; 0x28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80078b8:	6a3a      	ldr	r2, [r7, #32]
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	4013      	ands	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078d2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3330      	adds	r3, #48	; 0x30
 80078da:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d113      	bne.n	800790e <HAL_SPI_IRQHandler+0x6e>
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10e      	bne.n	800790e <HAL_SPI_IRQHandler+0x6e>
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d009      	beq.n	800790e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
    handled = 1UL;
 800790a:	2301      	movs	r3, #1
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10f      	bne.n	8007938 <HAL_SPI_IRQHandler+0x98>
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <HAL_SPI_IRQHandler+0x98>
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d105      	bne.n	8007938 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3
    handled = 1UL;
 8007934:	2301      	movs	r3, #1
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10f      	bne.n	8007962 <HAL_SPI_IRQHandler+0xc2>
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <HAL_SPI_IRQHandler+0xc2>
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	d105      	bne.n	8007962 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
    handled = 1UL;
 800795e:	2301      	movs	r3, #1
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	f040 8170 	bne.w	8007c4a <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	f003 0308 	and.w	r3, r3, #8
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80a0 	beq.w	8007ab6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699a      	ldr	r2, [r3, #24]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0208 	orr.w	r2, r2, #8
 8007984:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0210 	orr.w	r2, r2, #16
 8007994:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079a4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0208 	bic.w	r2, r2, #8
 80079b4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00f      	beq.n	80079e0 <HAL_SPI_IRQHandler+0x140>
 80079c0:	7cfb      	ldrb	r3, [r7, #19]
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d004      	beq.n	80079d0 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <HAL_SPI_IRQHandler+0x140>
 80079d0:	7cfb      	ldrb	r3, [r7, #19]
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d059      	beq.n	8007a8a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d154      	bne.n	8007a8a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d13d      	bne.n	8007a6a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80079ee:	e036      	b.n	8007a5e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	2b0f      	cmp	r3, #15
 80079f6:	d90b      	bls.n	8007a10 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a02:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a08:	1d1a      	adds	r2, r3, #4
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	665a      	str	r2, [r3, #100]	; 0x64
 8007a0e:	e01d      	b.n	8007a4c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	2b07      	cmp	r3, #7
 8007a16:	d90b      	bls.n	8007a30 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	8812      	ldrh	r2, [r2, #0]
 8007a20:	b292      	uxth	r2, r2
 8007a22:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a28:	1c9a      	adds	r2, r3, #2
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	665a      	str	r2, [r3, #100]	; 0x64
 8007a2e:	e00d      	b.n	8007a4c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a3c:	7812      	ldrb	r2, [r2, #0]
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1c2      	bne.n	80079f0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f93c 	bl	8007ce8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f90c 	bl	8007ca0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007a88:	e0e4      	b.n	8007c54 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007a8a:	7cfb      	ldrb	r3, [r7, #19]
 8007a8c:	2b05      	cmp	r3, #5
 8007a8e:	d103      	bne.n	8007a98 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f8fb 	bl	8007c8c <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8007a96:	e0da      	b.n	8007c4e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007a98:	7cfb      	ldrb	r3, [r7, #19]
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d103      	bne.n	8007aa6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8ea 	bl	8007c78 <HAL_SPI_RxCpltCallback>
    return;
 8007aa4:	e0d3      	b.n	8007c4e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007aa6:	7cfb      	ldrb	r3, [r7, #19]
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	f040 80d0 	bne.w	8007c4e <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f8d8 	bl	8007c64 <HAL_SPI_TxCpltCallback>
    return;
 8007ab4:	e0cb      	b.n	8007c4e <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00d      	beq.n	8007adc <HAL_SPI_IRQHandler+0x23c>
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d008      	beq.n	8007adc <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699a      	ldr	r2, [r3, #24]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ad8:	619a      	str	r2, [r3, #24]

    return;
 8007ada:	e0bb      	b.n	8007c54 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80b6 	beq.w	8007c54 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00f      	beq.n	8007b12 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af8:	f043 0204 	orr.w	r2, r3, #4
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b10:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00f      	beq.n	8007b3c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b22:	f043 0201 	orr.w	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699a      	ldr	r2, [r3, #24]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b3a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00f      	beq.n	8007b66 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b4c:	f043 0208 	orr.w	r2, r3, #8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b64:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00f      	beq.n	8007b90 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0220 	orr.w	r2, r2, #32
 8007b8e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d05b      	beq.n	8007c52 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0201 	bic.w	r2, r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6919      	ldr	r1, [r3, #16]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	4b29      	ldr	r3, [pc, #164]	; (8007c5c <HAL_SPI_IRQHandler+0x3bc>)
 8007bb6:	400b      	ands	r3, r1
 8007bb8:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bc4:	d138      	bne.n	8007c38 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007bd4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d013      	beq.n	8007c06 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007be2:	4a1f      	ldr	r2, [pc, #124]	; (8007c60 <HAL_SPI_IRQHandler+0x3c0>)
 8007be4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fb f91c 	bl	8002e28 <HAL_DMA_Abort_IT>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d021      	beq.n	8007c52 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c12:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <HAL_SPI_IRQHandler+0x3c0>)
 8007c14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fb f904 	bl	8002e28 <HAL_DMA_Abort_IT>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d015      	beq.n	8007c52 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c36:	e00c      	b.n	8007c52 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f82d 	bl	8007ca0 <HAL_SPI_ErrorCallback>
    return;
 8007c46:	bf00      	nop
 8007c48:	e003      	b.n	8007c52 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007c4a:	bf00      	nop
 8007c4c:	e002      	b.n	8007c54 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8007c4e:	bf00      	nop
 8007c50:	e000      	b.n	8007c54 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8007c52:	bf00      	nop
  }
}
 8007c54:	3728      	adds	r7, #40	; 0x28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	fffffc94 	.word	0xfffffc94
 8007c60:	08007cb5 	.word	0x08007cb5

08007c64 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff ffe0 	bl	8007ca0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0208 	orr.w	r2, r2, #8
 8007d06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699a      	ldr	r2, [r3, #24]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0210 	orr.w	r2, r2, #16
 8007d16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0201 	bic.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6919      	ldr	r1, [r3, #16]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b3c      	ldr	r3, [pc, #240]	; (8007e24 <SPI_CloseTransfer+0x13c>)
 8007d34:	400b      	ands	r3, r1
 8007d36:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d014      	beq.n	8007d7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00f      	beq.n	8007d7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	699a      	ldr	r2, [r3, #24]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f042 0220 	orr.w	r2, r2, #32
 8007d7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d014      	beq.n	8007db4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00f      	beq.n	8007db4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d9a:	f043 0204 	orr.w	r2, r3, #4
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00f      	beq.n	8007dde <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc4:	f043 0201 	orr.w	r2, r3, #1
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	699a      	ldr	r2, [r3, #24]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ddc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00f      	beq.n	8007e08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dee:	f043 0208 	orr.w	r2, r3, #8
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007e18:	bf00      	nop
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	fffffc90 	.word	0xfffffc90

08007e28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	4613      	mov	r3, r2
 8007e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007e38:	e010      	b.n	8007e5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e3a:	f7fa fb4f 	bl	80024dc <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d803      	bhi.n	8007e52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e50:	d102      	bne.n	8007e58 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e00f      	b.n	8007e7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	695a      	ldr	r2, [r3, #20]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4013      	ands	r3, r2
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	bf0c      	ite	eq
 8007e6c:	2301      	moveq	r3, #1
 8007e6e:	2300      	movne	r3, #0
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	461a      	mov	r2, r3
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d0df      	beq.n	8007e3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	3301      	adds	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	3307      	adds	r3, #7
 8007ea2:	08db      	lsrs	r3, r3, #3
 8007ea4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	fb02 f303 	mul.w	r3, r2, r3
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e049      	b.n	8007f60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d106      	bne.n	8007ee6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7fa f8e9 	bl	80020b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4610      	mov	r0, r2
 8007efa:	f000 fa17 	bl	800832c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d109      	bne.n	8007f8c <HAL_TIM_PWM_Start+0x24>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	bf14      	ite	ne
 8007f84:	2301      	movne	r3, #1
 8007f86:	2300      	moveq	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	e03c      	b.n	8008006 <HAL_TIM_PWM_Start+0x9e>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d109      	bne.n	8007fa6 <HAL_TIM_PWM_Start+0x3e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	bf14      	ite	ne
 8007f9e:	2301      	movne	r3, #1
 8007fa0:	2300      	moveq	r3, #0
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	e02f      	b.n	8008006 <HAL_TIM_PWM_Start+0x9e>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d109      	bne.n	8007fc0 <HAL_TIM_PWM_Start+0x58>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	bf14      	ite	ne
 8007fb8:	2301      	movne	r3, #1
 8007fba:	2300      	moveq	r3, #0
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	e022      	b.n	8008006 <HAL_TIM_PWM_Start+0x9e>
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2b0c      	cmp	r3, #12
 8007fc4:	d109      	bne.n	8007fda <HAL_TIM_PWM_Start+0x72>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	bf14      	ite	ne
 8007fd2:	2301      	movne	r3, #1
 8007fd4:	2300      	moveq	r3, #0
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	e015      	b.n	8008006 <HAL_TIM_PWM_Start+0x9e>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b10      	cmp	r3, #16
 8007fde:	d109      	bne.n	8007ff4 <HAL_TIM_PWM_Start+0x8c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	bf14      	ite	ne
 8007fec:	2301      	movne	r3, #1
 8007fee:	2300      	moveq	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	e008      	b.n	8008006 <HAL_TIM_PWM_Start+0x9e>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	bf14      	ite	ne
 8008000:	2301      	movne	r3, #1
 8008002:	2300      	moveq	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e06e      	b.n	80080ec <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d104      	bne.n	800801e <HAL_TIM_PWM_Start+0xb6>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800801c:	e023      	b.n	8008066 <HAL_TIM_PWM_Start+0xfe>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b04      	cmp	r3, #4
 8008022:	d104      	bne.n	800802e <HAL_TIM_PWM_Start+0xc6>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800802c:	e01b      	b.n	8008066 <HAL_TIM_PWM_Start+0xfe>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d104      	bne.n	800803e <HAL_TIM_PWM_Start+0xd6>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800803c:	e013      	b.n	8008066 <HAL_TIM_PWM_Start+0xfe>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b0c      	cmp	r3, #12
 8008042:	d104      	bne.n	800804e <HAL_TIM_PWM_Start+0xe6>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800804c:	e00b      	b.n	8008066 <HAL_TIM_PWM_Start+0xfe>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b10      	cmp	r3, #16
 8008052:	d104      	bne.n	800805e <HAL_TIM_PWM_Start+0xf6>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800805c:	e003      	b.n	8008066 <HAL_TIM_PWM_Start+0xfe>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2202      	movs	r2, #2
 8008062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2201      	movs	r2, #1
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fcc4 	bl	80089fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <HAL_TIM_PWM_Start+0x18c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x13e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1d      	ldr	r2, [pc, #116]	; (80080f8 <HAL_TIM_PWM_Start+0x190>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x13e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1b      	ldr	r2, [pc, #108]	; (80080fc <HAL_TIM_PWM_Start+0x194>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x13e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a1a      	ldr	r2, [pc, #104]	; (8008100 <HAL_TIM_PWM_Start+0x198>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x13e>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a18      	ldr	r2, [pc, #96]	; (8008104 <HAL_TIM_PWM_Start+0x19c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <HAL_TIM_PWM_Start+0x142>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <HAL_TIM_PWM_Start+0x144>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d007      	beq.n	80080c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	4b10      	ldr	r3, [pc, #64]	; (8008108 <HAL_TIM_PWM_Start+0x1a0>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b06      	cmp	r3, #6
 80080d0:	d00b      	beq.n	80080ea <HAL_TIM_PWM_Start+0x182>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d8:	d007      	beq.n	80080ea <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0201 	orr.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	40010000 	.word	0x40010000
 80080f8:	40010400 	.word	0x40010400
 80080fc:	40014000 	.word	0x40014000
 8008100:	40014400 	.word	0x40014400
 8008104:	40014800 	.word	0x40014800
 8008108:	00010007 	.word	0x00010007

0800810c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008122:	2302      	movs	r3, #2
 8008124:	e0fd      	b.n	8008322 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b14      	cmp	r3, #20
 8008132:	f200 80f0 	bhi.w	8008316 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008136:	a201      	add	r2, pc, #4	; (adr r2, 800813c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	08008191 	.word	0x08008191
 8008140:	08008317 	.word	0x08008317
 8008144:	08008317 	.word	0x08008317
 8008148:	08008317 	.word	0x08008317
 800814c:	080081d1 	.word	0x080081d1
 8008150:	08008317 	.word	0x08008317
 8008154:	08008317 	.word	0x08008317
 8008158:	08008317 	.word	0x08008317
 800815c:	08008213 	.word	0x08008213
 8008160:	08008317 	.word	0x08008317
 8008164:	08008317 	.word	0x08008317
 8008168:	08008317 	.word	0x08008317
 800816c:	08008253 	.word	0x08008253
 8008170:	08008317 	.word	0x08008317
 8008174:	08008317 	.word	0x08008317
 8008178:	08008317 	.word	0x08008317
 800817c:	08008295 	.word	0x08008295
 8008180:	08008317 	.word	0x08008317
 8008184:	08008317 	.word	0x08008317
 8008188:	08008317 	.word	0x08008317
 800818c:	080082d5 	.word	0x080082d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 f962 	bl	8008460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699a      	ldr	r2, [r3, #24]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0208 	orr.w	r2, r2, #8
 80081aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0204 	bic.w	r2, r2, #4
 80081ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6999      	ldr	r1, [r3, #24]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	691a      	ldr	r2, [r3, #16]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	619a      	str	r2, [r3, #24]
      break;
 80081ce:	e0a3      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68b9      	ldr	r1, [r7, #8]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f9d2 	bl	8008580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6999      	ldr	r1, [r3, #24]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	021a      	lsls	r2, r3, #8
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	619a      	str	r2, [r3, #24]
      break;
 8008210:	e082      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fa3b 	bl	8008694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69da      	ldr	r2, [r3, #28]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f042 0208 	orr.w	r2, r2, #8
 800822c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0204 	bic.w	r2, r2, #4
 800823c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69d9      	ldr	r1, [r3, #28]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	61da      	str	r2, [r3, #28]
      break;
 8008250:	e062      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68b9      	ldr	r1, [r7, #8]
 8008258:	4618      	mov	r0, r3
 800825a:	f000 faa1 	bl	80087a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69da      	ldr	r2, [r3, #28]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800826c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69da      	ldr	r2, [r3, #28]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800827c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69d9      	ldr	r1, [r3, #28]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	021a      	lsls	r2, r3, #8
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	61da      	str	r2, [r3, #28]
      break;
 8008292:	e041      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fae8 	bl	8008870 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0208 	orr.w	r2, r2, #8
 80082ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0204 	bic.w	r2, r2, #4
 80082be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082d2:	e021      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fb2a 	bl	8008934 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	021a      	lsls	r2, r3, #8
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008314:	e000      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008316:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop

0800832c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a40      	ldr	r2, [pc, #256]	; (8008440 <TIM_Base_SetConfig+0x114>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d013      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834a:	d00f      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a3d      	ldr	r2, [pc, #244]	; (8008444 <TIM_Base_SetConfig+0x118>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d00b      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a3c      	ldr	r2, [pc, #240]	; (8008448 <TIM_Base_SetConfig+0x11c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d007      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a3b      	ldr	r2, [pc, #236]	; (800844c <TIM_Base_SetConfig+0x120>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d003      	beq.n	800836c <TIM_Base_SetConfig+0x40>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a3a      	ldr	r2, [pc, #232]	; (8008450 <TIM_Base_SetConfig+0x124>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d108      	bne.n	800837e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a2f      	ldr	r2, [pc, #188]	; (8008440 <TIM_Base_SetConfig+0x114>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d01f      	beq.n	80083c6 <TIM_Base_SetConfig+0x9a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838c:	d01b      	beq.n	80083c6 <TIM_Base_SetConfig+0x9a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a2c      	ldr	r2, [pc, #176]	; (8008444 <TIM_Base_SetConfig+0x118>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d017      	beq.n	80083c6 <TIM_Base_SetConfig+0x9a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a2b      	ldr	r2, [pc, #172]	; (8008448 <TIM_Base_SetConfig+0x11c>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d013      	beq.n	80083c6 <TIM_Base_SetConfig+0x9a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a2a      	ldr	r2, [pc, #168]	; (800844c <TIM_Base_SetConfig+0x120>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d00f      	beq.n	80083c6 <TIM_Base_SetConfig+0x9a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a29      	ldr	r2, [pc, #164]	; (8008450 <TIM_Base_SetConfig+0x124>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d00b      	beq.n	80083c6 <TIM_Base_SetConfig+0x9a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a28      	ldr	r2, [pc, #160]	; (8008454 <TIM_Base_SetConfig+0x128>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d007      	beq.n	80083c6 <TIM_Base_SetConfig+0x9a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a27      	ldr	r2, [pc, #156]	; (8008458 <TIM_Base_SetConfig+0x12c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d003      	beq.n	80083c6 <TIM_Base_SetConfig+0x9a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a26      	ldr	r2, [pc, #152]	; (800845c <TIM_Base_SetConfig+0x130>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d108      	bne.n	80083d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a10      	ldr	r2, [pc, #64]	; (8008440 <TIM_Base_SetConfig+0x114>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00f      	beq.n	8008424 <TIM_Base_SetConfig+0xf8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a12      	ldr	r2, [pc, #72]	; (8008450 <TIM_Base_SetConfig+0x124>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00b      	beq.n	8008424 <TIM_Base_SetConfig+0xf8>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a11      	ldr	r2, [pc, #68]	; (8008454 <TIM_Base_SetConfig+0x128>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_Base_SetConfig+0xf8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a10      	ldr	r2, [pc, #64]	; (8008458 <TIM_Base_SetConfig+0x12c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_Base_SetConfig+0xf8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a0f      	ldr	r2, [pc, #60]	; (800845c <TIM_Base_SetConfig+0x130>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d103      	bne.n	800842c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	615a      	str	r2, [r3, #20]
}
 8008432:	bf00      	nop
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40010000 	.word	0x40010000
 8008444:	40000400 	.word	0x40000400
 8008448:	40000800 	.word	0x40000800
 800844c:	40000c00 	.word	0x40000c00
 8008450:	40010400 	.word	0x40010400
 8008454:	40014000 	.word	0x40014000
 8008458:	40014400 	.word	0x40014400
 800845c:	40014800 	.word	0x40014800

08008460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f023 0201 	bic.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4b37      	ldr	r3, [pc, #220]	; (8008568 <TIM_OC1_SetConfig+0x108>)
 800848c:	4013      	ands	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0303 	bic.w	r3, r3, #3
 8008496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f023 0302 	bic.w	r3, r3, #2
 80084a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a2d      	ldr	r2, [pc, #180]	; (800856c <TIM_OC1_SetConfig+0x10c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00f      	beq.n	80084dc <TIM_OC1_SetConfig+0x7c>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a2c      	ldr	r2, [pc, #176]	; (8008570 <TIM_OC1_SetConfig+0x110>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d00b      	beq.n	80084dc <TIM_OC1_SetConfig+0x7c>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a2b      	ldr	r2, [pc, #172]	; (8008574 <TIM_OC1_SetConfig+0x114>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d007      	beq.n	80084dc <TIM_OC1_SetConfig+0x7c>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a2a      	ldr	r2, [pc, #168]	; (8008578 <TIM_OC1_SetConfig+0x118>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d003      	beq.n	80084dc <TIM_OC1_SetConfig+0x7c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a29      	ldr	r2, [pc, #164]	; (800857c <TIM_OC1_SetConfig+0x11c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d10c      	bne.n	80084f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f023 0308 	bic.w	r3, r3, #8
 80084e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f023 0304 	bic.w	r3, r3, #4
 80084f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a1c      	ldr	r2, [pc, #112]	; (800856c <TIM_OC1_SetConfig+0x10c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00f      	beq.n	800851e <TIM_OC1_SetConfig+0xbe>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a1b      	ldr	r2, [pc, #108]	; (8008570 <TIM_OC1_SetConfig+0x110>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00b      	beq.n	800851e <TIM_OC1_SetConfig+0xbe>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a1a      	ldr	r2, [pc, #104]	; (8008574 <TIM_OC1_SetConfig+0x114>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d007      	beq.n	800851e <TIM_OC1_SetConfig+0xbe>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a19      	ldr	r2, [pc, #100]	; (8008578 <TIM_OC1_SetConfig+0x118>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d003      	beq.n	800851e <TIM_OC1_SetConfig+0xbe>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a18      	ldr	r2, [pc, #96]	; (800857c <TIM_OC1_SetConfig+0x11c>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d111      	bne.n	8008542 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800852c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4313      	orrs	r3, r2
 8008536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	4313      	orrs	r3, r2
 8008540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	621a      	str	r2, [r3, #32]
}
 800855c:	bf00      	nop
 800855e:	371c      	adds	r7, #28
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	fffeff8f 	.word	0xfffeff8f
 800856c:	40010000 	.word	0x40010000
 8008570:	40010400 	.word	0x40010400
 8008574:	40014000 	.word	0x40014000
 8008578:	40014400 	.word	0x40014400
 800857c:	40014800 	.word	0x40014800

08008580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	f023 0210 	bic.w	r2, r3, #16
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4b34      	ldr	r3, [pc, #208]	; (800867c <TIM_OC2_SetConfig+0xfc>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f023 0320 	bic.w	r3, r3, #32
 80085ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a29      	ldr	r2, [pc, #164]	; (8008680 <TIM_OC2_SetConfig+0x100>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d003      	beq.n	80085e8 <TIM_OC2_SetConfig+0x68>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a28      	ldr	r2, [pc, #160]	; (8008684 <TIM_OC2_SetConfig+0x104>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d10d      	bne.n	8008604 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008602:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a1e      	ldr	r2, [pc, #120]	; (8008680 <TIM_OC2_SetConfig+0x100>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d00f      	beq.n	800862c <TIM_OC2_SetConfig+0xac>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <TIM_OC2_SetConfig+0x104>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00b      	beq.n	800862c <TIM_OC2_SetConfig+0xac>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a1c      	ldr	r2, [pc, #112]	; (8008688 <TIM_OC2_SetConfig+0x108>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d007      	beq.n	800862c <TIM_OC2_SetConfig+0xac>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a1b      	ldr	r2, [pc, #108]	; (800868c <TIM_OC2_SetConfig+0x10c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d003      	beq.n	800862c <TIM_OC2_SetConfig+0xac>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a1a      	ldr	r2, [pc, #104]	; (8008690 <TIM_OC2_SetConfig+0x110>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d113      	bne.n	8008654 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800863a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4313      	orrs	r3, r2
 8008646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	621a      	str	r2, [r3, #32]
}
 800866e:	bf00      	nop
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	feff8fff 	.word	0xfeff8fff
 8008680:	40010000 	.word	0x40010000
 8008684:	40010400 	.word	0x40010400
 8008688:	40014000 	.word	0x40014000
 800868c:	40014400 	.word	0x40014400
 8008690:	40014800 	.word	0x40014800

08008694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0303 	bic.w	r3, r3, #3
 80086ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a27      	ldr	r2, [pc, #156]	; (800878c <TIM_OC3_SetConfig+0xf8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d003      	beq.n	80086fa <TIM_OC3_SetConfig+0x66>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a26      	ldr	r2, [pc, #152]	; (8008790 <TIM_OC3_SetConfig+0xfc>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d10d      	bne.n	8008716 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1c      	ldr	r2, [pc, #112]	; (800878c <TIM_OC3_SetConfig+0xf8>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00f      	beq.n	800873e <TIM_OC3_SetConfig+0xaa>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a1b      	ldr	r2, [pc, #108]	; (8008790 <TIM_OC3_SetConfig+0xfc>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d00b      	beq.n	800873e <TIM_OC3_SetConfig+0xaa>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a1a      	ldr	r2, [pc, #104]	; (8008794 <TIM_OC3_SetConfig+0x100>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d007      	beq.n	800873e <TIM_OC3_SetConfig+0xaa>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a19      	ldr	r2, [pc, #100]	; (8008798 <TIM_OC3_SetConfig+0x104>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d003      	beq.n	800873e <TIM_OC3_SetConfig+0xaa>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a18      	ldr	r2, [pc, #96]	; (800879c <TIM_OC3_SetConfig+0x108>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d113      	bne.n	8008766 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800874c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	621a      	str	r2, [r3, #32]
}
 8008780:	bf00      	nop
 8008782:	371c      	adds	r7, #28
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	40010000 	.word	0x40010000
 8008790:	40010400 	.word	0x40010400
 8008794:	40014000 	.word	0x40014000
 8008798:	40014400 	.word	0x40014400
 800879c:	40014800 	.word	0x40014800

080087a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	031b      	lsls	r3, r3, #12
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a18      	ldr	r2, [pc, #96]	; (800885c <TIM_OC4_SetConfig+0xbc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00f      	beq.n	8008820 <TIM_OC4_SetConfig+0x80>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a17      	ldr	r2, [pc, #92]	; (8008860 <TIM_OC4_SetConfig+0xc0>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d00b      	beq.n	8008820 <TIM_OC4_SetConfig+0x80>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a16      	ldr	r2, [pc, #88]	; (8008864 <TIM_OC4_SetConfig+0xc4>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d007      	beq.n	8008820 <TIM_OC4_SetConfig+0x80>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a15      	ldr	r2, [pc, #84]	; (8008868 <TIM_OC4_SetConfig+0xc8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d003      	beq.n	8008820 <TIM_OC4_SetConfig+0x80>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a14      	ldr	r2, [pc, #80]	; (800886c <TIM_OC4_SetConfig+0xcc>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d109      	bne.n	8008834 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	019b      	lsls	r3, r3, #6
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	621a      	str	r2, [r3, #32]
}
 800884e:	bf00      	nop
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	40010000 	.word	0x40010000
 8008860:	40010400 	.word	0x40010400
 8008864:	40014000 	.word	0x40014000
 8008868:	40014400 	.word	0x40014400
 800886c:	40014800 	.word	0x40014800

08008870 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	041b      	lsls	r3, r3, #16
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a17      	ldr	r2, [pc, #92]	; (8008920 <TIM_OC5_SetConfig+0xb0>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00f      	beq.n	80088e6 <TIM_OC5_SetConfig+0x76>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a16      	ldr	r2, [pc, #88]	; (8008924 <TIM_OC5_SetConfig+0xb4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00b      	beq.n	80088e6 <TIM_OC5_SetConfig+0x76>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a15      	ldr	r2, [pc, #84]	; (8008928 <TIM_OC5_SetConfig+0xb8>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d007      	beq.n	80088e6 <TIM_OC5_SetConfig+0x76>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a14      	ldr	r2, [pc, #80]	; (800892c <TIM_OC5_SetConfig+0xbc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d003      	beq.n	80088e6 <TIM_OC5_SetConfig+0x76>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a13      	ldr	r2, [pc, #76]	; (8008930 <TIM_OC5_SetConfig+0xc0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d109      	bne.n	80088fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	621a      	str	r2, [r3, #32]
}
 8008914:	bf00      	nop
 8008916:	371c      	adds	r7, #28
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	40010000 	.word	0x40010000
 8008924:	40010400 	.word	0x40010400
 8008928:	40014000 	.word	0x40014000
 800892c:	40014400 	.word	0x40014400
 8008930:	40014800 	.word	0x40014800

08008934 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	021b      	lsls	r3, r3, #8
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	051b      	lsls	r3, r3, #20
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	4313      	orrs	r3, r2
 8008982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <TIM_OC6_SetConfig+0xb4>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00f      	beq.n	80089ac <TIM_OC6_SetConfig+0x78>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a17      	ldr	r2, [pc, #92]	; (80089ec <TIM_OC6_SetConfig+0xb8>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d00b      	beq.n	80089ac <TIM_OC6_SetConfig+0x78>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a16      	ldr	r2, [pc, #88]	; (80089f0 <TIM_OC6_SetConfig+0xbc>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d007      	beq.n	80089ac <TIM_OC6_SetConfig+0x78>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a15      	ldr	r2, [pc, #84]	; (80089f4 <TIM_OC6_SetConfig+0xc0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_OC6_SetConfig+0x78>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a14      	ldr	r2, [pc, #80]	; (80089f8 <TIM_OC6_SetConfig+0xc4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d109      	bne.n	80089c0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	029b      	lsls	r3, r3, #10
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	621a      	str	r2, [r3, #32]
}
 80089da:	bf00      	nop
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40010400 	.word	0x40010400
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40014400 	.word	0x40014400
 80089f8:	40014800 	.word	0x40014800

080089fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f003 031f 	and.w	r3, r3, #31
 8008a0e:	2201      	movs	r2, #1
 8008a10:	fa02 f303 	lsl.w	r3, r2, r3
 8008a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a1a      	ldr	r2, [r3, #32]
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	43db      	mvns	r3, r3
 8008a1e:	401a      	ands	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a1a      	ldr	r2, [r3, #32]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f003 031f 	and.w	r3, r3, #31
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	fa01 f303 	lsl.w	r3, r1, r3
 8008a34:	431a      	orrs	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	621a      	str	r2, [r3, #32]
}
 8008a3a:	bf00      	nop
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
	...

08008a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e068      	b.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a2e      	ldr	r2, [pc, #184]	; (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d004      	beq.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a2d      	ldr	r2, [pc, #180]	; (8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d108      	bne.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a1e      	ldr	r2, [pc, #120]	; (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d01d      	beq.n	8008b06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad2:	d018      	beq.n	8008b06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a1b      	ldr	r2, [pc, #108]	; (8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d013      	beq.n	8008b06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a1a      	ldr	r2, [pc, #104]	; (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d00e      	beq.n	8008b06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a18      	ldr	r2, [pc, #96]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d009      	beq.n	8008b06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d004      	beq.n	8008b06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a14      	ldr	r2, [pc, #80]	; (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d10c      	bne.n	8008b20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	40010000 	.word	0x40010000
 8008b44:	40010400 	.word	0x40010400
 8008b48:	40000400 	.word	0x40000400
 8008b4c:	40000800 	.word	0x40000800
 8008b50:	40000c00 	.word	0x40000c00
 8008b54:	40001800 	.word	0x40001800

08008b58 <bzero>:
 8008b58:	460a      	mov	r2, r1
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	f000 b82a 	b.w	8008bb4 <memset>

08008b60 <__errno>:
 8008b60:	4b01      	ldr	r3, [pc, #4]	; (8008b68 <__errno+0x8>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	24000028 	.word	0x24000028

08008b6c <__libc_init_array>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4e0d      	ldr	r6, [pc, #52]	; (8008ba4 <__libc_init_array+0x38>)
 8008b70:	4c0d      	ldr	r4, [pc, #52]	; (8008ba8 <__libc_init_array+0x3c>)
 8008b72:	1ba4      	subs	r4, r4, r6
 8008b74:	10a4      	asrs	r4, r4, #2
 8008b76:	2500      	movs	r5, #0
 8008b78:	42a5      	cmp	r5, r4
 8008b7a:	d109      	bne.n	8008b90 <__libc_init_array+0x24>
 8008b7c:	4e0b      	ldr	r6, [pc, #44]	; (8008bac <__libc_init_array+0x40>)
 8008b7e:	4c0c      	ldr	r4, [pc, #48]	; (8008bb0 <__libc_init_array+0x44>)
 8008b80:	f000 fc38 	bl	80093f4 <_init>
 8008b84:	1ba4      	subs	r4, r4, r6
 8008b86:	10a4      	asrs	r4, r4, #2
 8008b88:	2500      	movs	r5, #0
 8008b8a:	42a5      	cmp	r5, r4
 8008b8c:	d105      	bne.n	8008b9a <__libc_init_array+0x2e>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b94:	4798      	blx	r3
 8008b96:	3501      	adds	r5, #1
 8008b98:	e7ee      	b.n	8008b78 <__libc_init_array+0xc>
 8008b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b9e:	4798      	blx	r3
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	e7f2      	b.n	8008b8a <__libc_init_array+0x1e>
 8008ba4:	0800f900 	.word	0x0800f900
 8008ba8:	0800f900 	.word	0x0800f900
 8008bac:	0800f900 	.word	0x0800f900
 8008bb0:	0800f904 	.word	0x0800f904

08008bb4 <memset>:
 8008bb4:	4402      	add	r2, r0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d100      	bne.n	8008bbe <memset+0xa>
 8008bbc:	4770      	bx	lr
 8008bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc2:	e7f9      	b.n	8008bb8 <memset+0x4>

08008bc4 <siprintf>:
 8008bc4:	b40e      	push	{r1, r2, r3}
 8008bc6:	b500      	push	{lr}
 8008bc8:	b09c      	sub	sp, #112	; 0x70
 8008bca:	ab1d      	add	r3, sp, #116	; 0x74
 8008bcc:	9002      	str	r0, [sp, #8]
 8008bce:	9006      	str	r0, [sp, #24]
 8008bd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bd4:	4809      	ldr	r0, [pc, #36]	; (8008bfc <siprintf+0x38>)
 8008bd6:	9107      	str	r1, [sp, #28]
 8008bd8:	9104      	str	r1, [sp, #16]
 8008bda:	4909      	ldr	r1, [pc, #36]	; (8008c00 <siprintf+0x3c>)
 8008bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be0:	9105      	str	r1, [sp, #20]
 8008be2:	6800      	ldr	r0, [r0, #0]
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	a902      	add	r1, sp, #8
 8008be8:	f000 f878 	bl	8008cdc <_svfiprintf_r>
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	b01c      	add	sp, #112	; 0x70
 8008bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf8:	b003      	add	sp, #12
 8008bfa:	4770      	bx	lr
 8008bfc:	24000028 	.word	0x24000028
 8008c00:	ffff0208 	.word	0xffff0208

08008c04 <strncmp>:
 8008c04:	b510      	push	{r4, lr}
 8008c06:	b16a      	cbz	r2, 8008c24 <strncmp+0x20>
 8008c08:	3901      	subs	r1, #1
 8008c0a:	1884      	adds	r4, r0, r2
 8008c0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d103      	bne.n	8008c20 <strncmp+0x1c>
 8008c18:	42a0      	cmp	r0, r4
 8008c1a:	d001      	beq.n	8008c20 <strncmp+0x1c>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1f5      	bne.n	8008c0c <strncmp+0x8>
 8008c20:	1a98      	subs	r0, r3, r2
 8008c22:	bd10      	pop	{r4, pc}
 8008c24:	4610      	mov	r0, r2
 8008c26:	e7fc      	b.n	8008c22 <strncmp+0x1e>

08008c28 <__ssputs_r>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	688e      	ldr	r6, [r1, #8]
 8008c2e:	429e      	cmp	r6, r3
 8008c30:	4682      	mov	sl, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	4690      	mov	r8, r2
 8008c36:	4699      	mov	r9, r3
 8008c38:	d837      	bhi.n	8008caa <__ssputs_r+0x82>
 8008c3a:	898a      	ldrh	r2, [r1, #12]
 8008c3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c40:	d031      	beq.n	8008ca6 <__ssputs_r+0x7e>
 8008c42:	6825      	ldr	r5, [r4, #0]
 8008c44:	6909      	ldr	r1, [r1, #16]
 8008c46:	1a6f      	subs	r7, r5, r1
 8008c48:	6965      	ldr	r5, [r4, #20]
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c50:	fb95 f5f3 	sdiv	r5, r5, r3
 8008c54:	f109 0301 	add.w	r3, r9, #1
 8008c58:	443b      	add	r3, r7
 8008c5a:	429d      	cmp	r5, r3
 8008c5c:	bf38      	it	cc
 8008c5e:	461d      	movcc	r5, r3
 8008c60:	0553      	lsls	r3, r2, #21
 8008c62:	d530      	bpl.n	8008cc6 <__ssputs_r+0x9e>
 8008c64:	4629      	mov	r1, r5
 8008c66:	f000 fb2b 	bl	80092c0 <_malloc_r>
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	b950      	cbnz	r0, 8008c84 <__ssputs_r+0x5c>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	f8ca 3000 	str.w	r3, [sl]
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c84:	463a      	mov	r2, r7
 8008c86:	6921      	ldr	r1, [r4, #16]
 8008c88:	f000 faa8 	bl	80091dc <memcpy>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	6126      	str	r6, [r4, #16]
 8008c9a:	6165      	str	r5, [r4, #20]
 8008c9c:	443e      	add	r6, r7
 8008c9e:	1bed      	subs	r5, r5, r7
 8008ca0:	6026      	str	r6, [r4, #0]
 8008ca2:	60a5      	str	r5, [r4, #8]
 8008ca4:	464e      	mov	r6, r9
 8008ca6:	454e      	cmp	r6, r9
 8008ca8:	d900      	bls.n	8008cac <__ssputs_r+0x84>
 8008caa:	464e      	mov	r6, r9
 8008cac:	4632      	mov	r2, r6
 8008cae:	4641      	mov	r1, r8
 8008cb0:	6820      	ldr	r0, [r4, #0]
 8008cb2:	f000 fa9e 	bl	80091f2 <memmove>
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	1b9b      	subs	r3, r3, r6
 8008cba:	60a3      	str	r3, [r4, #8]
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	441e      	add	r6, r3
 8008cc0:	6026      	str	r6, [r4, #0]
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	e7dc      	b.n	8008c80 <__ssputs_r+0x58>
 8008cc6:	462a      	mov	r2, r5
 8008cc8:	f000 fb54 	bl	8009374 <_realloc_r>
 8008ccc:	4606      	mov	r6, r0
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d1e2      	bne.n	8008c98 <__ssputs_r+0x70>
 8008cd2:	6921      	ldr	r1, [r4, #16]
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	f000 faa5 	bl	8009224 <_free_r>
 8008cda:	e7c8      	b.n	8008c6e <__ssputs_r+0x46>

08008cdc <_svfiprintf_r>:
 8008cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce0:	461d      	mov	r5, r3
 8008ce2:	898b      	ldrh	r3, [r1, #12]
 8008ce4:	061f      	lsls	r7, r3, #24
 8008ce6:	b09d      	sub	sp, #116	; 0x74
 8008ce8:	4680      	mov	r8, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	4616      	mov	r6, r2
 8008cee:	d50f      	bpl.n	8008d10 <_svfiprintf_r+0x34>
 8008cf0:	690b      	ldr	r3, [r1, #16]
 8008cf2:	b96b      	cbnz	r3, 8008d10 <_svfiprintf_r+0x34>
 8008cf4:	2140      	movs	r1, #64	; 0x40
 8008cf6:	f000 fae3 	bl	80092c0 <_malloc_r>
 8008cfa:	6020      	str	r0, [r4, #0]
 8008cfc:	6120      	str	r0, [r4, #16]
 8008cfe:	b928      	cbnz	r0, 8008d0c <_svfiprintf_r+0x30>
 8008d00:	230c      	movs	r3, #12
 8008d02:	f8c8 3000 	str.w	r3, [r8]
 8008d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d0a:	e0c8      	b.n	8008e9e <_svfiprintf_r+0x1c2>
 8008d0c:	2340      	movs	r3, #64	; 0x40
 8008d0e:	6163      	str	r3, [r4, #20]
 8008d10:	2300      	movs	r3, #0
 8008d12:	9309      	str	r3, [sp, #36]	; 0x24
 8008d14:	2320      	movs	r3, #32
 8008d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d1a:	2330      	movs	r3, #48	; 0x30
 8008d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d20:	9503      	str	r5, [sp, #12]
 8008d22:	f04f 0b01 	mov.w	fp, #1
 8008d26:	4637      	mov	r7, r6
 8008d28:	463d      	mov	r5, r7
 8008d2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d2e:	b10b      	cbz	r3, 8008d34 <_svfiprintf_r+0x58>
 8008d30:	2b25      	cmp	r3, #37	; 0x25
 8008d32:	d13e      	bne.n	8008db2 <_svfiprintf_r+0xd6>
 8008d34:	ebb7 0a06 	subs.w	sl, r7, r6
 8008d38:	d00b      	beq.n	8008d52 <_svfiprintf_r+0x76>
 8008d3a:	4653      	mov	r3, sl
 8008d3c:	4632      	mov	r2, r6
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4640      	mov	r0, r8
 8008d42:	f7ff ff71 	bl	8008c28 <__ssputs_r>
 8008d46:	3001      	adds	r0, #1
 8008d48:	f000 80a4 	beq.w	8008e94 <_svfiprintf_r+0x1b8>
 8008d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4e:	4453      	add	r3, sl
 8008d50:	9309      	str	r3, [sp, #36]	; 0x24
 8008d52:	783b      	ldrb	r3, [r7, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 809d 	beq.w	8008e94 <_svfiprintf_r+0x1b8>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d64:	9304      	str	r3, [sp, #16]
 8008d66:	9307      	str	r3, [sp, #28]
 8008d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d6e:	462f      	mov	r7, r5
 8008d70:	2205      	movs	r2, #5
 8008d72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008d76:	4850      	ldr	r0, [pc, #320]	; (8008eb8 <_svfiprintf_r+0x1dc>)
 8008d78:	f7f7 faba 	bl	80002f0 <memchr>
 8008d7c:	9b04      	ldr	r3, [sp, #16]
 8008d7e:	b9d0      	cbnz	r0, 8008db6 <_svfiprintf_r+0xda>
 8008d80:	06d9      	lsls	r1, r3, #27
 8008d82:	bf44      	itt	mi
 8008d84:	2220      	movmi	r2, #32
 8008d86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d8a:	071a      	lsls	r2, r3, #28
 8008d8c:	bf44      	itt	mi
 8008d8e:	222b      	movmi	r2, #43	; 0x2b
 8008d90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d94:	782a      	ldrb	r2, [r5, #0]
 8008d96:	2a2a      	cmp	r2, #42	; 0x2a
 8008d98:	d015      	beq.n	8008dc6 <_svfiprintf_r+0xea>
 8008d9a:	9a07      	ldr	r2, [sp, #28]
 8008d9c:	462f      	mov	r7, r5
 8008d9e:	2000      	movs	r0, #0
 8008da0:	250a      	movs	r5, #10
 8008da2:	4639      	mov	r1, r7
 8008da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da8:	3b30      	subs	r3, #48	; 0x30
 8008daa:	2b09      	cmp	r3, #9
 8008dac:	d94d      	bls.n	8008e4a <_svfiprintf_r+0x16e>
 8008dae:	b1b8      	cbz	r0, 8008de0 <_svfiprintf_r+0x104>
 8008db0:	e00f      	b.n	8008dd2 <_svfiprintf_r+0xf6>
 8008db2:	462f      	mov	r7, r5
 8008db4:	e7b8      	b.n	8008d28 <_svfiprintf_r+0x4c>
 8008db6:	4a40      	ldr	r2, [pc, #256]	; (8008eb8 <_svfiprintf_r+0x1dc>)
 8008db8:	1a80      	subs	r0, r0, r2
 8008dba:	fa0b f000 	lsl.w	r0, fp, r0
 8008dbe:	4318      	orrs	r0, r3
 8008dc0:	9004      	str	r0, [sp, #16]
 8008dc2:	463d      	mov	r5, r7
 8008dc4:	e7d3      	b.n	8008d6e <_svfiprintf_r+0x92>
 8008dc6:	9a03      	ldr	r2, [sp, #12]
 8008dc8:	1d11      	adds	r1, r2, #4
 8008dca:	6812      	ldr	r2, [r2, #0]
 8008dcc:	9103      	str	r1, [sp, #12]
 8008dce:	2a00      	cmp	r2, #0
 8008dd0:	db01      	blt.n	8008dd6 <_svfiprintf_r+0xfa>
 8008dd2:	9207      	str	r2, [sp, #28]
 8008dd4:	e004      	b.n	8008de0 <_svfiprintf_r+0x104>
 8008dd6:	4252      	negs	r2, r2
 8008dd8:	f043 0302 	orr.w	r3, r3, #2
 8008ddc:	9207      	str	r2, [sp, #28]
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	783b      	ldrb	r3, [r7, #0]
 8008de2:	2b2e      	cmp	r3, #46	; 0x2e
 8008de4:	d10c      	bne.n	8008e00 <_svfiprintf_r+0x124>
 8008de6:	787b      	ldrb	r3, [r7, #1]
 8008de8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dea:	d133      	bne.n	8008e54 <_svfiprintf_r+0x178>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	1d1a      	adds	r2, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	9203      	str	r2, [sp, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfb8      	it	lt
 8008df8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008dfc:	3702      	adds	r7, #2
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	4d2e      	ldr	r5, [pc, #184]	; (8008ebc <_svfiprintf_r+0x1e0>)
 8008e02:	7839      	ldrb	r1, [r7, #0]
 8008e04:	2203      	movs	r2, #3
 8008e06:	4628      	mov	r0, r5
 8008e08:	f7f7 fa72 	bl	80002f0 <memchr>
 8008e0c:	b138      	cbz	r0, 8008e1e <_svfiprintf_r+0x142>
 8008e0e:	2340      	movs	r3, #64	; 0x40
 8008e10:	1b40      	subs	r0, r0, r5
 8008e12:	fa03 f000 	lsl.w	r0, r3, r0
 8008e16:	9b04      	ldr	r3, [sp, #16]
 8008e18:	4303      	orrs	r3, r0
 8008e1a:	3701      	adds	r7, #1
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	7839      	ldrb	r1, [r7, #0]
 8008e20:	4827      	ldr	r0, [pc, #156]	; (8008ec0 <_svfiprintf_r+0x1e4>)
 8008e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e26:	2206      	movs	r2, #6
 8008e28:	1c7e      	adds	r6, r7, #1
 8008e2a:	f7f7 fa61 	bl	80002f0 <memchr>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d038      	beq.n	8008ea4 <_svfiprintf_r+0x1c8>
 8008e32:	4b24      	ldr	r3, [pc, #144]	; (8008ec4 <_svfiprintf_r+0x1e8>)
 8008e34:	bb13      	cbnz	r3, 8008e7c <_svfiprintf_r+0x1a0>
 8008e36:	9b03      	ldr	r3, [sp, #12]
 8008e38:	3307      	adds	r3, #7
 8008e3a:	f023 0307 	bic.w	r3, r3, #7
 8008e3e:	3308      	adds	r3, #8
 8008e40:	9303      	str	r3, [sp, #12]
 8008e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e44:	444b      	add	r3, r9
 8008e46:	9309      	str	r3, [sp, #36]	; 0x24
 8008e48:	e76d      	b.n	8008d26 <_svfiprintf_r+0x4a>
 8008e4a:	fb05 3202 	mla	r2, r5, r2, r3
 8008e4e:	2001      	movs	r0, #1
 8008e50:	460f      	mov	r7, r1
 8008e52:	e7a6      	b.n	8008da2 <_svfiprintf_r+0xc6>
 8008e54:	2300      	movs	r3, #0
 8008e56:	3701      	adds	r7, #1
 8008e58:	9305      	str	r3, [sp, #20]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	250a      	movs	r5, #10
 8008e5e:	4638      	mov	r0, r7
 8008e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e64:	3a30      	subs	r2, #48	; 0x30
 8008e66:	2a09      	cmp	r2, #9
 8008e68:	d903      	bls.n	8008e72 <_svfiprintf_r+0x196>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0c8      	beq.n	8008e00 <_svfiprintf_r+0x124>
 8008e6e:	9105      	str	r1, [sp, #20]
 8008e70:	e7c6      	b.n	8008e00 <_svfiprintf_r+0x124>
 8008e72:	fb05 2101 	mla	r1, r5, r1, r2
 8008e76:	2301      	movs	r3, #1
 8008e78:	4607      	mov	r7, r0
 8008e7a:	e7f0      	b.n	8008e5e <_svfiprintf_r+0x182>
 8008e7c:	ab03      	add	r3, sp, #12
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	4622      	mov	r2, r4
 8008e82:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <_svfiprintf_r+0x1ec>)
 8008e84:	a904      	add	r1, sp, #16
 8008e86:	4640      	mov	r0, r8
 8008e88:	f3af 8000 	nop.w
 8008e8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008e90:	4681      	mov	r9, r0
 8008e92:	d1d6      	bne.n	8008e42 <_svfiprintf_r+0x166>
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	065b      	lsls	r3, r3, #25
 8008e98:	f53f af35 	bmi.w	8008d06 <_svfiprintf_r+0x2a>
 8008e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e9e:	b01d      	add	sp, #116	; 0x74
 8008ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea4:	ab03      	add	r3, sp, #12
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <_svfiprintf_r+0x1ec>)
 8008eac:	a904      	add	r1, sp, #16
 8008eae:	4640      	mov	r0, r8
 8008eb0:	f000 f882 	bl	8008fb8 <_printf_i>
 8008eb4:	e7ea      	b.n	8008e8c <_svfiprintf_r+0x1b0>
 8008eb6:	bf00      	nop
 8008eb8:	0800f8cc 	.word	0x0800f8cc
 8008ebc:	0800f8d2 	.word	0x0800f8d2
 8008ec0:	0800f8d6 	.word	0x0800f8d6
 8008ec4:	00000000 	.word	0x00000000
 8008ec8:	08008c29 	.word	0x08008c29

08008ecc <_printf_common>:
 8008ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed0:	4691      	mov	r9, r2
 8008ed2:	461f      	mov	r7, r3
 8008ed4:	688a      	ldr	r2, [r1, #8]
 8008ed6:	690b      	ldr	r3, [r1, #16]
 8008ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008edc:	4293      	cmp	r3, r2
 8008ede:	bfb8      	it	lt
 8008ee0:	4613      	movlt	r3, r2
 8008ee2:	f8c9 3000 	str.w	r3, [r9]
 8008ee6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008eea:	4606      	mov	r6, r0
 8008eec:	460c      	mov	r4, r1
 8008eee:	b112      	cbz	r2, 8008ef6 <_printf_common+0x2a>
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	f8c9 3000 	str.w	r3, [r9]
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	0699      	lsls	r1, r3, #26
 8008efa:	bf42      	ittt	mi
 8008efc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008f00:	3302      	addmi	r3, #2
 8008f02:	f8c9 3000 	strmi.w	r3, [r9]
 8008f06:	6825      	ldr	r5, [r4, #0]
 8008f08:	f015 0506 	ands.w	r5, r5, #6
 8008f0c:	d107      	bne.n	8008f1e <_printf_common+0x52>
 8008f0e:	f104 0a19 	add.w	sl, r4, #25
 8008f12:	68e3      	ldr	r3, [r4, #12]
 8008f14:	f8d9 2000 	ldr.w	r2, [r9]
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	42ab      	cmp	r3, r5
 8008f1c:	dc28      	bgt.n	8008f70 <_printf_common+0xa4>
 8008f1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008f22:	6822      	ldr	r2, [r4, #0]
 8008f24:	3300      	adds	r3, #0
 8008f26:	bf18      	it	ne
 8008f28:	2301      	movne	r3, #1
 8008f2a:	0692      	lsls	r2, r2, #26
 8008f2c:	d42d      	bmi.n	8008f8a <_printf_common+0xbe>
 8008f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f32:	4639      	mov	r1, r7
 8008f34:	4630      	mov	r0, r6
 8008f36:	47c0      	blx	r8
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d020      	beq.n	8008f7e <_printf_common+0xb2>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	68e5      	ldr	r5, [r4, #12]
 8008f40:	f8d9 2000 	ldr.w	r2, [r9]
 8008f44:	f003 0306 	and.w	r3, r3, #6
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	bf08      	it	eq
 8008f4c:	1aad      	subeq	r5, r5, r2
 8008f4e:	68a3      	ldr	r3, [r4, #8]
 8008f50:	6922      	ldr	r2, [r4, #16]
 8008f52:	bf0c      	ite	eq
 8008f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f58:	2500      	movne	r5, #0
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	bfc4      	itt	gt
 8008f5e:	1a9b      	subgt	r3, r3, r2
 8008f60:	18ed      	addgt	r5, r5, r3
 8008f62:	f04f 0900 	mov.w	r9, #0
 8008f66:	341a      	adds	r4, #26
 8008f68:	454d      	cmp	r5, r9
 8008f6a:	d11a      	bne.n	8008fa2 <_printf_common+0xd6>
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e008      	b.n	8008f82 <_printf_common+0xb6>
 8008f70:	2301      	movs	r3, #1
 8008f72:	4652      	mov	r2, sl
 8008f74:	4639      	mov	r1, r7
 8008f76:	4630      	mov	r0, r6
 8008f78:	47c0      	blx	r8
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d103      	bne.n	8008f86 <_printf_common+0xba>
 8008f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f86:	3501      	adds	r5, #1
 8008f88:	e7c3      	b.n	8008f12 <_printf_common+0x46>
 8008f8a:	18e1      	adds	r1, r4, r3
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	2030      	movs	r0, #48	; 0x30
 8008f90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f94:	4422      	add	r2, r4
 8008f96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f9e:	3302      	adds	r3, #2
 8008fa0:	e7c5      	b.n	8008f2e <_printf_common+0x62>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	4630      	mov	r0, r6
 8008faa:	47c0      	blx	r8
 8008fac:	3001      	adds	r0, #1
 8008fae:	d0e6      	beq.n	8008f7e <_printf_common+0xb2>
 8008fb0:	f109 0901 	add.w	r9, r9, #1
 8008fb4:	e7d8      	b.n	8008f68 <_printf_common+0x9c>
	...

08008fb8 <_printf_i>:
 8008fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	7e09      	ldrb	r1, [r1, #24]
 8008fc4:	b085      	sub	sp, #20
 8008fc6:	296e      	cmp	r1, #110	; 0x6e
 8008fc8:	4617      	mov	r7, r2
 8008fca:	4606      	mov	r6, r0
 8008fcc:	4698      	mov	r8, r3
 8008fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fd0:	f000 80b3 	beq.w	800913a <_printf_i+0x182>
 8008fd4:	d822      	bhi.n	800901c <_printf_i+0x64>
 8008fd6:	2963      	cmp	r1, #99	; 0x63
 8008fd8:	d036      	beq.n	8009048 <_printf_i+0x90>
 8008fda:	d80a      	bhi.n	8008ff2 <_printf_i+0x3a>
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	f000 80b9 	beq.w	8009154 <_printf_i+0x19c>
 8008fe2:	2958      	cmp	r1, #88	; 0x58
 8008fe4:	f000 8083 	beq.w	80090ee <_printf_i+0x136>
 8008fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ff0:	e032      	b.n	8009058 <_printf_i+0xa0>
 8008ff2:	2964      	cmp	r1, #100	; 0x64
 8008ff4:	d001      	beq.n	8008ffa <_printf_i+0x42>
 8008ff6:	2969      	cmp	r1, #105	; 0x69
 8008ff8:	d1f6      	bne.n	8008fe8 <_printf_i+0x30>
 8008ffa:	6820      	ldr	r0, [r4, #0]
 8008ffc:	6813      	ldr	r3, [r2, #0]
 8008ffe:	0605      	lsls	r5, r0, #24
 8009000:	f103 0104 	add.w	r1, r3, #4
 8009004:	d52a      	bpl.n	800905c <_printf_i+0xa4>
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6011      	str	r1, [r2, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	da03      	bge.n	8009016 <_printf_i+0x5e>
 800900e:	222d      	movs	r2, #45	; 0x2d
 8009010:	425b      	negs	r3, r3
 8009012:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009016:	486f      	ldr	r0, [pc, #444]	; (80091d4 <_printf_i+0x21c>)
 8009018:	220a      	movs	r2, #10
 800901a:	e039      	b.n	8009090 <_printf_i+0xd8>
 800901c:	2973      	cmp	r1, #115	; 0x73
 800901e:	f000 809d 	beq.w	800915c <_printf_i+0x1a4>
 8009022:	d808      	bhi.n	8009036 <_printf_i+0x7e>
 8009024:	296f      	cmp	r1, #111	; 0x6f
 8009026:	d020      	beq.n	800906a <_printf_i+0xb2>
 8009028:	2970      	cmp	r1, #112	; 0x70
 800902a:	d1dd      	bne.n	8008fe8 <_printf_i+0x30>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	f043 0320 	orr.w	r3, r3, #32
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	e003      	b.n	800903e <_printf_i+0x86>
 8009036:	2975      	cmp	r1, #117	; 0x75
 8009038:	d017      	beq.n	800906a <_printf_i+0xb2>
 800903a:	2978      	cmp	r1, #120	; 0x78
 800903c:	d1d4      	bne.n	8008fe8 <_printf_i+0x30>
 800903e:	2378      	movs	r3, #120	; 0x78
 8009040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009044:	4864      	ldr	r0, [pc, #400]	; (80091d8 <_printf_i+0x220>)
 8009046:	e055      	b.n	80090f4 <_printf_i+0x13c>
 8009048:	6813      	ldr	r3, [r2, #0]
 800904a:	1d19      	adds	r1, r3, #4
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6011      	str	r1, [r2, #0]
 8009050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009058:	2301      	movs	r3, #1
 800905a:	e08c      	b.n	8009176 <_printf_i+0x1be>
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6011      	str	r1, [r2, #0]
 8009060:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009064:	bf18      	it	ne
 8009066:	b21b      	sxthne	r3, r3
 8009068:	e7cf      	b.n	800900a <_printf_i+0x52>
 800906a:	6813      	ldr	r3, [r2, #0]
 800906c:	6825      	ldr	r5, [r4, #0]
 800906e:	1d18      	adds	r0, r3, #4
 8009070:	6010      	str	r0, [r2, #0]
 8009072:	0628      	lsls	r0, r5, #24
 8009074:	d501      	bpl.n	800907a <_printf_i+0xc2>
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	e002      	b.n	8009080 <_printf_i+0xc8>
 800907a:	0668      	lsls	r0, r5, #25
 800907c:	d5fb      	bpl.n	8009076 <_printf_i+0xbe>
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	4854      	ldr	r0, [pc, #336]	; (80091d4 <_printf_i+0x21c>)
 8009082:	296f      	cmp	r1, #111	; 0x6f
 8009084:	bf14      	ite	ne
 8009086:	220a      	movne	r2, #10
 8009088:	2208      	moveq	r2, #8
 800908a:	2100      	movs	r1, #0
 800908c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009090:	6865      	ldr	r5, [r4, #4]
 8009092:	60a5      	str	r5, [r4, #8]
 8009094:	2d00      	cmp	r5, #0
 8009096:	f2c0 8095 	blt.w	80091c4 <_printf_i+0x20c>
 800909a:	6821      	ldr	r1, [r4, #0]
 800909c:	f021 0104 	bic.w	r1, r1, #4
 80090a0:	6021      	str	r1, [r4, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d13d      	bne.n	8009122 <_printf_i+0x16a>
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	f040 808e 	bne.w	80091c8 <_printf_i+0x210>
 80090ac:	4665      	mov	r5, ip
 80090ae:	2a08      	cmp	r2, #8
 80090b0:	d10b      	bne.n	80090ca <_printf_i+0x112>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	07db      	lsls	r3, r3, #31
 80090b6:	d508      	bpl.n	80090ca <_printf_i+0x112>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	6862      	ldr	r2, [r4, #4]
 80090bc:	429a      	cmp	r2, r3
 80090be:	bfde      	ittt	le
 80090c0:	2330      	movle	r3, #48	; 0x30
 80090c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80090ca:	ebac 0305 	sub.w	r3, ip, r5
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	f8cd 8000 	str.w	r8, [sp]
 80090d4:	463b      	mov	r3, r7
 80090d6:	aa03      	add	r2, sp, #12
 80090d8:	4621      	mov	r1, r4
 80090da:	4630      	mov	r0, r6
 80090dc:	f7ff fef6 	bl	8008ecc <_printf_common>
 80090e0:	3001      	adds	r0, #1
 80090e2:	d14d      	bne.n	8009180 <_printf_i+0x1c8>
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090e8:	b005      	add	sp, #20
 80090ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ee:	4839      	ldr	r0, [pc, #228]	; (80091d4 <_printf_i+0x21c>)
 80090f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80090f4:	6813      	ldr	r3, [r2, #0]
 80090f6:	6821      	ldr	r1, [r4, #0]
 80090f8:	1d1d      	adds	r5, r3, #4
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6015      	str	r5, [r2, #0]
 80090fe:	060a      	lsls	r2, r1, #24
 8009100:	d50b      	bpl.n	800911a <_printf_i+0x162>
 8009102:	07ca      	lsls	r2, r1, #31
 8009104:	bf44      	itt	mi
 8009106:	f041 0120 	orrmi.w	r1, r1, #32
 800910a:	6021      	strmi	r1, [r4, #0]
 800910c:	b91b      	cbnz	r3, 8009116 <_printf_i+0x15e>
 800910e:	6822      	ldr	r2, [r4, #0]
 8009110:	f022 0220 	bic.w	r2, r2, #32
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	2210      	movs	r2, #16
 8009118:	e7b7      	b.n	800908a <_printf_i+0xd2>
 800911a:	064d      	lsls	r5, r1, #25
 800911c:	bf48      	it	mi
 800911e:	b29b      	uxthmi	r3, r3
 8009120:	e7ef      	b.n	8009102 <_printf_i+0x14a>
 8009122:	4665      	mov	r5, ip
 8009124:	fbb3 f1f2 	udiv	r1, r3, r2
 8009128:	fb02 3311 	mls	r3, r2, r1, r3
 800912c:	5cc3      	ldrb	r3, [r0, r3]
 800912e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009132:	460b      	mov	r3, r1
 8009134:	2900      	cmp	r1, #0
 8009136:	d1f5      	bne.n	8009124 <_printf_i+0x16c>
 8009138:	e7b9      	b.n	80090ae <_printf_i+0xf6>
 800913a:	6813      	ldr	r3, [r2, #0]
 800913c:	6825      	ldr	r5, [r4, #0]
 800913e:	6961      	ldr	r1, [r4, #20]
 8009140:	1d18      	adds	r0, r3, #4
 8009142:	6010      	str	r0, [r2, #0]
 8009144:	0628      	lsls	r0, r5, #24
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	d501      	bpl.n	800914e <_printf_i+0x196>
 800914a:	6019      	str	r1, [r3, #0]
 800914c:	e002      	b.n	8009154 <_printf_i+0x19c>
 800914e:	066a      	lsls	r2, r5, #25
 8009150:	d5fb      	bpl.n	800914a <_printf_i+0x192>
 8009152:	8019      	strh	r1, [r3, #0]
 8009154:	2300      	movs	r3, #0
 8009156:	6123      	str	r3, [r4, #16]
 8009158:	4665      	mov	r5, ip
 800915a:	e7b9      	b.n	80090d0 <_printf_i+0x118>
 800915c:	6813      	ldr	r3, [r2, #0]
 800915e:	1d19      	adds	r1, r3, #4
 8009160:	6011      	str	r1, [r2, #0]
 8009162:	681d      	ldr	r5, [r3, #0]
 8009164:	6862      	ldr	r2, [r4, #4]
 8009166:	2100      	movs	r1, #0
 8009168:	4628      	mov	r0, r5
 800916a:	f7f7 f8c1 	bl	80002f0 <memchr>
 800916e:	b108      	cbz	r0, 8009174 <_printf_i+0x1bc>
 8009170:	1b40      	subs	r0, r0, r5
 8009172:	6060      	str	r0, [r4, #4]
 8009174:	6863      	ldr	r3, [r4, #4]
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	2300      	movs	r3, #0
 800917a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800917e:	e7a7      	b.n	80090d0 <_printf_i+0x118>
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	462a      	mov	r2, r5
 8009184:	4639      	mov	r1, r7
 8009186:	4630      	mov	r0, r6
 8009188:	47c0      	blx	r8
 800918a:	3001      	adds	r0, #1
 800918c:	d0aa      	beq.n	80090e4 <_printf_i+0x12c>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	079b      	lsls	r3, r3, #30
 8009192:	d413      	bmi.n	80091bc <_printf_i+0x204>
 8009194:	68e0      	ldr	r0, [r4, #12]
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	4298      	cmp	r0, r3
 800919a:	bfb8      	it	lt
 800919c:	4618      	movlt	r0, r3
 800919e:	e7a3      	b.n	80090e8 <_printf_i+0x130>
 80091a0:	2301      	movs	r3, #1
 80091a2:	464a      	mov	r2, r9
 80091a4:	4639      	mov	r1, r7
 80091a6:	4630      	mov	r0, r6
 80091a8:	47c0      	blx	r8
 80091aa:	3001      	adds	r0, #1
 80091ac:	d09a      	beq.n	80090e4 <_printf_i+0x12c>
 80091ae:	3501      	adds	r5, #1
 80091b0:	68e3      	ldr	r3, [r4, #12]
 80091b2:	9a03      	ldr	r2, [sp, #12]
 80091b4:	1a9b      	subs	r3, r3, r2
 80091b6:	42ab      	cmp	r3, r5
 80091b8:	dcf2      	bgt.n	80091a0 <_printf_i+0x1e8>
 80091ba:	e7eb      	b.n	8009194 <_printf_i+0x1dc>
 80091bc:	2500      	movs	r5, #0
 80091be:	f104 0919 	add.w	r9, r4, #25
 80091c2:	e7f5      	b.n	80091b0 <_printf_i+0x1f8>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1ac      	bne.n	8009122 <_printf_i+0x16a>
 80091c8:	7803      	ldrb	r3, [r0, #0]
 80091ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091d2:	e76c      	b.n	80090ae <_printf_i+0xf6>
 80091d4:	0800f8dd 	.word	0x0800f8dd
 80091d8:	0800f8ee 	.word	0x0800f8ee

080091dc <memcpy>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	1e43      	subs	r3, r0, #1
 80091e0:	440a      	add	r2, r1
 80091e2:	4291      	cmp	r1, r2
 80091e4:	d100      	bne.n	80091e8 <memcpy+0xc>
 80091e6:	bd10      	pop	{r4, pc}
 80091e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f0:	e7f7      	b.n	80091e2 <memcpy+0x6>

080091f2 <memmove>:
 80091f2:	4288      	cmp	r0, r1
 80091f4:	b510      	push	{r4, lr}
 80091f6:	eb01 0302 	add.w	r3, r1, r2
 80091fa:	d807      	bhi.n	800920c <memmove+0x1a>
 80091fc:	1e42      	subs	r2, r0, #1
 80091fe:	4299      	cmp	r1, r3
 8009200:	d00a      	beq.n	8009218 <memmove+0x26>
 8009202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009206:	f802 4f01 	strb.w	r4, [r2, #1]!
 800920a:	e7f8      	b.n	80091fe <memmove+0xc>
 800920c:	4283      	cmp	r3, r0
 800920e:	d9f5      	bls.n	80091fc <memmove+0xa>
 8009210:	1881      	adds	r1, r0, r2
 8009212:	1ad2      	subs	r2, r2, r3
 8009214:	42d3      	cmn	r3, r2
 8009216:	d100      	bne.n	800921a <memmove+0x28>
 8009218:	bd10      	pop	{r4, pc}
 800921a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800921e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009222:	e7f7      	b.n	8009214 <memmove+0x22>

08009224 <_free_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4605      	mov	r5, r0
 8009228:	2900      	cmp	r1, #0
 800922a:	d045      	beq.n	80092b8 <_free_r+0x94>
 800922c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009230:	1f0c      	subs	r4, r1, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	bfb8      	it	lt
 8009236:	18e4      	addlt	r4, r4, r3
 8009238:	f000 f8d2 	bl	80093e0 <__malloc_lock>
 800923c:	4a1f      	ldr	r2, [pc, #124]	; (80092bc <_free_r+0x98>)
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	4610      	mov	r0, r2
 8009242:	b933      	cbnz	r3, 8009252 <_free_r+0x2e>
 8009244:	6063      	str	r3, [r4, #4]
 8009246:	6014      	str	r4, [r2, #0]
 8009248:	4628      	mov	r0, r5
 800924a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800924e:	f000 b8c8 	b.w	80093e2 <__malloc_unlock>
 8009252:	42a3      	cmp	r3, r4
 8009254:	d90c      	bls.n	8009270 <_free_r+0x4c>
 8009256:	6821      	ldr	r1, [r4, #0]
 8009258:	1862      	adds	r2, r4, r1
 800925a:	4293      	cmp	r3, r2
 800925c:	bf04      	itt	eq
 800925e:	681a      	ldreq	r2, [r3, #0]
 8009260:	685b      	ldreq	r3, [r3, #4]
 8009262:	6063      	str	r3, [r4, #4]
 8009264:	bf04      	itt	eq
 8009266:	1852      	addeq	r2, r2, r1
 8009268:	6022      	streq	r2, [r4, #0]
 800926a:	6004      	str	r4, [r0, #0]
 800926c:	e7ec      	b.n	8009248 <_free_r+0x24>
 800926e:	4613      	mov	r3, r2
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	b10a      	cbz	r2, 8009278 <_free_r+0x54>
 8009274:	42a2      	cmp	r2, r4
 8009276:	d9fa      	bls.n	800926e <_free_r+0x4a>
 8009278:	6819      	ldr	r1, [r3, #0]
 800927a:	1858      	adds	r0, r3, r1
 800927c:	42a0      	cmp	r0, r4
 800927e:	d10b      	bne.n	8009298 <_free_r+0x74>
 8009280:	6820      	ldr	r0, [r4, #0]
 8009282:	4401      	add	r1, r0
 8009284:	1858      	adds	r0, r3, r1
 8009286:	4282      	cmp	r2, r0
 8009288:	6019      	str	r1, [r3, #0]
 800928a:	d1dd      	bne.n	8009248 <_free_r+0x24>
 800928c:	6810      	ldr	r0, [r2, #0]
 800928e:	6852      	ldr	r2, [r2, #4]
 8009290:	605a      	str	r2, [r3, #4]
 8009292:	4401      	add	r1, r0
 8009294:	6019      	str	r1, [r3, #0]
 8009296:	e7d7      	b.n	8009248 <_free_r+0x24>
 8009298:	d902      	bls.n	80092a0 <_free_r+0x7c>
 800929a:	230c      	movs	r3, #12
 800929c:	602b      	str	r3, [r5, #0]
 800929e:	e7d3      	b.n	8009248 <_free_r+0x24>
 80092a0:	6820      	ldr	r0, [r4, #0]
 80092a2:	1821      	adds	r1, r4, r0
 80092a4:	428a      	cmp	r2, r1
 80092a6:	bf04      	itt	eq
 80092a8:	6811      	ldreq	r1, [r2, #0]
 80092aa:	6852      	ldreq	r2, [r2, #4]
 80092ac:	6062      	str	r2, [r4, #4]
 80092ae:	bf04      	itt	eq
 80092b0:	1809      	addeq	r1, r1, r0
 80092b2:	6021      	streq	r1, [r4, #0]
 80092b4:	605c      	str	r4, [r3, #4]
 80092b6:	e7c7      	b.n	8009248 <_free_r+0x24>
 80092b8:	bd38      	pop	{r3, r4, r5, pc}
 80092ba:	bf00      	nop
 80092bc:	240000b4 	.word	0x240000b4

080092c0 <_malloc_r>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	1ccd      	adds	r5, r1, #3
 80092c4:	f025 0503 	bic.w	r5, r5, #3
 80092c8:	3508      	adds	r5, #8
 80092ca:	2d0c      	cmp	r5, #12
 80092cc:	bf38      	it	cc
 80092ce:	250c      	movcc	r5, #12
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	4606      	mov	r6, r0
 80092d4:	db01      	blt.n	80092da <_malloc_r+0x1a>
 80092d6:	42a9      	cmp	r1, r5
 80092d8:	d903      	bls.n	80092e2 <_malloc_r+0x22>
 80092da:	230c      	movs	r3, #12
 80092dc:	6033      	str	r3, [r6, #0]
 80092de:	2000      	movs	r0, #0
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
 80092e2:	f000 f87d 	bl	80093e0 <__malloc_lock>
 80092e6:	4a21      	ldr	r2, [pc, #132]	; (800936c <_malloc_r+0xac>)
 80092e8:	6814      	ldr	r4, [r2, #0]
 80092ea:	4621      	mov	r1, r4
 80092ec:	b991      	cbnz	r1, 8009314 <_malloc_r+0x54>
 80092ee:	4c20      	ldr	r4, [pc, #128]	; (8009370 <_malloc_r+0xb0>)
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	b91b      	cbnz	r3, 80092fc <_malloc_r+0x3c>
 80092f4:	4630      	mov	r0, r6
 80092f6:	f000 f863 	bl	80093c0 <_sbrk_r>
 80092fa:	6020      	str	r0, [r4, #0]
 80092fc:	4629      	mov	r1, r5
 80092fe:	4630      	mov	r0, r6
 8009300:	f000 f85e 	bl	80093c0 <_sbrk_r>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d124      	bne.n	8009352 <_malloc_r+0x92>
 8009308:	230c      	movs	r3, #12
 800930a:	6033      	str	r3, [r6, #0]
 800930c:	4630      	mov	r0, r6
 800930e:	f000 f868 	bl	80093e2 <__malloc_unlock>
 8009312:	e7e4      	b.n	80092de <_malloc_r+0x1e>
 8009314:	680b      	ldr	r3, [r1, #0]
 8009316:	1b5b      	subs	r3, r3, r5
 8009318:	d418      	bmi.n	800934c <_malloc_r+0x8c>
 800931a:	2b0b      	cmp	r3, #11
 800931c:	d90f      	bls.n	800933e <_malloc_r+0x7e>
 800931e:	600b      	str	r3, [r1, #0]
 8009320:	50cd      	str	r5, [r1, r3]
 8009322:	18cc      	adds	r4, r1, r3
 8009324:	4630      	mov	r0, r6
 8009326:	f000 f85c 	bl	80093e2 <__malloc_unlock>
 800932a:	f104 000b 	add.w	r0, r4, #11
 800932e:	1d23      	adds	r3, r4, #4
 8009330:	f020 0007 	bic.w	r0, r0, #7
 8009334:	1ac3      	subs	r3, r0, r3
 8009336:	d0d3      	beq.n	80092e0 <_malloc_r+0x20>
 8009338:	425a      	negs	r2, r3
 800933a:	50e2      	str	r2, [r4, r3]
 800933c:	e7d0      	b.n	80092e0 <_malloc_r+0x20>
 800933e:	428c      	cmp	r4, r1
 8009340:	684b      	ldr	r3, [r1, #4]
 8009342:	bf16      	itet	ne
 8009344:	6063      	strne	r3, [r4, #4]
 8009346:	6013      	streq	r3, [r2, #0]
 8009348:	460c      	movne	r4, r1
 800934a:	e7eb      	b.n	8009324 <_malloc_r+0x64>
 800934c:	460c      	mov	r4, r1
 800934e:	6849      	ldr	r1, [r1, #4]
 8009350:	e7cc      	b.n	80092ec <_malloc_r+0x2c>
 8009352:	1cc4      	adds	r4, r0, #3
 8009354:	f024 0403 	bic.w	r4, r4, #3
 8009358:	42a0      	cmp	r0, r4
 800935a:	d005      	beq.n	8009368 <_malloc_r+0xa8>
 800935c:	1a21      	subs	r1, r4, r0
 800935e:	4630      	mov	r0, r6
 8009360:	f000 f82e 	bl	80093c0 <_sbrk_r>
 8009364:	3001      	adds	r0, #1
 8009366:	d0cf      	beq.n	8009308 <_malloc_r+0x48>
 8009368:	6025      	str	r5, [r4, #0]
 800936a:	e7db      	b.n	8009324 <_malloc_r+0x64>
 800936c:	240000b4 	.word	0x240000b4
 8009370:	240000b8 	.word	0x240000b8

08009374 <_realloc_r>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	4607      	mov	r7, r0
 8009378:	4614      	mov	r4, r2
 800937a:	460e      	mov	r6, r1
 800937c:	b921      	cbnz	r1, 8009388 <_realloc_r+0x14>
 800937e:	4611      	mov	r1, r2
 8009380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009384:	f7ff bf9c 	b.w	80092c0 <_malloc_r>
 8009388:	b922      	cbnz	r2, 8009394 <_realloc_r+0x20>
 800938a:	f7ff ff4b 	bl	8009224 <_free_r>
 800938e:	4625      	mov	r5, r4
 8009390:	4628      	mov	r0, r5
 8009392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009394:	f000 f826 	bl	80093e4 <_malloc_usable_size_r>
 8009398:	42a0      	cmp	r0, r4
 800939a:	d20f      	bcs.n	80093bc <_realloc_r+0x48>
 800939c:	4621      	mov	r1, r4
 800939e:	4638      	mov	r0, r7
 80093a0:	f7ff ff8e 	bl	80092c0 <_malloc_r>
 80093a4:	4605      	mov	r5, r0
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d0f2      	beq.n	8009390 <_realloc_r+0x1c>
 80093aa:	4631      	mov	r1, r6
 80093ac:	4622      	mov	r2, r4
 80093ae:	f7ff ff15 	bl	80091dc <memcpy>
 80093b2:	4631      	mov	r1, r6
 80093b4:	4638      	mov	r0, r7
 80093b6:	f7ff ff35 	bl	8009224 <_free_r>
 80093ba:	e7e9      	b.n	8009390 <_realloc_r+0x1c>
 80093bc:	4635      	mov	r5, r6
 80093be:	e7e7      	b.n	8009390 <_realloc_r+0x1c>

080093c0 <_sbrk_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4c06      	ldr	r4, [pc, #24]	; (80093dc <_sbrk_r+0x1c>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4605      	mov	r5, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	f7f8 ff14 	bl	80021f8 <_sbrk>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_sbrk_r+0x1a>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	b103      	cbz	r3, 80093da <_sbrk_r+0x1a>
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	24025b04 	.word	0x24025b04

080093e0 <__malloc_lock>:
 80093e0:	4770      	bx	lr

080093e2 <__malloc_unlock>:
 80093e2:	4770      	bx	lr

080093e4 <_malloc_usable_size_r>:
 80093e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e8:	1f18      	subs	r0, r3, #4
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	bfbc      	itt	lt
 80093ee:	580b      	ldrlt	r3, [r1, r0]
 80093f0:	18c0      	addlt	r0, r0, r3
 80093f2:	4770      	bx	lr

080093f4 <_init>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr

08009400 <_fini>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	bf00      	nop
 8009404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009406:	bc08      	pop	{r3}
 8009408:	469e      	mov	lr, r3
 800940a:	4770      	bx	lr
